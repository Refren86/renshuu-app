import { r as Ke, g as ry, j as Xt, m as tg, aa as sy, k as oy } from "./index-DznMvQEf.js";
import { B as ay } from "./button-CWomrNrA.js";
/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */ const Du = "170",
  ly = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 },
  cy = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 },
  j0 = 0,
  pd = 1,
  Q0 = 2,
  uy = 3,
  $0 = 0,
  Uu = 1,
  ha = 2,
  xi = 3,
  ar = 0,
  Nn = 1,
  Si = 2,
  sr = 0,
  ds = 1,
  md = 2,
  gd = 3,
  vd = 4,
  ev = 5,
  Pr = 100,
  tv = 101,
  nv = 102,
  iv = 103,
  rv = 104,
  sv = 200,
  ov = 201,
  av = 202,
  lv = 203,
  qc = 204,
  Zc = 205,
  cv = 206,
  uv = 207,
  hv = 208,
  fv = 209,
  dv = 210,
  pv = 211,
  mv = 212,
  gv = 213,
  vv = 214,
  Jc = 0,
  Kc = 1,
  jc = 2,
  _s = 3,
  Qc = 4,
  $c = 5,
  eu = 6,
  tu = 7,
  Ba = 0,
  _v = 1,
  xv = 2,
  zi = 0,
  yv = 1,
  Sv = 2,
  Mv = 3,
  Dd = 4,
  wv = 5,
  Ev = 6,
  Tv = 7,
  _d = "attached",
  Av = "detached",
  Nu = 300,
  lr = 301,
  Ir = 302,
  Sa = 303,
  Ma = 304,
  wo = 306,
  wa = 1e3,
  fi = 1001,
  Ea = 1002,
  _n = 1003,
  Ud = 1004,
  hy = 1004,
  uo = 1005,
  fy = 1005,
  an = 1006,
  fa = 1007,
  dy = 1007,
  Oi = 1008,
  py = 1008,
  Mi = 1009,
  Nd = 1010,
  Fd = 1011,
  _o = 1012,
  Fu = 1013,
  cr = 1014,
  Yn = 1015,
  Eo = 1016,
  Ou = 1017,
  Bu = 1018,
  xs = 1020,
  Od = 35902,
  Bd = 1021,
  zd = 1022,
  An = 1023,
  kd = 1024,
  Vd = 1025,
  ps = 1026,
  ys = 1027,
  zu = 1028,
  za = 1029,
  Hd = 1030,
  ku = 1031,
  my = 1032,
  Vu = 1033,
  da = 33776,
  pa = 33777,
  ma = 33778,
  ga = 33779,
  nu = 35840,
  iu = 35841,
  ru = 35842,
  su = 35843,
  ou = 36196,
  au = 37492,
  lu = 37496,
  cu = 37808,
  uu = 37809,
  hu = 37810,
  fu = 37811,
  du = 37812,
  pu = 37813,
  mu = 37814,
  gu = 37815,
  vu = 37816,
  _u = 37817,
  xu = 37818,
  yu = 37819,
  Su = 37820,
  Mu = 37821,
  va = 36492,
  wu = 36494,
  Eu = 36495,
  Gd = 36283,
  Tu = 36284,
  Au = 36285,
  bu = 36286,
  bv = 2200,
  Cv = 2201,
  Rv = 2202,
  Ta = 2300,
  Cu = 2301,
  Wc = 2302,
  cs = 2400,
  us = 2401,
  Aa = 2402,
  Hu = 2500,
  Wd = 2501,
  gy = 0,
  vy = 1,
  _y = 2,
  Pv = 3200,
  Iv = 3201,
  xy = 3202,
  yy = 3203,
  Dr = 0,
  Lv = 1,
  nr = "",
  Wn = "srgb",
  ws = "srgb-linear",
  ka = "linear",
  Ut = "srgb",
  Sy = 0,
  os = 7680,
  My = 7681,
  wy = 7682,
  Ey = 7683,
  Ty = 34055,
  Ay = 34056,
  by = 5386,
  Cy = 512,
  Ry = 513,
  Py = 514,
  Iy = 515,
  Ly = 516,
  Dy = 517,
  Uy = 518,
  xd = 519,
  Dv = 512,
  Uv = 513,
  Nv = 514,
  Xd = 515,
  Fv = 516,
  Ov = 517,
  Bv = 518,
  zv = 519,
  ba = 35044,
  Ny = 35048,
  Fy = 35040,
  Oy = 35045,
  By = 35049,
  zy = 35041,
  ky = 35046,
  Vy = 35050,
  Hy = 35042,
  Gy = "100",
  yd = "300 es",
  Bi = 2e3,
  Ca = 2001;
class Hi {
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  hasEventListener(e, t) {
    if (this._listeners === void 0) return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  removeEventListener(e, t) {
    if (this._listeners === void 0) return;
    const i = this._listeners[e];
    if (i !== void 0) {
      const s = i.indexOf(t);
      s !== -1 && i.splice(s, 1);
    }
  }
  dispatchEvent(e) {
    if (this._listeners === void 0) return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const i = n.slice(0);
      for (let s = 0, l = i.length; s < l; s++) i[s].call(this, e);
      e.target = null;
    }
  }
}
const wn = [
  "00",
  "01",
  "02",
  "03",
  "04",
  "05",
  "06",
  "07",
  "08",
  "09",
  "0a",
  "0b",
  "0c",
  "0d",
  "0e",
  "0f",
  "10",
  "11",
  "12",
  "13",
  "14",
  "15",
  "16",
  "17",
  "18",
  "19",
  "1a",
  "1b",
  "1c",
  "1d",
  "1e",
  "1f",
  "20",
  "21",
  "22",
  "23",
  "24",
  "25",
  "26",
  "27",
  "28",
  "29",
  "2a",
  "2b",
  "2c",
  "2d",
  "2e",
  "2f",
  "30",
  "31",
  "32",
  "33",
  "34",
  "35",
  "36",
  "37",
  "38",
  "39",
  "3a",
  "3b",
  "3c",
  "3d",
  "3e",
  "3f",
  "40",
  "41",
  "42",
  "43",
  "44",
  "45",
  "46",
  "47",
  "48",
  "49",
  "4a",
  "4b",
  "4c",
  "4d",
  "4e",
  "4f",
  "50",
  "51",
  "52",
  "53",
  "54",
  "55",
  "56",
  "57",
  "58",
  "59",
  "5a",
  "5b",
  "5c",
  "5d",
  "5e",
  "5f",
  "60",
  "61",
  "62",
  "63",
  "64",
  "65",
  "66",
  "67",
  "68",
  "69",
  "6a",
  "6b",
  "6c",
  "6d",
  "6e",
  "6f",
  "70",
  "71",
  "72",
  "73",
  "74",
  "75",
  "76",
  "77",
  "78",
  "79",
  "7a",
  "7b",
  "7c",
  "7d",
  "7e",
  "7f",
  "80",
  "81",
  "82",
  "83",
  "84",
  "85",
  "86",
  "87",
  "88",
  "89",
  "8a",
  "8b",
  "8c",
  "8d",
  "8e",
  "8f",
  "90",
  "91",
  "92",
  "93",
  "94",
  "95",
  "96",
  "97",
  "98",
  "99",
  "9a",
  "9b",
  "9c",
  "9d",
  "9e",
  "9f",
  "a0",
  "a1",
  "a2",
  "a3",
  "a4",
  "a5",
  "a6",
  "a7",
  "a8",
  "a9",
  "aa",
  "ab",
  "ac",
  "ad",
  "ae",
  "af",
  "b0",
  "b1",
  "b2",
  "b3",
  "b4",
  "b5",
  "b6",
  "b7",
  "b8",
  "b9",
  "ba",
  "bb",
  "bc",
  "bd",
  "be",
  "bf",
  "c0",
  "c1",
  "c2",
  "c3",
  "c4",
  "c5",
  "c6",
  "c7",
  "c8",
  "c9",
  "ca",
  "cb",
  "cc",
  "cd",
  "ce",
  "cf",
  "d0",
  "d1",
  "d2",
  "d3",
  "d4",
  "d5",
  "d6",
  "d7",
  "d8",
  "d9",
  "da",
  "db",
  "dc",
  "dd",
  "de",
  "df",
  "e0",
  "e1",
  "e2",
  "e3",
  "e4",
  "e5",
  "e6",
  "e7",
  "e8",
  "e9",
  "ea",
  "eb",
  "ec",
  "ed",
  "ee",
  "ef",
  "f0",
  "f1",
  "f2",
  "f3",
  "f4",
  "f5",
  "f6",
  "f7",
  "f8",
  "f9",
  "fa",
  "fb",
  "fc",
  "fd",
  "fe",
  "ff",
];
let ng = 1234567;
const ms = Math.PI / 180,
  xo = 180 / Math.PI;
function ti() {
  const r = (Math.random() * 4294967295) | 0,
    e = (Math.random() * 4294967295) | 0,
    t = (Math.random() * 4294967295) | 0,
    n = (Math.random() * 4294967295) | 0;
  return (
    wn[r & 255] +
    wn[(r >> 8) & 255] +
    wn[(r >> 16) & 255] +
    wn[(r >> 24) & 255] +
    "-" +
    wn[e & 255] +
    wn[(e >> 8) & 255] +
    "-" +
    wn[((e >> 16) & 15) | 64] +
    wn[(e >> 24) & 255] +
    "-" +
    wn[(t & 63) | 128] +
    wn[(t >> 8) & 255] +
    "-" +
    wn[(t >> 16) & 255] +
    wn[(t >> 24) & 255] +
    wn[n & 255] +
    wn[(n >> 8) & 255] +
    wn[(n >> 16) & 255] +
    wn[(n >> 24) & 255]
  ).toLowerCase();
}
function Jt(r, e, t) {
  return Math.max(e, Math.min(t, r));
}
function Yd(r, e) {
  return ((r % e) + e) % e;
}
function Wy(r, e, t, n, i) {
  return n + ((r - e) * (i - n)) / (t - e);
}
function Xy(r, e, t) {
  return r !== e ? (t - r) / (e - r) : 0;
}
function _a(r, e, t) {
  return (1 - t) * r + t * e;
}
function Yy(r, e, t, n) {
  return _a(r, e, 1 - Math.exp(-t * n));
}
function qy(r, e = 1) {
  return e - Math.abs(Yd(r, e * 2) - e);
}
function Zy(r, e, t) {
  return r <= e ? 0 : r >= t ? 1 : ((r = (r - e) / (t - e)), r * r * (3 - 2 * r));
}
function Jy(r, e, t) {
  return r <= e ? 0 : r >= t ? 1 : ((r = (r - e) / (t - e)), r * r * r * (r * (r * 6 - 15) + 10));
}
function Ky(r, e) {
  return r + Math.floor(Math.random() * (e - r + 1));
}
function jy(r, e) {
  return r + Math.random() * (e - r);
}
function Qy(r) {
  return r * (0.5 - Math.random());
}
function $y(r) {
  r !== void 0 && (ng = r);
  let e = (ng += 1831565813);
  return (
    (e = Math.imul(e ^ (e >>> 15), e | 1)),
    (e ^= e + Math.imul(e ^ (e >>> 7), e | 61)),
    ((e ^ (e >>> 14)) >>> 0) / 4294967296
  );
}
function eS(r) {
  return r * ms;
}
function tS(r) {
  return r * xo;
}
function nS(r) {
  return (r & (r - 1)) === 0 && r !== 0;
}
function iS(r) {
  return Math.pow(2, Math.ceil(Math.log(r) / Math.LN2));
}
function rS(r) {
  return Math.pow(2, Math.floor(Math.log(r) / Math.LN2));
}
function sS(r, e, t, n, i) {
  const s = Math.cos,
    l = Math.sin,
    c = s(t / 2),
    u = l(t / 2),
    h = s((e + n) / 2),
    d = l((e + n) / 2),
    p = s((e - n) / 2),
    m = l((e - n) / 2),
    v = s((n - e) / 2),
    x = l((n - e) / 2);
  switch (i) {
    case "XYX":
      r.set(c * d, u * p, u * m, c * h);
      break;
    case "YZY":
      r.set(u * m, c * d, u * p, c * h);
      break;
    case "ZXZ":
      r.set(u * p, u * m, c * d, c * h);
      break;
    case "XZX":
      r.set(c * d, u * x, u * v, c * h);
      break;
    case "YXY":
      r.set(u * v, c * d, u * x, c * h);
      break;
    case "ZYZ":
      r.set(u * x, u * v, c * d, c * h);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
  }
}
function Un(r, e) {
  switch (e.constructor) {
    case Float32Array:
      return r;
    case Uint32Array:
      return r / 4294967295;
    case Uint16Array:
      return r / 65535;
    case Uint8Array:
      return r / 255;
    case Int32Array:
      return Math.max(r / 2147483647, -1);
    case Int16Array:
      return Math.max(r / 32767, -1);
    case Int8Array:
      return Math.max(r / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function pt(r, e) {
  switch (e.constructor) {
    case Float32Array:
      return r;
    case Uint32Array:
      return Math.round(r * 4294967295);
    case Uint16Array:
      return Math.round(r * 65535);
    case Uint8Array:
      return Math.round(r * 255);
    case Int32Array:
      return Math.round(r * 2147483647);
    case Int16Array:
      return Math.round(r * 32767);
    case Int8Array:
      return Math.round(r * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const oS = {
  DEG2RAD: ms,
  RAD2DEG: xo,
  generateUUID: ti,
  clamp: Jt,
  euclideanModulo: Yd,
  mapLinear: Wy,
  inverseLerp: Xy,
  lerp: _a,
  damp: Yy,
  pingpong: qy,
  smoothstep: Zy,
  smootherstep: Jy,
  randInt: Ky,
  randFloat: jy,
  randFloatSpread: Qy,
  seededRandom: $y,
  degToRad: eS,
  radToDeg: tS,
  isPowerOfTwo: nS,
  ceilPowerOfTwo: iS,
  floorPowerOfTwo: rS,
  setQuaternionFromProperEuler: sS,
  normalize: pt,
  denormalize: Un,
};
class fe {
  constructor(e = 0, t = 0) {
    (fe.prototype.isVector2 = !0), (this.x = e), (this.y = t);
  }
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  set(e, t) {
    return (this.x = e), (this.y = t), this;
  }
  setScalar(e) {
    return (this.x = e), (this.y = e), this;
  }
  setX(e) {
    return (this.x = e), this;
  }
  setY(e) {
    return (this.y = e), this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(e) {
    return (this.x = e.x), (this.y = e.y), this;
  }
  add(e) {
    return (this.x += e.x), (this.y += e.y), this;
  }
  addScalar(e) {
    return (this.x += e), (this.y += e), this;
  }
  addVectors(e, t) {
    return (this.x = e.x + t.x), (this.y = e.y + t.y), this;
  }
  addScaledVector(e, t) {
    return (this.x += e.x * t), (this.y += e.y * t), this;
  }
  sub(e) {
    return (this.x -= e.x), (this.y -= e.y), this;
  }
  subScalar(e) {
    return (this.x -= e), (this.y -= e), this;
  }
  subVectors(e, t) {
    return (this.x = e.x - t.x), (this.y = e.y - t.y), this;
  }
  multiply(e) {
    return (this.x *= e.x), (this.y *= e.y), this;
  }
  multiplyScalar(e) {
    return (this.x *= e), (this.y *= e), this;
  }
  divide(e) {
    return (this.x /= e.x), (this.y /= e.y), this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  applyMatrix3(e) {
    const t = this.x,
      n = this.y,
      i = e.elements;
    return (this.x = i[0] * t + i[3] * n + i[6]), (this.y = i[1] * t + i[4] * n + i[7]), this;
  }
  min(e) {
    return (this.x = Math.min(this.x, e.x)), (this.y = Math.min(this.y, e.y)), this;
  }
  max(e) {
    return (this.x = Math.max(this.x, e.x)), (this.y = Math.max(this.y, e.y)), this;
  }
  clamp(e, t) {
    return (this.x = Math.max(e.x, Math.min(t.x, this.x))), (this.y = Math.max(e.y, Math.min(t.y, this.y))), this;
  }
  clampScalar(e, t) {
    return (this.x = Math.max(e, Math.min(t, this.x))), (this.y = Math.max(e, Math.min(t, this.y))), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), this;
  }
  ceil() {
    return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), this;
  }
  round() {
    return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), this;
  }
  roundToZero() {
    return (this.x = Math.trunc(this.x)), (this.y = Math.trunc(this.y)), this;
  }
  negate() {
    return (this.x = -this.x), (this.y = -this.y), this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0) return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(Jt(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x,
      n = this.y - e.y;
    return t * t + n * n;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return (this.x += (e.x - this.x) * t), (this.y += (e.y - this.y) * t), this;
  }
  lerpVectors(e, t, n) {
    return (this.x = e.x + (t.x - e.x) * n), (this.y = e.y + (t.y - e.y) * n), this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  fromArray(e, t = 0) {
    return (this.x = e[t]), (this.y = e[t + 1]), this;
  }
  toArray(e = [], t = 0) {
    return (e[t] = this.x), (e[t + 1] = this.y), e;
  }
  fromBufferAttribute(e, t) {
    return (this.x = e.getX(t)), (this.y = e.getY(t)), this;
  }
  rotateAround(e, t) {
    const n = Math.cos(t),
      i = Math.sin(t),
      s = this.x - e.x,
      l = this.y - e.y;
    return (this.x = s * n - l * i + e.x), (this.y = s * i + l * n + e.y), this;
  }
  random() {
    return (this.x = Math.random()), (this.y = Math.random()), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class dt {
  constructor(e, t, n, i, s, l, c, u, h) {
    (dt.prototype.isMatrix3 = !0),
      (this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]),
      e !== void 0 && this.set(e, t, n, i, s, l, c, u, h);
  }
  set(e, t, n, i, s, l, c, u, h) {
    const d = this.elements;
    return (
      (d[0] = e), (d[1] = i), (d[2] = c), (d[3] = t), (d[4] = s), (d[5] = u), (d[6] = n), (d[7] = l), (d[8] = h), this
    );
  }
  identity() {
    return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
  }
  copy(e) {
    const t = this.elements,
      n = e.elements;
    return (
      (t[0] = n[0]),
      (t[1] = n[1]),
      (t[2] = n[2]),
      (t[3] = n[3]),
      (t[4] = n[4]),
      (t[5] = n[5]),
      (t[6] = n[6]),
      (t[7] = n[7]),
      (t[8] = n[8]),
      this
    );
  }
  extractBasis(e, t, n) {
    return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(e) {
    const t = e.elements;
    return this.set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]), this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements,
      i = t.elements,
      s = this.elements,
      l = n[0],
      c = n[3],
      u = n[6],
      h = n[1],
      d = n[4],
      p = n[7],
      m = n[2],
      v = n[5],
      x = n[8],
      M = i[0],
      y = i[3],
      _ = i[6],
      w = i[1],
      E = i[4],
      A = i[7],
      O = i[2],
      P = i[5],
      L = i[8];
    return (
      (s[0] = l * M + c * w + u * O),
      (s[3] = l * y + c * E + u * P),
      (s[6] = l * _ + c * A + u * L),
      (s[1] = h * M + d * w + p * O),
      (s[4] = h * y + d * E + p * P),
      (s[7] = h * _ + d * A + p * L),
      (s[2] = m * M + v * w + x * O),
      (s[5] = m * y + v * E + x * P),
      (s[8] = m * _ + v * A + x * L),
      this
    );
  }
  multiplyScalar(e) {
    const t = this.elements;
    return (
      (t[0] *= e),
      (t[3] *= e),
      (t[6] *= e),
      (t[1] *= e),
      (t[4] *= e),
      (t[7] *= e),
      (t[2] *= e),
      (t[5] *= e),
      (t[8] *= e),
      this
    );
  }
  determinant() {
    const e = this.elements,
      t = e[0],
      n = e[1],
      i = e[2],
      s = e[3],
      l = e[4],
      c = e[5],
      u = e[6],
      h = e[7],
      d = e[8];
    return t * l * d - t * c * h - n * s * d + n * c * u + i * s * h - i * l * u;
  }
  invert() {
    const e = this.elements,
      t = e[0],
      n = e[1],
      i = e[2],
      s = e[3],
      l = e[4],
      c = e[5],
      u = e[6],
      h = e[7],
      d = e[8],
      p = d * l - c * h,
      m = c * u - d * s,
      v = h * s - l * u,
      x = t * p + n * m + i * v;
    if (x === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const M = 1 / x;
    return (
      (e[0] = p * M),
      (e[1] = (i * h - d * n) * M),
      (e[2] = (c * n - i * l) * M),
      (e[3] = m * M),
      (e[4] = (d * t - i * u) * M),
      (e[5] = (i * s - c * t) * M),
      (e[6] = v * M),
      (e[7] = (n * u - h * t) * M),
      (e[8] = (l * t - n * s) * M),
      this
    );
  }
  transpose() {
    let e;
    const t = this.elements;
    return (
      (e = t[1]),
      (t[1] = t[3]),
      (t[3] = e),
      (e = t[2]),
      (t[2] = t[6]),
      (t[6] = e),
      (e = t[5]),
      (t[5] = t[7]),
      (t[7] = e),
      this
    );
  }
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  transposeIntoArray(e) {
    const t = this.elements;
    return (
      (e[0] = t[0]),
      (e[1] = t[3]),
      (e[2] = t[6]),
      (e[3] = t[1]),
      (e[4] = t[4]),
      (e[5] = t[7]),
      (e[6] = t[2]),
      (e[7] = t[5]),
      (e[8] = t[8]),
      this
    );
  }
  setUvTransform(e, t, n, i, s, l, c) {
    const u = Math.cos(s),
      h = Math.sin(s);
    return (
      this.set(n * u, n * h, -n * (u * l + h * c) + l + e, -i * h, i * u, -i * (-h * l + u * c) + c + t, 0, 0, 1), this
    );
  }
  scale(e, t) {
    return this.premultiply(_f.makeScale(e, t)), this;
  }
  rotate(e) {
    return this.premultiply(_f.makeRotation(-e)), this;
  }
  translate(e, t) {
    return this.premultiply(_f.makeTranslation(e, t)), this;
  }
  makeTranslation(e, t) {
    return e.isVector2 ? this.set(1, 0, e.x, 0, 1, e.y, 0, 0, 1) : this.set(1, 0, e, 0, 1, t, 0, 0, 1), this;
  }
  makeRotation(e) {
    const t = Math.cos(e),
      n = Math.sin(e);
    return this.set(t, -n, 0, n, t, 0, 0, 0, 1), this;
  }
  makeScale(e, t) {
    return this.set(e, 0, 0, 0, t, 0, 0, 0, 1), this;
  }
  equals(e) {
    const t = this.elements,
      n = e.elements;
    for (let i = 0; i < 9; i++) if (t[i] !== n[i]) return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 9; n++) this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return (
      (e[t] = n[0]),
      (e[t + 1] = n[1]),
      (e[t + 2] = n[2]),
      (e[t + 3] = n[3]),
      (e[t + 4] = n[4]),
      (e[t + 5] = n[5]),
      (e[t + 6] = n[6]),
      (e[t + 7] = n[7]),
      (e[t + 8] = n[8]),
      e
    );
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const _f = new dt();
function kv(r) {
  for (let e = r.length - 1; e >= 0; --e) if (r[e] >= 65535) return !0;
  return !1;
}
const aS = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array,
};
function ho(r, e) {
  return new aS[r](e);
}
function Ra(r) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", r);
}
function Vv() {
  const r = Ra("canvas");
  return (r.style.display = "block"), r;
}
const ig = {};
function la(r) {
  r in ig || ((ig[r] = !0), console.warn(r));
}
function lS(r, e, t) {
  return new Promise(function (n, i) {
    function s() {
      switch (r.clientWaitSync(e, r.SYNC_FLUSH_COMMANDS_BIT, 0)) {
        case r.WAIT_FAILED:
          i();
          break;
        case r.TIMEOUT_EXPIRED:
          setTimeout(s, t);
          break;
        default:
          n();
      }
    }
    setTimeout(s, t);
  });
}
function cS(r) {
  const e = r.elements;
  (e[2] = 0.5 * e[2] + 0.5 * e[3]),
    (e[6] = 0.5 * e[6] + 0.5 * e[7]),
    (e[10] = 0.5 * e[10] + 0.5 * e[11]),
    (e[14] = 0.5 * e[14] + 0.5 * e[15]);
}
function uS(r) {
  const e = r.elements;
  e[11] === -1 ? ((e[10] = -e[10] - 1), (e[14] = -e[14])) : ((e[10] = -e[10]), (e[14] = -e[14] + 1));
}
const At = {
  enabled: !0,
  workingColorSpace: ws,
  spaces: {},
  convert: function (r, e, t) {
    return (
      this.enabled === !1 ||
        e === t ||
        !e ||
        !t ||
        (this.spaces[e].transfer === Ut && ((r.r = or(r.r)), (r.g = or(r.g)), (r.b = or(r.b))),
        this.spaces[e].primaries !== this.spaces[t].primaries &&
          (r.applyMatrix3(this.spaces[e].toXYZ), r.applyMatrix3(this.spaces[t].fromXYZ)),
        this.spaces[t].transfer === Ut && ((r.r = vo(r.r)), (r.g = vo(r.g)), (r.b = vo(r.b)))),
      r
    );
  },
  fromWorkingColorSpace: function (r, e) {
    return this.convert(r, this.workingColorSpace, e);
  },
  toWorkingColorSpace: function (r, e) {
    return this.convert(r, e, this.workingColorSpace);
  },
  getPrimaries: function (r) {
    return this.spaces[r].primaries;
  },
  getTransfer: function (r) {
    return r === nr ? ka : this.spaces[r].transfer;
  },
  getLuminanceCoefficients: function (r, e = this.workingColorSpace) {
    return r.fromArray(this.spaces[e].luminanceCoefficients);
  },
  define: function (r) {
    Object.assign(this.spaces, r);
  },
  _getMatrix: function (r, e, t) {
    return r.copy(this.spaces[e].toXYZ).multiply(this.spaces[t].fromXYZ);
  },
  _getDrawingBufferColorSpace: function (r) {
    return this.spaces[r].outputColorSpaceConfig.drawingBufferColorSpace;
  },
  _getUnpackColorSpace: function (r = this.workingColorSpace) {
    return this.spaces[r].workingColorSpaceConfig.unpackColorSpace;
  },
};
function or(r) {
  return r < 0.04045 ? r * 0.0773993808 : Math.pow(r * 0.9478672986 + 0.0521327014, 2.4);
}
function vo(r) {
  return r < 0.0031308 ? r * 12.92 : 1.055 * Math.pow(r, 0.41666) - 0.055;
}
const rg = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06],
  sg = [0.2126, 0.7152, 0.0722],
  og = [0.3127, 0.329],
  ag = new dt().set(0.4123908, 0.3575843, 0.1804808, 0.212639, 0.7151687, 0.0721923, 0.0193308, 0.1191948, 0.9505322),
  lg = new dt().set(
    3.2409699,
    -1.5373832,
    -0.4986108,
    -0.9692436,
    1.8759675,
    0.0415551,
    0.0556301,
    -0.203977,
    1.0569715
  );
At.define({
  [ws]: {
    primaries: rg,
    whitePoint: og,
    transfer: ka,
    toXYZ: ag,
    fromXYZ: lg,
    luminanceCoefficients: sg,
    workingColorSpaceConfig: { unpackColorSpace: Wn },
    outputColorSpaceConfig: { drawingBufferColorSpace: Wn },
  },
  [Wn]: {
    primaries: rg,
    whitePoint: og,
    transfer: Ut,
    toXYZ: ag,
    fromXYZ: lg,
    luminanceCoefficients: sg,
    outputColorSpaceConfig: { drawingBufferColorSpace: Wn },
  },
});
let Hs;
class Hv {
  static getDataURL(e) {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u") return e.src;
    let t;
    if (e instanceof HTMLCanvasElement) t = e;
    else {
      Hs === void 0 && (Hs = Ra("canvas")), (Hs.width = e.width), (Hs.height = e.height);
      const n = Hs.getContext("2d");
      e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), (t = Hs);
    }
    return t.width > 2048 || t.height > 2048
      ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e),
        t.toDataURL("image/jpeg", 0.6))
      : t.toDataURL("image/png");
  }
  static sRGBToLinear(e) {
    if (
      (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement) ||
      (typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement) ||
      (typeof ImageBitmap < "u" && e instanceof ImageBitmap)
    ) {
      const t = Ra("canvas");
      (t.width = e.width), (t.height = e.height);
      const n = t.getContext("2d");
      n.drawImage(e, 0, 0, e.width, e.height);
      const i = n.getImageData(0, 0, e.width, e.height),
        s = i.data;
      for (let l = 0; l < s.length; l++) s[l] = or(s[l] / 255) * 255;
      return n.putImageData(i, 0, 0), t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let n = 0; n < t.length; n++)
        t instanceof Uint8Array || t instanceof Uint8ClampedArray
          ? (t[n] = Math.floor(or(t[n] / 255) * 255))
          : (t[n] = or(t[n]));
      return { data: t, width: e.width, height: e.height };
    } else
      return (
        console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e
      );
  }
}
let hS = 0;
class hs {
  constructor(e = null) {
    (this.isSource = !0),
      Object.defineProperty(this, "id", { value: hS++ }),
      (this.uuid = ti()),
      (this.data = e),
      (this.dataReady = !0),
      (this.version = 0);
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.images[this.uuid] !== void 0) return e.images[this.uuid];
    const n = { uuid: this.uuid, url: "" },
      i = this.data;
    if (i !== null) {
      let s;
      if (Array.isArray(i)) {
        s = [];
        for (let l = 0, c = i.length; l < c; l++) i[l].isDataTexture ? s.push(xf(i[l].image)) : s.push(xf(i[l]));
      } else s = xf(i);
      n.url = s;
    }
    return t || (e.images[this.uuid] = n), n;
  }
}
function xf(r) {
  return (typeof HTMLImageElement < "u" && r instanceof HTMLImageElement) ||
    (typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement) ||
    (typeof ImageBitmap < "u" && r instanceof ImageBitmap)
    ? Hv.getDataURL(r)
    : r.data
      ? { data: Array.from(r.data), width: r.width, height: r.height, type: r.data.constructor.name }
      : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let fS = 0;
class Kt extends Hi {
  constructor(
    e = Kt.DEFAULT_IMAGE,
    t = Kt.DEFAULT_MAPPING,
    n = fi,
    i = fi,
    s = an,
    l = Oi,
    c = An,
    u = Mi,
    h = Kt.DEFAULT_ANISOTROPY,
    d = nr
  ) {
    super(),
      (this.isTexture = !0),
      Object.defineProperty(this, "id", { value: fS++ }),
      (this.uuid = ti()),
      (this.name = ""),
      (this.source = new hs(e)),
      (this.mipmaps = []),
      (this.mapping = t),
      (this.channel = 0),
      (this.wrapS = n),
      (this.wrapT = i),
      (this.magFilter = s),
      (this.minFilter = l),
      (this.anisotropy = h),
      (this.format = c),
      (this.internalFormat = null),
      (this.type = u),
      (this.offset = new fe(0, 0)),
      (this.repeat = new fe(1, 1)),
      (this.center = new fe(0, 0)),
      (this.rotation = 0),
      (this.matrixAutoUpdate = !0),
      (this.matrix = new dt()),
      (this.generateMipmaps = !0),
      (this.premultiplyAlpha = !1),
      (this.flipY = !0),
      (this.unpackAlignment = 4),
      (this.colorSpace = d),
      (this.userData = {}),
      (this.version = 0),
      (this.onUpdate = null),
      (this.isRenderTargetTexture = !1),
      (this.pmremVersion = 0);
  }
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  updateMatrix() {
    this.matrix.setUvTransform(
      this.offset.x,
      this.offset.y,
      this.repeat.x,
      this.repeat.y,
      this.rotation,
      this.center.x,
      this.center.y
    );
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return (
      (this.name = e.name),
      (this.source = e.source),
      (this.mipmaps = e.mipmaps.slice(0)),
      (this.mapping = e.mapping),
      (this.channel = e.channel),
      (this.wrapS = e.wrapS),
      (this.wrapT = e.wrapT),
      (this.magFilter = e.magFilter),
      (this.minFilter = e.minFilter),
      (this.anisotropy = e.anisotropy),
      (this.format = e.format),
      (this.internalFormat = e.internalFormat),
      (this.type = e.type),
      this.offset.copy(e.offset),
      this.repeat.copy(e.repeat),
      this.center.copy(e.center),
      (this.rotation = e.rotation),
      (this.matrixAutoUpdate = e.matrixAutoUpdate),
      this.matrix.copy(e.matrix),
      (this.generateMipmaps = e.generateMipmaps),
      (this.premultiplyAlpha = e.premultiplyAlpha),
      (this.flipY = e.flipY),
      (this.unpackAlignment = e.unpackAlignment),
      (this.colorSpace = e.colorSpace),
      (this.userData = JSON.parse(JSON.stringify(e.userData))),
      (this.needsUpdate = !0),
      this
    );
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.textures[this.uuid] !== void 0) return e.textures[this.uuid];
    const n = {
      metadata: { version: 4.6, type: "Texture", generator: "Texture.toJSON" },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment,
    };
    return Object.keys(this.userData).length > 0 && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(e) {
    if (this.mapping !== Nu) return e;
    if ((e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1))
      switch (this.wrapS) {
        case wa:
          e.x = e.x - Math.floor(e.x);
          break;
        case fi:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case Ea:
          Math.abs(Math.floor(e.x) % 2) === 1 ? (e.x = Math.ceil(e.x) - e.x) : (e.x = e.x - Math.floor(e.x));
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case wa:
          e.y = e.y - Math.floor(e.y);
          break;
        case fi:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case Ea:
          Math.abs(Math.floor(e.y) % 2) === 1 ? (e.y = Math.ceil(e.y) - e.y) : (e.y = e.y - Math.floor(e.y));
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  set needsUpdate(e) {
    e === !0 && (this.version++, (this.source.needsUpdate = !0));
  }
  set needsPMREMUpdate(e) {
    e === !0 && this.pmremVersion++;
  }
}
Kt.DEFAULT_IMAGE = null;
Kt.DEFAULT_MAPPING = Nu;
Kt.DEFAULT_ANISOTROPY = 1;
class Ct {
  constructor(e = 0, t = 0, n = 0, i = 1) {
    (Ct.prototype.isVector4 = !0), (this.x = e), (this.y = t), (this.z = n), (this.w = i);
  }
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  set(e, t, n, i) {
    return (this.x = e), (this.y = t), (this.z = n), (this.w = i), this;
  }
  setScalar(e) {
    return (this.x = e), (this.y = e), (this.z = e), (this.w = e), this;
  }
  setX(e) {
    return (this.x = e), this;
  }
  setY(e) {
    return (this.y = e), this;
  }
  setZ(e) {
    return (this.z = e), this;
  }
  setW(e) {
    return (this.w = e), this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(e) {
    return (this.x = e.x), (this.y = e.y), (this.z = e.z), (this.w = e.w !== void 0 ? e.w : 1), this;
  }
  add(e) {
    return (this.x += e.x), (this.y += e.y), (this.z += e.z), (this.w += e.w), this;
  }
  addScalar(e) {
    return (this.x += e), (this.y += e), (this.z += e), (this.w += e), this;
  }
  addVectors(e, t) {
    return (this.x = e.x + t.x), (this.y = e.y + t.y), (this.z = e.z + t.z), (this.w = e.w + t.w), this;
  }
  addScaledVector(e, t) {
    return (this.x += e.x * t), (this.y += e.y * t), (this.z += e.z * t), (this.w += e.w * t), this;
  }
  sub(e) {
    return (this.x -= e.x), (this.y -= e.y), (this.z -= e.z), (this.w -= e.w), this;
  }
  subScalar(e) {
    return (this.x -= e), (this.y -= e), (this.z -= e), (this.w -= e), this;
  }
  subVectors(e, t) {
    return (this.x = e.x - t.x), (this.y = e.y - t.y), (this.z = e.z - t.z), (this.w = e.w - t.w), this;
  }
  multiply(e) {
    return (this.x *= e.x), (this.y *= e.y), (this.z *= e.z), (this.w *= e.w), this;
  }
  multiplyScalar(e) {
    return (this.x *= e), (this.y *= e), (this.z *= e), (this.w *= e), this;
  }
  applyMatrix4(e) {
    const t = this.x,
      n = this.y,
      i = this.z,
      s = this.w,
      l = e.elements;
    return (
      (this.x = l[0] * t + l[4] * n + l[8] * i + l[12] * s),
      (this.y = l[1] * t + l[5] * n + l[9] * i + l[13] * s),
      (this.z = l[2] * t + l[6] * n + l[10] * i + l[14] * s),
      (this.w = l[3] * t + l[7] * n + l[11] * i + l[15] * s),
      this
    );
  }
  divide(e) {
    return (this.x /= e.x), (this.y /= e.y), (this.z /= e.z), (this.w /= e.w), this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    return (
      t < 1e-4
        ? ((this.x = 1), (this.y = 0), (this.z = 0))
        : ((this.x = e.x / t), (this.y = e.y / t), (this.z = e.z / t)),
      this
    );
  }
  setAxisAngleFromRotationMatrix(e) {
    let t, n, i, s;
    const u = e.elements,
      h = u[0],
      d = u[4],
      p = u[8],
      m = u[1],
      v = u[5],
      x = u[9],
      M = u[2],
      y = u[6],
      _ = u[10];
    if (Math.abs(d - m) < 0.01 && Math.abs(p - M) < 0.01 && Math.abs(x - y) < 0.01) {
      if (Math.abs(d + m) < 0.1 && Math.abs(p + M) < 0.1 && Math.abs(x + y) < 0.1 && Math.abs(h + v + _ - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      t = Math.PI;
      const E = (h + 1) / 2,
        A = (v + 1) / 2,
        O = (_ + 1) / 2,
        P = (d + m) / 4,
        L = (p + M) / 4,
        F = (x + y) / 4;
      return (
        E > A && E > O
          ? E < 0.01
            ? ((n = 0), (i = 0.707106781), (s = 0.707106781))
            : ((n = Math.sqrt(E)), (i = P / n), (s = L / n))
          : A > O
            ? A < 0.01
              ? ((n = 0.707106781), (i = 0), (s = 0.707106781))
              : ((i = Math.sqrt(A)), (n = P / i), (s = F / i))
            : O < 0.01
              ? ((n = 0.707106781), (i = 0.707106781), (s = 0))
              : ((s = Math.sqrt(O)), (n = L / s), (i = F / s)),
        this.set(n, i, s, t),
        this
      );
    }
    let w = Math.sqrt((y - x) * (y - x) + (p - M) * (p - M) + (m - d) * (m - d));
    return (
      Math.abs(w) < 0.001 && (w = 1),
      (this.x = (y - x) / w),
      (this.y = (p - M) / w),
      (this.z = (m - d) / w),
      (this.w = Math.acos((h + v + _ - 1) / 2)),
      this
    );
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return (this.x = t[12]), (this.y = t[13]), (this.z = t[14]), (this.w = t[15]), this;
  }
  min(e) {
    return (
      (this.x = Math.min(this.x, e.x)),
      (this.y = Math.min(this.y, e.y)),
      (this.z = Math.min(this.z, e.z)),
      (this.w = Math.min(this.w, e.w)),
      this
    );
  }
  max(e) {
    return (
      (this.x = Math.max(this.x, e.x)),
      (this.y = Math.max(this.y, e.y)),
      (this.z = Math.max(this.z, e.z)),
      (this.w = Math.max(this.w, e.w)),
      this
    );
  }
  clamp(e, t) {
    return (
      (this.x = Math.max(e.x, Math.min(t.x, this.x))),
      (this.y = Math.max(e.y, Math.min(t.y, this.y))),
      (this.z = Math.max(e.z, Math.min(t.z, this.z))),
      (this.w = Math.max(e.w, Math.min(t.w, this.w))),
      this
    );
  }
  clampScalar(e, t) {
    return (
      (this.x = Math.max(e, Math.min(t, this.x))),
      (this.y = Math.max(e, Math.min(t, this.y))),
      (this.z = Math.max(e, Math.min(t, this.z))),
      (this.w = Math.max(e, Math.min(t, this.w))),
      this
    );
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return (
      (this.x = Math.floor(this.x)),
      (this.y = Math.floor(this.y)),
      (this.z = Math.floor(this.z)),
      (this.w = Math.floor(this.w)),
      this
    );
  }
  ceil() {
    return (
      (this.x = Math.ceil(this.x)),
      (this.y = Math.ceil(this.y)),
      (this.z = Math.ceil(this.z)),
      (this.w = Math.ceil(this.w)),
      this
    );
  }
  round() {
    return (
      (this.x = Math.round(this.x)),
      (this.y = Math.round(this.y)),
      (this.z = Math.round(this.z)),
      (this.w = Math.round(this.w)),
      this
    );
  }
  roundToZero() {
    return (
      (this.x = Math.trunc(this.x)),
      (this.y = Math.trunc(this.y)),
      (this.z = Math.trunc(this.z)),
      (this.w = Math.trunc(this.w)),
      this
    );
  }
  negate() {
    return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), (this.w = -this.w), this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return (
      (this.x += (e.x - this.x) * t),
      (this.y += (e.y - this.y) * t),
      (this.z += (e.z - this.z) * t),
      (this.w += (e.w - this.w) * t),
      this
    );
  }
  lerpVectors(e, t, n) {
    return (
      (this.x = e.x + (t.x - e.x) * n),
      (this.y = e.y + (t.y - e.y) * n),
      (this.z = e.z + (t.z - e.z) * n),
      (this.w = e.w + (t.w - e.w) * n),
      this
    );
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  fromArray(e, t = 0) {
    return (this.x = e[t]), (this.y = e[t + 1]), (this.z = e[t + 2]), (this.w = e[t + 3]), this;
  }
  toArray(e = [], t = 0) {
    return (e[t] = this.x), (e[t + 1] = this.y), (e[t + 2] = this.z), (e[t + 3] = this.w), e;
  }
  fromBufferAttribute(e, t) {
    return (this.x = e.getX(t)), (this.y = e.getY(t)), (this.z = e.getZ(t)), (this.w = e.getW(t)), this;
  }
  random() {
    return (this.x = Math.random()), (this.y = Math.random()), (this.z = Math.random()), (this.w = Math.random()), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class Gv extends Hi {
  constructor(e = 1, t = 1, n = {}) {
    super(),
      (this.isRenderTarget = !0),
      (this.width = e),
      (this.height = t),
      (this.depth = 1),
      (this.scissor = new Ct(0, 0, e, t)),
      (this.scissorTest = !1),
      (this.viewport = new Ct(0, 0, e, t));
    const i = { width: e, height: t, depth: 1 };
    n = Object.assign(
      {
        generateMipmaps: !1,
        internalFormat: null,
        minFilter: an,
        depthBuffer: !0,
        stencilBuffer: !1,
        resolveDepthBuffer: !0,
        resolveStencilBuffer: !0,
        depthTexture: null,
        samples: 0,
        count: 1,
      },
      n
    );
    const s = new Kt(
      i,
      n.mapping,
      n.wrapS,
      n.wrapT,
      n.magFilter,
      n.minFilter,
      n.format,
      n.type,
      n.anisotropy,
      n.colorSpace
    );
    (s.flipY = !1),
      (s.generateMipmaps = n.generateMipmaps),
      (s.internalFormat = n.internalFormat),
      (this.textures = []);
    const l = n.count;
    for (let c = 0; c < l; c++) (this.textures[c] = s.clone()), (this.textures[c].isRenderTargetTexture = !0);
    (this.depthBuffer = n.depthBuffer),
      (this.stencilBuffer = n.stencilBuffer),
      (this.resolveDepthBuffer = n.resolveDepthBuffer),
      (this.resolveStencilBuffer = n.resolveStencilBuffer),
      (this.depthTexture = n.depthTexture),
      (this.samples = n.samples);
  }
  get texture() {
    return this.textures[0];
  }
  set texture(e) {
    this.textures[0] = e;
  }
  setSize(e, t, n = 1) {
    if (this.width !== e || this.height !== t || this.depth !== n) {
      (this.width = e), (this.height = t), (this.depth = n);
      for (let i = 0, s = this.textures.length; i < s; i++)
        (this.textures[i].image.width = e), (this.textures[i].image.height = t), (this.textures[i].image.depth = n);
      this.dispose();
    }
    this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    (this.width = e.width),
      (this.height = e.height),
      (this.depth = e.depth),
      this.scissor.copy(e.scissor),
      (this.scissorTest = e.scissorTest),
      this.viewport.copy(e.viewport),
      (this.textures.length = 0);
    for (let n = 0, i = e.textures.length; n < i; n++)
      (this.textures[n] = e.textures[n].clone()), (this.textures[n].isRenderTargetTexture = !0);
    const t = Object.assign({}, e.texture.image);
    return (
      (this.texture.source = new hs(t)),
      (this.depthBuffer = e.depthBuffer),
      (this.stencilBuffer = e.stencilBuffer),
      (this.resolveDepthBuffer = e.resolveDepthBuffer),
      (this.resolveStencilBuffer = e.resolveStencilBuffer),
      e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()),
      (this.samples = e.samples),
      this
    );
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class wi extends Gv {
  constructor(e = 1, t = 1, n = {}) {
    super(e, t, n), (this.isWebGLRenderTarget = !0);
  }
}
class Gu extends Kt {
  constructor(e = null, t = 1, n = 1, i = 1) {
    super(null),
      (this.isDataArrayTexture = !0),
      (this.image = { data: e, width: t, height: n, depth: i }),
      (this.magFilter = _n),
      (this.minFilter = _n),
      (this.wrapR = fi),
      (this.generateMipmaps = !1),
      (this.flipY = !1),
      (this.unpackAlignment = 1),
      (this.layerUpdates = new Set());
  }
  addLayerUpdate(e) {
    this.layerUpdates.add(e);
  }
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class dS extends wi {
  constructor(e = 1, t = 1, n = 1, i = {}) {
    super(e, t, i),
      (this.isWebGLArrayRenderTarget = !0),
      (this.depth = n),
      (this.texture = new Gu(null, e, t, n)),
      (this.texture.isRenderTargetTexture = !0);
  }
}
class qd extends Kt {
  constructor(e = null, t = 1, n = 1, i = 1) {
    super(null),
      (this.isData3DTexture = !0),
      (this.image = { data: e, width: t, height: n, depth: i }),
      (this.magFilter = _n),
      (this.minFilter = _n),
      (this.wrapR = fi),
      (this.generateMipmaps = !1),
      (this.flipY = !1),
      (this.unpackAlignment = 1);
  }
}
class pS extends wi {
  constructor(e = 1, t = 1, n = 1, i = {}) {
    super(e, t, i),
      (this.isWebGL3DRenderTarget = !0),
      (this.depth = n),
      (this.texture = new qd(null, e, t, n)),
      (this.texture.isRenderTargetTexture = !0);
  }
}
class qn {
  constructor(e = 0, t = 0, n = 0, i = 1) {
    (this.isQuaternion = !0), (this._x = e), (this._y = t), (this._z = n), (this._w = i);
  }
  static slerpFlat(e, t, n, i, s, l, c) {
    let u = n[i + 0],
      h = n[i + 1],
      d = n[i + 2],
      p = n[i + 3];
    const m = s[l + 0],
      v = s[l + 1],
      x = s[l + 2],
      M = s[l + 3];
    if (c === 0) {
      (e[t + 0] = u), (e[t + 1] = h), (e[t + 2] = d), (e[t + 3] = p);
      return;
    }
    if (c === 1) {
      (e[t + 0] = m), (e[t + 1] = v), (e[t + 2] = x), (e[t + 3] = M);
      return;
    }
    if (p !== M || u !== m || h !== v || d !== x) {
      let y = 1 - c;
      const _ = u * m + h * v + d * x + p * M,
        w = _ >= 0 ? 1 : -1,
        E = 1 - _ * _;
      if (E > Number.EPSILON) {
        const O = Math.sqrt(E),
          P = Math.atan2(O, _ * w);
        (y = Math.sin(y * P) / O), (c = Math.sin(c * P) / O);
      }
      const A = c * w;
      if (((u = u * y + m * A), (h = h * y + v * A), (d = d * y + x * A), (p = p * y + M * A), y === 1 - c)) {
        const O = 1 / Math.sqrt(u * u + h * h + d * d + p * p);
        (u *= O), (h *= O), (d *= O), (p *= O);
      }
    }
    (e[t] = u), (e[t + 1] = h), (e[t + 2] = d), (e[t + 3] = p);
  }
  static multiplyQuaternionsFlat(e, t, n, i, s, l) {
    const c = n[i],
      u = n[i + 1],
      h = n[i + 2],
      d = n[i + 3],
      p = s[l],
      m = s[l + 1],
      v = s[l + 2],
      x = s[l + 3];
    return (
      (e[t] = c * x + d * p + u * v - h * m),
      (e[t + 1] = u * x + d * m + h * p - c * v),
      (e[t + 2] = h * x + d * v + c * m - u * p),
      (e[t + 3] = d * x - c * p - u * m - h * v),
      e
    );
  }
  get x() {
    return this._x;
  }
  set x(e) {
    (this._x = e), this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    (this._y = e), this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    (this._z = e), this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(e) {
    (this._w = e), this._onChangeCallback();
  }
  set(e, t, n, i) {
    return (this._x = e), (this._y = t), (this._z = n), (this._w = i), this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(e) {
    return (this._x = e.x), (this._y = e.y), (this._z = e.z), (this._w = e.w), this._onChangeCallback(), this;
  }
  setFromEuler(e, t = !0) {
    const n = e._x,
      i = e._y,
      s = e._z,
      l = e._order,
      c = Math.cos,
      u = Math.sin,
      h = c(n / 2),
      d = c(i / 2),
      p = c(s / 2),
      m = u(n / 2),
      v = u(i / 2),
      x = u(s / 2);
    switch (l) {
      case "XYZ":
        (this._x = m * d * p + h * v * x),
          (this._y = h * v * p - m * d * x),
          (this._z = h * d * x + m * v * p),
          (this._w = h * d * p - m * v * x);
        break;
      case "YXZ":
        (this._x = m * d * p + h * v * x),
          (this._y = h * v * p - m * d * x),
          (this._z = h * d * x - m * v * p),
          (this._w = h * d * p + m * v * x);
        break;
      case "ZXY":
        (this._x = m * d * p - h * v * x),
          (this._y = h * v * p + m * d * x),
          (this._z = h * d * x + m * v * p),
          (this._w = h * d * p - m * v * x);
        break;
      case "ZYX":
        (this._x = m * d * p - h * v * x),
          (this._y = h * v * p + m * d * x),
          (this._z = h * d * x - m * v * p),
          (this._w = h * d * p + m * v * x);
        break;
      case "YZX":
        (this._x = m * d * p + h * v * x),
          (this._y = h * v * p + m * d * x),
          (this._z = h * d * x - m * v * p),
          (this._w = h * d * p - m * v * x);
        break;
      case "XZY":
        (this._x = m * d * p - h * v * x),
          (this._y = h * v * p - m * d * x),
          (this._z = h * d * x + m * v * p),
          (this._w = h * d * p + m * v * x);
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + l);
    }
    return t === !0 && this._onChangeCallback(), this;
  }
  setFromAxisAngle(e, t) {
    const n = t / 2,
      i = Math.sin(n);
    return (
      (this._x = e.x * i),
      (this._y = e.y * i),
      (this._z = e.z * i),
      (this._w = Math.cos(n)),
      this._onChangeCallback(),
      this
    );
  }
  setFromRotationMatrix(e) {
    const t = e.elements,
      n = t[0],
      i = t[4],
      s = t[8],
      l = t[1],
      c = t[5],
      u = t[9],
      h = t[2],
      d = t[6],
      p = t[10],
      m = n + c + p;
    if (m > 0) {
      const v = 0.5 / Math.sqrt(m + 1);
      (this._w = 0.25 / v), (this._x = (d - u) * v), (this._y = (s - h) * v), (this._z = (l - i) * v);
    } else if (n > c && n > p) {
      const v = 2 * Math.sqrt(1 + n - c - p);
      (this._w = (d - u) / v), (this._x = 0.25 * v), (this._y = (i + l) / v), (this._z = (s + h) / v);
    } else if (c > p) {
      const v = 2 * Math.sqrt(1 + c - n - p);
      (this._w = (s - h) / v), (this._x = (i + l) / v), (this._y = 0.25 * v), (this._z = (u + d) / v);
    } else {
      const v = 2 * Math.sqrt(1 + p - n - c);
      (this._w = (l - i) / v), (this._x = (s + h) / v), (this._y = (u + d) / v), (this._z = 0.25 * v);
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(e, t) {
    let n = e.dot(t) + 1;
    return (
      n < Number.EPSILON
        ? ((n = 0),
          Math.abs(e.x) > Math.abs(e.z)
            ? ((this._x = -e.y), (this._y = e.x), (this._z = 0), (this._w = n))
            : ((this._x = 0), (this._y = -e.z), (this._z = e.y), (this._w = n)))
        : ((this._x = e.y * t.z - e.z * t.y),
          (this._y = e.z * t.x - e.x * t.z),
          (this._z = e.x * t.y - e.y * t.x),
          (this._w = n)),
      this.normalize()
    );
  }
  angleTo(e) {
    return 2 * Math.acos(Math.abs(Jt(this.dot(e), -1, 1)));
  }
  rotateTowards(e, t) {
    const n = this.angleTo(e);
    if (n === 0) return this;
    const i = Math.min(1, t / n);
    return this.slerp(e, i), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return (this._x *= -1), (this._y *= -1), (this._z *= -1), this._onChangeCallback(), this;
  }
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let e = this.length();
    return (
      e === 0
        ? ((this._x = 0), (this._y = 0), (this._z = 0), (this._w = 1))
        : ((e = 1 / e),
          (this._x = this._x * e),
          (this._y = this._y * e),
          (this._z = this._z * e),
          (this._w = this._w * e)),
      this._onChangeCallback(),
      this
    );
  }
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  multiplyQuaternions(e, t) {
    const n = e._x,
      i = e._y,
      s = e._z,
      l = e._w,
      c = t._x,
      u = t._y,
      h = t._z,
      d = t._w;
    return (
      (this._x = n * d + l * c + i * h - s * u),
      (this._y = i * d + l * u + s * c - n * h),
      (this._z = s * d + l * h + n * u - i * c),
      (this._w = l * d - n * c - i * u - s * h),
      this._onChangeCallback(),
      this
    );
  }
  slerp(e, t) {
    if (t === 0) return this;
    if (t === 1) return this.copy(e);
    const n = this._x,
      i = this._y,
      s = this._z,
      l = this._w;
    let c = l * e._w + n * e._x + i * e._y + s * e._z;
    if (
      (c < 0 ? ((this._w = -e._w), (this._x = -e._x), (this._y = -e._y), (this._z = -e._z), (c = -c)) : this.copy(e),
      c >= 1)
    )
      return (this._w = l), (this._x = n), (this._y = i), (this._z = s), this;
    const u = 1 - c * c;
    if (u <= Number.EPSILON) {
      const v = 1 - t;
      return (
        (this._w = v * l + t * this._w),
        (this._x = v * n + t * this._x),
        (this._y = v * i + t * this._y),
        (this._z = v * s + t * this._z),
        this.normalize(),
        this
      );
    }
    const h = Math.sqrt(u),
      d = Math.atan2(h, c),
      p = Math.sin((1 - t) * d) / h,
      m = Math.sin(t * d) / h;
    return (
      (this._w = l * p + this._w * m),
      (this._x = n * p + this._x * m),
      (this._y = i * p + this._y * m),
      (this._z = s * p + this._z * m),
      this._onChangeCallback(),
      this
    );
  }
  slerpQuaternions(e, t, n) {
    return this.copy(e).slerp(t, n);
  }
  random() {
    const e = 2 * Math.PI * Math.random(),
      t = 2 * Math.PI * Math.random(),
      n = Math.random(),
      i = Math.sqrt(1 - n),
      s = Math.sqrt(n);
    return this.set(i * Math.sin(e), i * Math.cos(e), s * Math.sin(t), s * Math.cos(t));
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  fromArray(e, t = 0) {
    return (
      (this._x = e[t]), (this._y = e[t + 1]), (this._z = e[t + 2]), (this._w = e[t + 3]), this._onChangeCallback(), this
    );
  }
  toArray(e = [], t = 0) {
    return (e[t] = this._x), (e[t + 1] = this._y), (e[t + 2] = this._z), (e[t + 3] = this._w), e;
  }
  fromBufferAttribute(e, t) {
    return (
      (this._x = e.getX(t)),
      (this._y = e.getY(t)),
      (this._z = e.getZ(t)),
      (this._w = e.getW(t)),
      this._onChangeCallback(),
      this
    );
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return (this._onChangeCallback = e), this;
  }
  _onChangeCallback() {}
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class N {
  constructor(e = 0, t = 0, n = 0) {
    (N.prototype.isVector3 = !0), (this.x = e), (this.y = t), (this.z = n);
  }
  set(e, t, n) {
    return n === void 0 && (n = this.z), (this.x = e), (this.y = t), (this.z = n), this;
  }
  setScalar(e) {
    return (this.x = e), (this.y = e), (this.z = e), this;
  }
  setX(e) {
    return (this.x = e), this;
  }
  setY(e) {
    return (this.y = e), this;
  }
  setZ(e) {
    return (this.z = e), this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(e) {
    return (this.x = e.x), (this.y = e.y), (this.z = e.z), this;
  }
  add(e) {
    return (this.x += e.x), (this.y += e.y), (this.z += e.z), this;
  }
  addScalar(e) {
    return (this.x += e), (this.y += e), (this.z += e), this;
  }
  addVectors(e, t) {
    return (this.x = e.x + t.x), (this.y = e.y + t.y), (this.z = e.z + t.z), this;
  }
  addScaledVector(e, t) {
    return (this.x += e.x * t), (this.y += e.y * t), (this.z += e.z * t), this;
  }
  sub(e) {
    return (this.x -= e.x), (this.y -= e.y), (this.z -= e.z), this;
  }
  subScalar(e) {
    return (this.x -= e), (this.y -= e), (this.z -= e), this;
  }
  subVectors(e, t) {
    return (this.x = e.x - t.x), (this.y = e.y - t.y), (this.z = e.z - t.z), this;
  }
  multiply(e) {
    return (this.x *= e.x), (this.y *= e.y), (this.z *= e.z), this;
  }
  multiplyScalar(e) {
    return (this.x *= e), (this.y *= e), (this.z *= e), this;
  }
  multiplyVectors(e, t) {
    return (this.x = e.x * t.x), (this.y = e.y * t.y), (this.z = e.z * t.z), this;
  }
  applyEuler(e) {
    return this.applyQuaternion(cg.setFromEuler(e));
  }
  applyAxisAngle(e, t) {
    return this.applyQuaternion(cg.setFromAxisAngle(e, t));
  }
  applyMatrix3(e) {
    const t = this.x,
      n = this.y,
      i = this.z,
      s = e.elements;
    return (
      (this.x = s[0] * t + s[3] * n + s[6] * i),
      (this.y = s[1] * t + s[4] * n + s[7] * i),
      (this.z = s[2] * t + s[5] * n + s[8] * i),
      this
    );
  }
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  applyMatrix4(e) {
    const t = this.x,
      n = this.y,
      i = this.z,
      s = e.elements,
      l = 1 / (s[3] * t + s[7] * n + s[11] * i + s[15]);
    return (
      (this.x = (s[0] * t + s[4] * n + s[8] * i + s[12]) * l),
      (this.y = (s[1] * t + s[5] * n + s[9] * i + s[13]) * l),
      (this.z = (s[2] * t + s[6] * n + s[10] * i + s[14]) * l),
      this
    );
  }
  applyQuaternion(e) {
    const t = this.x,
      n = this.y,
      i = this.z,
      s = e.x,
      l = e.y,
      c = e.z,
      u = e.w,
      h = 2 * (l * i - c * n),
      d = 2 * (c * t - s * i),
      p = 2 * (s * n - l * t);
    return (
      (this.x = t + u * h + l * p - c * d),
      (this.y = n + u * d + c * h - s * p),
      (this.z = i + u * p + s * d - l * h),
      this
    );
  }
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  transformDirection(e) {
    const t = this.x,
      n = this.y,
      i = this.z,
      s = e.elements;
    return (
      (this.x = s[0] * t + s[4] * n + s[8] * i),
      (this.y = s[1] * t + s[5] * n + s[9] * i),
      (this.z = s[2] * t + s[6] * n + s[10] * i),
      this.normalize()
    );
  }
  divide(e) {
    return (this.x /= e.x), (this.y /= e.y), (this.z /= e.z), this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  min(e) {
    return (this.x = Math.min(this.x, e.x)), (this.y = Math.min(this.y, e.y)), (this.z = Math.min(this.z, e.z)), this;
  }
  max(e) {
    return (this.x = Math.max(this.x, e.x)), (this.y = Math.max(this.y, e.y)), (this.z = Math.max(this.z, e.z)), this;
  }
  clamp(e, t) {
    return (
      (this.x = Math.max(e.x, Math.min(t.x, this.x))),
      (this.y = Math.max(e.y, Math.min(t.y, this.y))),
      (this.z = Math.max(e.z, Math.min(t.z, this.z))),
      this
    );
  }
  clampScalar(e, t) {
    return (
      (this.x = Math.max(e, Math.min(t, this.x))),
      (this.y = Math.max(e, Math.min(t, this.y))),
      (this.z = Math.max(e, Math.min(t, this.z))),
      this
    );
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), (this.z = Math.floor(this.z)), this;
  }
  ceil() {
    return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), (this.z = Math.ceil(this.z)), this;
  }
  round() {
    return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), (this.z = Math.round(this.z)), this;
  }
  roundToZero() {
    return (this.x = Math.trunc(this.x)), (this.y = Math.trunc(this.y)), (this.z = Math.trunc(this.z)), this;
  }
  negate() {
    return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return (this.x += (e.x - this.x) * t), (this.y += (e.y - this.y) * t), (this.z += (e.z - this.z) * t), this;
  }
  lerpVectors(e, t, n) {
    return (this.x = e.x + (t.x - e.x) * n), (this.y = e.y + (t.y - e.y) * n), (this.z = e.z + (t.z - e.z) * n), this;
  }
  cross(e) {
    return this.crossVectors(this, e);
  }
  crossVectors(e, t) {
    const n = e.x,
      i = e.y,
      s = e.z,
      l = t.x,
      c = t.y,
      u = t.z;
    return (this.x = i * u - s * c), (this.y = s * l - n * u), (this.z = n * c - i * l), this;
  }
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0) return this.set(0, 0, 0);
    const n = e.dot(this) / t;
    return this.copy(e).multiplyScalar(n);
  }
  projectOnPlane(e) {
    return yf.copy(this).projectOnVector(e), this.sub(yf);
  }
  reflect(e) {
    return this.sub(yf.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0) return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(Jt(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x,
      n = this.y - e.y,
      i = this.z - e.z;
    return t * t + n * n + i * i;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  setFromSphericalCoords(e, t, n) {
    const i = Math.sin(t) * e;
    return (this.x = i * Math.sin(n)), (this.y = Math.cos(t) * e), (this.z = i * Math.cos(n)), this;
  }
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  setFromCylindricalCoords(e, t, n) {
    return (this.x = e * Math.sin(t)), (this.y = n), (this.z = e * Math.cos(t)), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return (this.x = t[12]), (this.y = t[13]), (this.z = t[14]), this;
  }
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length(),
      n = this.setFromMatrixColumn(e, 1).length(),
      i = this.setFromMatrixColumn(e, 2).length();
    return (this.x = t), (this.y = n), (this.z = i), this;
  }
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  setFromEuler(e) {
    return (this.x = e._x), (this.y = e._y), (this.z = e._z), this;
  }
  setFromColor(e) {
    return (this.x = e.r), (this.y = e.g), (this.z = e.b), this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  fromArray(e, t = 0) {
    return (this.x = e[t]), (this.y = e[t + 1]), (this.z = e[t + 2]), this;
  }
  toArray(e = [], t = 0) {
    return (e[t] = this.x), (e[t + 1] = this.y), (e[t + 2] = this.z), e;
  }
  fromBufferAttribute(e, t) {
    return (this.x = e.getX(t)), (this.y = e.getY(t)), (this.z = e.getZ(t)), this;
  }
  random() {
    return (this.x = Math.random()), (this.y = Math.random()), (this.z = Math.random()), this;
  }
  randomDirection() {
    const e = Math.random() * Math.PI * 2,
      t = Math.random() * 2 - 1,
      n = Math.sqrt(1 - t * t);
    return (this.x = n * Math.cos(e)), (this.y = t), (this.z = n * Math.sin(e)), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const yf = new N(),
  cg = new qn();
class Fn {
  constructor(e = new N(1 / 0, 1 / 0, 1 / 0), t = new N(-1 / 0, -1 / 0, -1 / 0)) {
    (this.isBox3 = !0), (this.min = e), (this.max = t);
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t += 3) this.expandByPoint(gi.fromArray(e, t));
    return this;
  }
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, n = e.count; t < n; t++) this.expandByPoint(gi.fromBufferAttribute(e, t));
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++) this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = gi.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  setFromObject(e, t = !1) {
    return this.makeEmpty(), this.expandByObject(e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return (this.min.x = this.min.y = this.min.z = 1 / 0), (this.max.x = this.max.y = this.max.z = -1 / 0), this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  expandByObject(e, t = !1) {
    e.updateWorldMatrix(!1, !1);
    const n = e.geometry;
    if (n !== void 0) {
      const s = n.getAttribute("position");
      if (t === !0 && s !== void 0 && e.isInstancedMesh !== !0)
        for (let l = 0, c = s.count; l < c; l++)
          e.isMesh === !0 ? e.getVertexPosition(l, gi) : gi.fromBufferAttribute(s, l),
            gi.applyMatrix4(e.matrixWorld),
            this.expandByPoint(gi);
      else
        e.boundingBox !== void 0
          ? (e.boundingBox === null && e.computeBoundingBox(), jl.copy(e.boundingBox))
          : (n.boundingBox === null && n.computeBoundingBox(), jl.copy(n.boundingBox)),
          jl.applyMatrix4(e.matrixWorld),
          this.union(jl);
    }
    const i = e.children;
    for (let s = 0, l = i.length; s < l; s++) this.expandByObject(i[s], t);
    return this;
  }
  containsPoint(e) {
    return (
      e.x >= this.min.x &&
      e.x <= this.max.x &&
      e.y >= this.min.y &&
      e.y <= this.max.y &&
      e.z >= this.min.z &&
      e.z <= this.max.z
    );
  }
  containsBox(e) {
    return (
      this.min.x <= e.min.x &&
      e.max.x <= this.max.x &&
      this.min.y <= e.min.y &&
      e.max.y <= this.max.y &&
      this.min.z <= e.min.z &&
      e.max.z <= this.max.z
    );
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(e) {
    return (
      e.max.x >= this.min.x &&
      e.min.x <= this.max.x &&
      e.max.y >= this.min.y &&
      e.min.y <= this.max.y &&
      e.max.z >= this.min.z &&
      e.min.z <= this.max.z
    );
  }
  intersectsSphere(e) {
    return this.clampPoint(e.center, gi), gi.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  intersectsPlane(e) {
    let t, n;
    return (
      e.normal.x > 0
        ? ((t = e.normal.x * this.min.x), (n = e.normal.x * this.max.x))
        : ((t = e.normal.x * this.max.x), (n = e.normal.x * this.min.x)),
      e.normal.y > 0
        ? ((t += e.normal.y * this.min.y), (n += e.normal.y * this.max.y))
        : ((t += e.normal.y * this.max.y), (n += e.normal.y * this.min.y)),
      e.normal.z > 0
        ? ((t += e.normal.z * this.min.z), (n += e.normal.z * this.max.z))
        : ((t += e.normal.z * this.max.z), (n += e.normal.z * this.min.z)),
      t <= -e.constant && n >= -e.constant
    );
  }
  intersectsTriangle(e) {
    if (this.isEmpty()) return !1;
    this.getCenter(Zo),
      Ql.subVectors(this.max, Zo),
      Gs.subVectors(e.a, Zo),
      Ws.subVectors(e.b, Zo),
      Xs.subVectors(e.c, Zo),
      Mr.subVectors(Ws, Gs),
      wr.subVectors(Xs, Ws),
      qr.subVectors(Gs, Xs);
    let t = [
      0,
      -Mr.z,
      Mr.y,
      0,
      -wr.z,
      wr.y,
      0,
      -qr.z,
      qr.y,
      Mr.z,
      0,
      -Mr.x,
      wr.z,
      0,
      -wr.x,
      qr.z,
      0,
      -qr.x,
      -Mr.y,
      Mr.x,
      0,
      -wr.y,
      wr.x,
      0,
      -qr.y,
      qr.x,
      0,
    ];
    return !Sf(t, Gs, Ws, Xs, Ql) || ((t = [1, 0, 0, 0, 1, 0, 0, 0, 1]), !Sf(t, Gs, Ws, Xs, Ql))
      ? !1
      : ($l.crossVectors(Mr, wr), (t = [$l.x, $l.y, $l.z]), Sf(t, Gs, Ws, Xs, Ql));
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, gi).distanceTo(e);
  }
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), (e.radius = this.getSize(gi).length() * 0.5)), e;
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  applyMatrix4(e) {
    return this.isEmpty()
      ? this
      : (Ki[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e),
        Ki[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e),
        Ki[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e),
        Ki[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e),
        Ki[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e),
        Ki[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e),
        Ki[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e),
        Ki[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e),
        this.setFromPoints(Ki),
        this);
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const Ki = [new N(), new N(), new N(), new N(), new N(), new N(), new N(), new N()],
  gi = new N(),
  jl = new Fn(),
  Gs = new N(),
  Ws = new N(),
  Xs = new N(),
  Mr = new N(),
  wr = new N(),
  qr = new N(),
  Zo = new N(),
  Ql = new N(),
  $l = new N(),
  Zr = new N();
function Sf(r, e, t, n, i) {
  for (let s = 0, l = r.length - 3; s <= l; s += 3) {
    Zr.fromArray(r, s);
    const c = i.x * Math.abs(Zr.x) + i.y * Math.abs(Zr.y) + i.z * Math.abs(Zr.z),
      u = e.dot(Zr),
      h = t.dot(Zr),
      d = n.dot(Zr);
    if (Math.max(-Math.max(u, h, d), Math.min(u, h, d)) > c) return !1;
  }
  return !0;
}
const mS = new Fn(),
  Jo = new N(),
  Mf = new N();
class bn {
  constructor(e = new N(), t = -1) {
    (this.isSphere = !0), (this.center = e), (this.radius = t);
  }
  set(e, t) {
    return this.center.copy(e), (this.radius = t), this;
  }
  setFromPoints(e, t) {
    const n = this.center;
    t !== void 0 ? n.copy(t) : mS.setFromPoints(e).getCenter(n);
    let i = 0;
    for (let s = 0, l = e.length; s < l; s++) i = Math.max(i, n.distanceToSquared(e[s]));
    return (this.radius = Math.sqrt(i)), this;
  }
  copy(e) {
    return this.center.copy(e.center), (this.radius = e.radius), this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    return this.center.set(0, 0, 0), (this.radius = -1), this;
  }
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(e, t) {
    const n = this.center.distanceToSquared(e);
    return (
      t.copy(e),
      n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)),
      t
    );
  }
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), (this.radius = this.radius * e.getMaxScaleOnAxis()), this;
  }
  translate(e) {
    return this.center.add(e), this;
  }
  expandByPoint(e) {
    if (this.isEmpty()) return this.center.copy(e), (this.radius = 0), this;
    Jo.subVectors(e, this.center);
    const t = Jo.lengthSq();
    if (t > this.radius * this.radius) {
      const n = Math.sqrt(t),
        i = (n - this.radius) * 0.5;
      this.center.addScaledVector(Jo, i / n), (this.radius += i);
    }
    return this;
  }
  union(e) {
    return e.isEmpty()
      ? this
      : this.isEmpty()
        ? (this.copy(e), this)
        : (this.center.equals(e.center) === !0
            ? (this.radius = Math.max(this.radius, e.radius))
            : (Mf.subVectors(e.center, this.center).setLength(e.radius),
              this.expandByPoint(Jo.copy(e.center).add(Mf)),
              this.expandByPoint(Jo.copy(e.center).sub(Mf))),
          this);
  }
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const ji = new N(),
  wf = new N(),
  ec = new N(),
  Er = new N(),
  Ef = new N(),
  tc = new N(),
  Tf = new N();
class To {
  constructor(e = new N(), t = new N(0, 0, -1)) {
    (this.origin = e), (this.direction = t);
  }
  set(e, t) {
    return this.origin.copy(e), this.direction.copy(t), this;
  }
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  recast(e) {
    return this.origin.copy(this.at(e, ji)), this;
  }
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const n = t.dot(this.direction);
    return n < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, n);
  }
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  distanceSqToPoint(e) {
    const t = ji.subVectors(e, this.origin).dot(this.direction);
    return t < 0
      ? this.origin.distanceToSquared(e)
      : (ji.copy(this.origin).addScaledVector(this.direction, t), ji.distanceToSquared(e));
  }
  distanceSqToSegment(e, t, n, i) {
    wf.copy(e).add(t).multiplyScalar(0.5), ec.copy(t).sub(e).normalize(), Er.copy(this.origin).sub(wf);
    const s = e.distanceTo(t) * 0.5,
      l = -this.direction.dot(ec),
      c = Er.dot(this.direction),
      u = -Er.dot(ec),
      h = Er.lengthSq(),
      d = Math.abs(1 - l * l);
    let p, m, v, x;
    if (d > 0)
      if (((p = l * u - c), (m = l * c - u), (x = s * d), p >= 0))
        if (m >= -x)
          if (m <= x) {
            const M = 1 / d;
            (p *= M), (m *= M), (v = p * (p + l * m + 2 * c) + m * (l * p + m + 2 * u) + h);
          } else (m = s), (p = Math.max(0, -(l * m + c))), (v = -p * p + m * (m + 2 * u) + h);
        else (m = -s), (p = Math.max(0, -(l * m + c))), (v = -p * p + m * (m + 2 * u) + h);
      else
        m <= -x
          ? ((p = Math.max(0, -(-l * s + c))),
            (m = p > 0 ? -s : Math.min(Math.max(-s, -u), s)),
            (v = -p * p + m * (m + 2 * u) + h))
          : m <= x
            ? ((p = 0), (m = Math.min(Math.max(-s, -u), s)), (v = m * (m + 2 * u) + h))
            : ((p = Math.max(0, -(l * s + c))),
              (m = p > 0 ? s : Math.min(Math.max(-s, -u), s)),
              (v = -p * p + m * (m + 2 * u) + h));
    else (m = l > 0 ? -s : s), (p = Math.max(0, -(l * m + c))), (v = -p * p + m * (m + 2 * u) + h);
    return n && n.copy(this.origin).addScaledVector(this.direction, p), i && i.copy(wf).addScaledVector(ec, m), v;
  }
  intersectSphere(e, t) {
    ji.subVectors(e.center, this.origin);
    const n = ji.dot(this.direction),
      i = ji.dot(ji) - n * n,
      s = e.radius * e.radius;
    if (i > s) return null;
    const l = Math.sqrt(s - i),
      c = n - l,
      u = n + l;
    return u < 0 ? null : c < 0 ? this.at(u, t) : this.at(c, t);
  }
  intersectsSphere(e) {
    return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0) return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const n = -(this.origin.dot(e.normal) + e.constant) / t;
    return n >= 0 ? n : null;
  }
  intersectPlane(e, t) {
    const n = this.distanceToPlane(e);
    return n === null ? null : this.at(n, t);
  }
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    return t === 0 || e.normal.dot(this.direction) * t < 0;
  }
  intersectBox(e, t) {
    let n, i, s, l, c, u;
    const h = 1 / this.direction.x,
      d = 1 / this.direction.y,
      p = 1 / this.direction.z,
      m = this.origin;
    return (
      h >= 0
        ? ((n = (e.min.x - m.x) * h), (i = (e.max.x - m.x) * h))
        : ((n = (e.max.x - m.x) * h), (i = (e.min.x - m.x) * h)),
      d >= 0
        ? ((s = (e.min.y - m.y) * d), (l = (e.max.y - m.y) * d))
        : ((s = (e.max.y - m.y) * d), (l = (e.min.y - m.y) * d)),
      n > l ||
      s > i ||
      ((s > n || isNaN(n)) && (n = s),
      (l < i || isNaN(i)) && (i = l),
      p >= 0
        ? ((c = (e.min.z - m.z) * p), (u = (e.max.z - m.z) * p))
        : ((c = (e.max.z - m.z) * p), (u = (e.min.z - m.z) * p)),
      n > u || c > i) ||
      ((c > n || n !== n) && (n = c), (u < i || i !== i) && (i = u), i < 0)
        ? null
        : this.at(n >= 0 ? n : i, t)
    );
  }
  intersectsBox(e) {
    return this.intersectBox(e, ji) !== null;
  }
  intersectTriangle(e, t, n, i, s) {
    Ef.subVectors(t, e), tc.subVectors(n, e), Tf.crossVectors(Ef, tc);
    let l = this.direction.dot(Tf),
      c;
    if (l > 0) {
      if (i) return null;
      c = 1;
    } else if (l < 0) (c = -1), (l = -l);
    else return null;
    Er.subVectors(this.origin, e);
    const u = c * this.direction.dot(tc.crossVectors(Er, tc));
    if (u < 0) return null;
    const h = c * this.direction.dot(Ef.cross(Er));
    if (h < 0 || u + h > l) return null;
    const d = -c * Er.dot(Tf);
    return d < 0 ? null : this.at(d / l, s);
  }
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class st {
  constructor(e, t, n, i, s, l, c, u, h, d, p, m, v, x, M, y) {
    (st.prototype.isMatrix4 = !0),
      (this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]),
      e !== void 0 && this.set(e, t, n, i, s, l, c, u, h, d, p, m, v, x, M, y);
  }
  set(e, t, n, i, s, l, c, u, h, d, p, m, v, x, M, y) {
    const _ = this.elements;
    return (
      (_[0] = e),
      (_[4] = t),
      (_[8] = n),
      (_[12] = i),
      (_[1] = s),
      (_[5] = l),
      (_[9] = c),
      (_[13] = u),
      (_[2] = h),
      (_[6] = d),
      (_[10] = p),
      (_[14] = m),
      (_[3] = v),
      (_[7] = x),
      (_[11] = M),
      (_[15] = y),
      this
    );
  }
  identity() {
    return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
  }
  clone() {
    return new st().fromArray(this.elements);
  }
  copy(e) {
    const t = this.elements,
      n = e.elements;
    return (
      (t[0] = n[0]),
      (t[1] = n[1]),
      (t[2] = n[2]),
      (t[3] = n[3]),
      (t[4] = n[4]),
      (t[5] = n[5]),
      (t[6] = n[6]),
      (t[7] = n[7]),
      (t[8] = n[8]),
      (t[9] = n[9]),
      (t[10] = n[10]),
      (t[11] = n[11]),
      (t[12] = n[12]),
      (t[13] = n[13]),
      (t[14] = n[14]),
      (t[15] = n[15]),
      this
    );
  }
  copyPosition(e) {
    const t = this.elements,
      n = e.elements;
    return (t[12] = n[12]), (t[13] = n[13]), (t[14] = n[14]), this;
  }
  setFromMatrix3(e) {
    const t = e.elements;
    return this.set(t[0], t[3], t[6], 0, t[1], t[4], t[7], 0, t[2], t[5], t[8], 0, 0, 0, 0, 1), this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(e, t, n) {
    return this.set(e.x, t.x, n.x, 0, e.y, t.y, n.y, 0, e.z, t.z, n.z, 0, 0, 0, 0, 1), this;
  }
  extractRotation(e) {
    const t = this.elements,
      n = e.elements,
      i = 1 / Ys.setFromMatrixColumn(e, 0).length(),
      s = 1 / Ys.setFromMatrixColumn(e, 1).length(),
      l = 1 / Ys.setFromMatrixColumn(e, 2).length();
    return (
      (t[0] = n[0] * i),
      (t[1] = n[1] * i),
      (t[2] = n[2] * i),
      (t[3] = 0),
      (t[4] = n[4] * s),
      (t[5] = n[5] * s),
      (t[6] = n[6] * s),
      (t[7] = 0),
      (t[8] = n[8] * l),
      (t[9] = n[9] * l),
      (t[10] = n[10] * l),
      (t[11] = 0),
      (t[12] = 0),
      (t[13] = 0),
      (t[14] = 0),
      (t[15] = 1),
      this
    );
  }
  makeRotationFromEuler(e) {
    const t = this.elements,
      n = e.x,
      i = e.y,
      s = e.z,
      l = Math.cos(n),
      c = Math.sin(n),
      u = Math.cos(i),
      h = Math.sin(i),
      d = Math.cos(s),
      p = Math.sin(s);
    if (e.order === "XYZ") {
      const m = l * d,
        v = l * p,
        x = c * d,
        M = c * p;
      (t[0] = u * d),
        (t[4] = -u * p),
        (t[8] = h),
        (t[1] = v + x * h),
        (t[5] = m - M * h),
        (t[9] = -c * u),
        (t[2] = M - m * h),
        (t[6] = x + v * h),
        (t[10] = l * u);
    } else if (e.order === "YXZ") {
      const m = u * d,
        v = u * p,
        x = h * d,
        M = h * p;
      (t[0] = m + M * c),
        (t[4] = x * c - v),
        (t[8] = l * h),
        (t[1] = l * p),
        (t[5] = l * d),
        (t[9] = -c),
        (t[2] = v * c - x),
        (t[6] = M + m * c),
        (t[10] = l * u);
    } else if (e.order === "ZXY") {
      const m = u * d,
        v = u * p,
        x = h * d,
        M = h * p;
      (t[0] = m - M * c),
        (t[4] = -l * p),
        (t[8] = x + v * c),
        (t[1] = v + x * c),
        (t[5] = l * d),
        (t[9] = M - m * c),
        (t[2] = -l * h),
        (t[6] = c),
        (t[10] = l * u);
    } else if (e.order === "ZYX") {
      const m = l * d,
        v = l * p,
        x = c * d,
        M = c * p;
      (t[0] = u * d),
        (t[4] = x * h - v),
        (t[8] = m * h + M),
        (t[1] = u * p),
        (t[5] = M * h + m),
        (t[9] = v * h - x),
        (t[2] = -h),
        (t[6] = c * u),
        (t[10] = l * u);
    } else if (e.order === "YZX") {
      const m = l * u,
        v = l * h,
        x = c * u,
        M = c * h;
      (t[0] = u * d),
        (t[4] = M - m * p),
        (t[8] = x * p + v),
        (t[1] = p),
        (t[5] = l * d),
        (t[9] = -c * d),
        (t[2] = -h * d),
        (t[6] = v * p + x),
        (t[10] = m - M * p);
    } else if (e.order === "XZY") {
      const m = l * u,
        v = l * h,
        x = c * u,
        M = c * h;
      (t[0] = u * d),
        (t[4] = -p),
        (t[8] = h * d),
        (t[1] = m * p + M),
        (t[5] = l * d),
        (t[9] = v * p - x),
        (t[2] = x * p - v),
        (t[6] = c * d),
        (t[10] = M * p + m);
    }
    return (t[3] = 0), (t[7] = 0), (t[11] = 0), (t[12] = 0), (t[13] = 0), (t[14] = 0), (t[15] = 1), this;
  }
  makeRotationFromQuaternion(e) {
    return this.compose(gS, e, vS);
  }
  lookAt(e, t, n) {
    const i = this.elements;
    return (
      $n.subVectors(e, t),
      $n.lengthSq() === 0 && ($n.z = 1),
      $n.normalize(),
      Tr.crossVectors(n, $n),
      Tr.lengthSq() === 0 &&
        (Math.abs(n.z) === 1 ? ($n.x += 1e-4) : ($n.z += 1e-4), $n.normalize(), Tr.crossVectors(n, $n)),
      Tr.normalize(),
      nc.crossVectors($n, Tr),
      (i[0] = Tr.x),
      (i[4] = nc.x),
      (i[8] = $n.x),
      (i[1] = Tr.y),
      (i[5] = nc.y),
      (i[9] = $n.y),
      (i[2] = Tr.z),
      (i[6] = nc.z),
      (i[10] = $n.z),
      this
    );
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements,
      i = t.elements,
      s = this.elements,
      l = n[0],
      c = n[4],
      u = n[8],
      h = n[12],
      d = n[1],
      p = n[5],
      m = n[9],
      v = n[13],
      x = n[2],
      M = n[6],
      y = n[10],
      _ = n[14],
      w = n[3],
      E = n[7],
      A = n[11],
      O = n[15],
      P = i[0],
      L = i[4],
      F = i[8],
      C = i[12],
      b = i[1],
      D = i[5],
      Y = i[9],
      q = i[13],
      K = i[2],
      ae = i[6],
      j = i[10],
      me = i[14],
      k = i[3],
      ne = i[7],
      te = i[11],
      ce = i[15];
    return (
      (s[0] = l * P + c * b + u * K + h * k),
      (s[4] = l * L + c * D + u * ae + h * ne),
      (s[8] = l * F + c * Y + u * j + h * te),
      (s[12] = l * C + c * q + u * me + h * ce),
      (s[1] = d * P + p * b + m * K + v * k),
      (s[5] = d * L + p * D + m * ae + v * ne),
      (s[9] = d * F + p * Y + m * j + v * te),
      (s[13] = d * C + p * q + m * me + v * ce),
      (s[2] = x * P + M * b + y * K + _ * k),
      (s[6] = x * L + M * D + y * ae + _ * ne),
      (s[10] = x * F + M * Y + y * j + _ * te),
      (s[14] = x * C + M * q + y * me + _ * ce),
      (s[3] = w * P + E * b + A * K + O * k),
      (s[7] = w * L + E * D + A * ae + O * ne),
      (s[11] = w * F + E * Y + A * j + O * te),
      (s[15] = w * C + E * q + A * me + O * ce),
      this
    );
  }
  multiplyScalar(e) {
    const t = this.elements;
    return (
      (t[0] *= e),
      (t[4] *= e),
      (t[8] *= e),
      (t[12] *= e),
      (t[1] *= e),
      (t[5] *= e),
      (t[9] *= e),
      (t[13] *= e),
      (t[2] *= e),
      (t[6] *= e),
      (t[10] *= e),
      (t[14] *= e),
      (t[3] *= e),
      (t[7] *= e),
      (t[11] *= e),
      (t[15] *= e),
      this
    );
  }
  determinant() {
    const e = this.elements,
      t = e[0],
      n = e[4],
      i = e[8],
      s = e[12],
      l = e[1],
      c = e[5],
      u = e[9],
      h = e[13],
      d = e[2],
      p = e[6],
      m = e[10],
      v = e[14],
      x = e[3],
      M = e[7],
      y = e[11],
      _ = e[15];
    return (
      x * (+s * u * p - i * h * p - s * c * m + n * h * m + i * c * v - n * u * v) +
      M * (+t * u * v - t * h * m + s * l * m - i * l * v + i * h * d - s * u * d) +
      y * (+t * h * p - t * c * v - s * l * p + n * l * v + s * c * d - n * h * d) +
      _ * (-i * c * d - t * u * p + t * c * m + i * l * p - n * l * m + n * u * d)
    );
  }
  transpose() {
    const e = this.elements;
    let t;
    return (
      (t = e[1]),
      (e[1] = e[4]),
      (e[4] = t),
      (t = e[2]),
      (e[2] = e[8]),
      (e[8] = t),
      (t = e[6]),
      (e[6] = e[9]),
      (e[9] = t),
      (t = e[3]),
      (e[3] = e[12]),
      (e[12] = t),
      (t = e[7]),
      (e[7] = e[13]),
      (e[13] = t),
      (t = e[11]),
      (e[11] = e[14]),
      (e[14] = t),
      this
    );
  }
  setPosition(e, t, n) {
    const i = this.elements;
    return e.isVector3 ? ((i[12] = e.x), (i[13] = e.y), (i[14] = e.z)) : ((i[12] = e), (i[13] = t), (i[14] = n)), this;
  }
  invert() {
    const e = this.elements,
      t = e[0],
      n = e[1],
      i = e[2],
      s = e[3],
      l = e[4],
      c = e[5],
      u = e[6],
      h = e[7],
      d = e[8],
      p = e[9],
      m = e[10],
      v = e[11],
      x = e[12],
      M = e[13],
      y = e[14],
      _ = e[15],
      w = p * y * h - M * m * h + M * u * v - c * y * v - p * u * _ + c * m * _,
      E = x * m * h - d * y * h - x * u * v + l * y * v + d * u * _ - l * m * _,
      A = d * M * h - x * p * h + x * c * v - l * M * v - d * c * _ + l * p * _,
      O = x * p * u - d * M * u - x * c * m + l * M * m + d * c * y - l * p * y,
      P = t * w + n * E + i * A + s * O;
    if (P === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const L = 1 / P;
    return (
      (e[0] = w * L),
      (e[1] = (M * m * s - p * y * s - M * i * v + n * y * v + p * i * _ - n * m * _) * L),
      (e[2] = (c * y * s - M * u * s + M * i * h - n * y * h - c * i * _ + n * u * _) * L),
      (e[3] = (p * u * s - c * m * s - p * i * h + n * m * h + c * i * v - n * u * v) * L),
      (e[4] = E * L),
      (e[5] = (d * y * s - x * m * s + x * i * v - t * y * v - d * i * _ + t * m * _) * L),
      (e[6] = (x * u * s - l * y * s - x * i * h + t * y * h + l * i * _ - t * u * _) * L),
      (e[7] = (l * m * s - d * u * s + d * i * h - t * m * h - l * i * v + t * u * v) * L),
      (e[8] = A * L),
      (e[9] = (x * p * s - d * M * s - x * n * v + t * M * v + d * n * _ - t * p * _) * L),
      (e[10] = (l * M * s - x * c * s + x * n * h - t * M * h - l * n * _ + t * c * _) * L),
      (e[11] = (d * c * s - l * p * s - d * n * h + t * p * h + l * n * v - t * c * v) * L),
      (e[12] = O * L),
      (e[13] = (d * M * i - x * p * i + x * n * m - t * M * m - d * n * y + t * p * y) * L),
      (e[14] = (x * c * i - l * M * i - x * n * u + t * M * u + l * n * y - t * c * y) * L),
      (e[15] = (l * p * i - d * c * i + d * n * u - t * p * u - l * n * m + t * c * m) * L),
      this
    );
  }
  scale(e) {
    const t = this.elements,
      n = e.x,
      i = e.y,
      s = e.z;
    return (
      (t[0] *= n),
      (t[4] *= i),
      (t[8] *= s),
      (t[1] *= n),
      (t[5] *= i),
      (t[9] *= s),
      (t[2] *= n),
      (t[6] *= i),
      (t[10] *= s),
      (t[3] *= n),
      (t[7] *= i),
      (t[11] *= s),
      this
    );
  }
  getMaxScaleOnAxis() {
    const e = this.elements,
      t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2],
      n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6],
      i = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, n, i));
  }
  makeTranslation(e, t, n) {
    return (
      e.isVector3
        ? this.set(1, 0, 0, e.x, 0, 1, 0, e.y, 0, 0, 1, e.z, 0, 0, 0, 1)
        : this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, n, 0, 0, 0, 1),
      this
    );
  }
  makeRotationX(e) {
    const t = Math.cos(e),
      n = Math.sin(e);
    return this.set(1, 0, 0, 0, 0, t, -n, 0, 0, n, t, 0, 0, 0, 0, 1), this;
  }
  makeRotationY(e) {
    const t = Math.cos(e),
      n = Math.sin(e);
    return this.set(t, 0, n, 0, 0, 1, 0, 0, -n, 0, t, 0, 0, 0, 0, 1), this;
  }
  makeRotationZ(e) {
    const t = Math.cos(e),
      n = Math.sin(e);
    return this.set(t, -n, 0, 0, n, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
  }
  makeRotationAxis(e, t) {
    const n = Math.cos(t),
      i = Math.sin(t),
      s = 1 - n,
      l = e.x,
      c = e.y,
      u = e.z,
      h = s * l,
      d = s * c;
    return (
      this.set(
        h * l + n,
        h * c - i * u,
        h * u + i * c,
        0,
        h * c + i * u,
        d * c + n,
        d * u - i * l,
        0,
        h * u - i * c,
        d * u + i * l,
        s * u * u + n,
        0,
        0,
        0,
        0,
        1
      ),
      this
    );
  }
  makeScale(e, t, n) {
    return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
  }
  makeShear(e, t, n, i, s, l) {
    return this.set(1, n, s, 0, e, 1, l, 0, t, i, 1, 0, 0, 0, 0, 1), this;
  }
  compose(e, t, n) {
    const i = this.elements,
      s = t._x,
      l = t._y,
      c = t._z,
      u = t._w,
      h = s + s,
      d = l + l,
      p = c + c,
      m = s * h,
      v = s * d,
      x = s * p,
      M = l * d,
      y = l * p,
      _ = c * p,
      w = u * h,
      E = u * d,
      A = u * p,
      O = n.x,
      P = n.y,
      L = n.z;
    return (
      (i[0] = (1 - (M + _)) * O),
      (i[1] = (v + A) * O),
      (i[2] = (x - E) * O),
      (i[3] = 0),
      (i[4] = (v - A) * P),
      (i[5] = (1 - (m + _)) * P),
      (i[6] = (y + w) * P),
      (i[7] = 0),
      (i[8] = (x + E) * L),
      (i[9] = (y - w) * L),
      (i[10] = (1 - (m + M)) * L),
      (i[11] = 0),
      (i[12] = e.x),
      (i[13] = e.y),
      (i[14] = e.z),
      (i[15] = 1),
      this
    );
  }
  decompose(e, t, n) {
    const i = this.elements;
    let s = Ys.set(i[0], i[1], i[2]).length();
    const l = Ys.set(i[4], i[5], i[6]).length(),
      c = Ys.set(i[8], i[9], i[10]).length();
    this.determinant() < 0 && (s = -s), (e.x = i[12]), (e.y = i[13]), (e.z = i[14]), vi.copy(this);
    const h = 1 / s,
      d = 1 / l,
      p = 1 / c;
    return (
      (vi.elements[0] *= h),
      (vi.elements[1] *= h),
      (vi.elements[2] *= h),
      (vi.elements[4] *= d),
      (vi.elements[5] *= d),
      (vi.elements[6] *= d),
      (vi.elements[8] *= p),
      (vi.elements[9] *= p),
      (vi.elements[10] *= p),
      t.setFromRotationMatrix(vi),
      (n.x = s),
      (n.y = l),
      (n.z = c),
      this
    );
  }
  makePerspective(e, t, n, i, s, l, c = Bi) {
    const u = this.elements,
      h = (2 * s) / (t - e),
      d = (2 * s) / (n - i),
      p = (t + e) / (t - e),
      m = (n + i) / (n - i);
    let v, x;
    if (c === Bi) (v = -(l + s) / (l - s)), (x = (-2 * l * s) / (l - s));
    else if (c === Ca) (v = -l / (l - s)), (x = (-l * s) / (l - s));
    else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + c);
    return (
      (u[0] = h),
      (u[4] = 0),
      (u[8] = p),
      (u[12] = 0),
      (u[1] = 0),
      (u[5] = d),
      (u[9] = m),
      (u[13] = 0),
      (u[2] = 0),
      (u[6] = 0),
      (u[10] = v),
      (u[14] = x),
      (u[3] = 0),
      (u[7] = 0),
      (u[11] = -1),
      (u[15] = 0),
      this
    );
  }
  makeOrthographic(e, t, n, i, s, l, c = Bi) {
    const u = this.elements,
      h = 1 / (t - e),
      d = 1 / (n - i),
      p = 1 / (l - s),
      m = (t + e) * h,
      v = (n + i) * d;
    let x, M;
    if (c === Bi) (x = (l + s) * p), (M = -2 * p);
    else if (c === Ca) (x = s * p), (M = -1 * p);
    else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + c);
    return (
      (u[0] = 2 * h),
      (u[4] = 0),
      (u[8] = 0),
      (u[12] = -m),
      (u[1] = 0),
      (u[5] = 2 * d),
      (u[9] = 0),
      (u[13] = -v),
      (u[2] = 0),
      (u[6] = 0),
      (u[10] = M),
      (u[14] = -x),
      (u[3] = 0),
      (u[7] = 0),
      (u[11] = 0),
      (u[15] = 1),
      this
    );
  }
  equals(e) {
    const t = this.elements,
      n = e.elements;
    for (let i = 0; i < 16; i++) if (t[i] !== n[i]) return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 16; n++) this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return (
      (e[t] = n[0]),
      (e[t + 1] = n[1]),
      (e[t + 2] = n[2]),
      (e[t + 3] = n[3]),
      (e[t + 4] = n[4]),
      (e[t + 5] = n[5]),
      (e[t + 6] = n[6]),
      (e[t + 7] = n[7]),
      (e[t + 8] = n[8]),
      (e[t + 9] = n[9]),
      (e[t + 10] = n[10]),
      (e[t + 11] = n[11]),
      (e[t + 12] = n[12]),
      (e[t + 13] = n[13]),
      (e[t + 14] = n[14]),
      (e[t + 15] = n[15]),
      e
    );
  }
}
const Ys = new N(),
  vi = new st(),
  gS = new N(0, 0, 0),
  vS = new N(1, 1, 1),
  Tr = new N(),
  nc = new N(),
  $n = new N(),
  ug = new st(),
  hg = new qn();
class ni {
  constructor(e = 0, t = 0, n = 0, i = ni.DEFAULT_ORDER) {
    (this.isEuler = !0), (this._x = e), (this._y = t), (this._z = n), (this._order = i);
  }
  get x() {
    return this._x;
  }
  set x(e) {
    (this._x = e), this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    (this._y = e), this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    (this._z = e), this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(e) {
    (this._order = e), this._onChangeCallback();
  }
  set(e, t, n, i = this._order) {
    return (this._x = e), (this._y = t), (this._z = n), (this._order = i), this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(e) {
    return (
      (this._x = e._x), (this._y = e._y), (this._z = e._z), (this._order = e._order), this._onChangeCallback(), this
    );
  }
  setFromRotationMatrix(e, t = this._order, n = !0) {
    const i = e.elements,
      s = i[0],
      l = i[4],
      c = i[8],
      u = i[1],
      h = i[5],
      d = i[9],
      p = i[2],
      m = i[6],
      v = i[10];
    switch (t) {
      case "XYZ":
        (this._y = Math.asin(Jt(c, -1, 1))),
          Math.abs(c) < 0.9999999
            ? ((this._x = Math.atan2(-d, v)), (this._z = Math.atan2(-l, s)))
            : ((this._x = Math.atan2(m, h)), (this._z = 0));
        break;
      case "YXZ":
        (this._x = Math.asin(-Jt(d, -1, 1))),
          Math.abs(d) < 0.9999999
            ? ((this._y = Math.atan2(c, v)), (this._z = Math.atan2(u, h)))
            : ((this._y = Math.atan2(-p, s)), (this._z = 0));
        break;
      case "ZXY":
        (this._x = Math.asin(Jt(m, -1, 1))),
          Math.abs(m) < 0.9999999
            ? ((this._y = Math.atan2(-p, v)), (this._z = Math.atan2(-l, h)))
            : ((this._y = 0), (this._z = Math.atan2(u, s)));
        break;
      case "ZYX":
        (this._y = Math.asin(-Jt(p, -1, 1))),
          Math.abs(p) < 0.9999999
            ? ((this._x = Math.atan2(m, v)), (this._z = Math.atan2(u, s)))
            : ((this._x = 0), (this._z = Math.atan2(-l, h)));
        break;
      case "YZX":
        (this._z = Math.asin(Jt(u, -1, 1))),
          Math.abs(u) < 0.9999999
            ? ((this._x = Math.atan2(-d, h)), (this._y = Math.atan2(-p, s)))
            : ((this._x = 0), (this._y = Math.atan2(c, v)));
        break;
      case "XZY":
        (this._z = Math.asin(-Jt(l, -1, 1))),
          Math.abs(l) < 0.9999999
            ? ((this._x = Math.atan2(m, h)), (this._y = Math.atan2(c, s)))
            : ((this._x = Math.atan2(-d, v)), (this._y = 0));
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    return (this._order = t), n === !0 && this._onChangeCallback(), this;
  }
  setFromQuaternion(e, t, n) {
    return ug.makeRotationFromQuaternion(e), this.setFromRotationMatrix(ug, t, n);
  }
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  reorder(e) {
    return hg.setFromEuler(this), this.setFromQuaternion(hg, e);
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  fromArray(e) {
    return (
      (this._x = e[0]),
      (this._y = e[1]),
      (this._z = e[2]),
      e[3] !== void 0 && (this._order = e[3]),
      this._onChangeCallback(),
      this
    );
  }
  toArray(e = [], t = 0) {
    return (e[t] = this._x), (e[t + 1] = this._y), (e[t + 2] = this._z), (e[t + 3] = this._order), e;
  }
  _onChange(e) {
    return (this._onChangeCallback = e), this;
  }
  _onChangeCallback() {}
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
ni.DEFAULT_ORDER = "XYZ";
class gs {
  constructor() {
    this.mask = 1;
  }
  set(e) {
    this.mask = ((1 << e) | 0) >>> 0;
  }
  enable(e) {
    this.mask |= (1 << e) | 0;
  }
  enableAll() {
    this.mask = -1;
  }
  toggle(e) {
    this.mask ^= (1 << e) | 0;
  }
  disable(e) {
    this.mask &= ~((1 << e) | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  isEnabled(e) {
    return (this.mask & ((1 << e) | 0)) !== 0;
  }
}
let _S = 0;
const fg = new N(),
  qs = new qn(),
  Qi = new st(),
  ic = new N(),
  Ko = new N(),
  xS = new N(),
  yS = new qn(),
  dg = new N(1, 0, 0),
  pg = new N(0, 1, 0),
  mg = new N(0, 0, 1),
  gg = { type: "added" },
  SS = { type: "removed" },
  Zs = { type: "childadded", child: null },
  Af = { type: "childremoved", child: null };
class Rt extends Hi {
  constructor() {
    super(),
      (this.isObject3D = !0),
      Object.defineProperty(this, "id", { value: _S++ }),
      (this.uuid = ti()),
      (this.name = ""),
      (this.type = "Object3D"),
      (this.parent = null),
      (this.children = []),
      (this.up = Rt.DEFAULT_UP.clone());
    const e = new N(),
      t = new ni(),
      n = new qn(),
      i = new N(1, 1, 1);
    function s() {
      n.setFromEuler(t, !1);
    }
    function l() {
      t.setFromQuaternion(n, void 0, !1);
    }
    t._onChange(s),
      n._onChange(l),
      Object.defineProperties(this, {
        position: { configurable: !0, enumerable: !0, value: e },
        rotation: { configurable: !0, enumerable: !0, value: t },
        quaternion: { configurable: !0, enumerable: !0, value: n },
        scale: { configurable: !0, enumerable: !0, value: i },
        modelViewMatrix: { value: new st() },
        normalMatrix: { value: new dt() },
      }),
      (this.matrix = new st()),
      (this.matrixWorld = new st()),
      (this.matrixAutoUpdate = Rt.DEFAULT_MATRIX_AUTO_UPDATE),
      (this.matrixWorldAutoUpdate = Rt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE),
      (this.matrixWorldNeedsUpdate = !1),
      (this.layers = new gs()),
      (this.visible = !0),
      (this.castShadow = !1),
      (this.receiveShadow = !1),
      (this.frustumCulled = !0),
      (this.renderOrder = 0),
      (this.animations = []),
      (this.userData = {});
  }
  onBeforeShadow() {}
  onAfterShadow() {}
  onBeforeRender() {}
  onAfterRender() {}
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(),
      this.matrix.premultiply(e),
      this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  rotateOnAxis(e, t) {
    return qs.setFromAxisAngle(e, t), this.quaternion.multiply(qs), this;
  }
  rotateOnWorldAxis(e, t) {
    return qs.setFromAxisAngle(e, t), this.quaternion.premultiply(qs), this;
  }
  rotateX(e) {
    return this.rotateOnAxis(dg, e);
  }
  rotateY(e) {
    return this.rotateOnAxis(pg, e);
  }
  rotateZ(e) {
    return this.rotateOnAxis(mg, e);
  }
  translateOnAxis(e, t) {
    return fg.copy(e).applyQuaternion(this.quaternion), this.position.add(fg.multiplyScalar(t)), this;
  }
  translateX(e) {
    return this.translateOnAxis(dg, e);
  }
  translateY(e) {
    return this.translateOnAxis(pg, e);
  }
  translateZ(e) {
    return this.translateOnAxis(mg, e);
  }
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(Qi.copy(this.matrixWorld).invert());
  }
  lookAt(e, t, n) {
    e.isVector3 ? ic.copy(e) : ic.set(e, t, n);
    const i = this.parent;
    this.updateWorldMatrix(!0, !1),
      Ko.setFromMatrixPosition(this.matrixWorld),
      this.isCamera || this.isLight ? Qi.lookAt(Ko, ic, this.up) : Qi.lookAt(ic, Ko, this.up),
      this.quaternion.setFromRotationMatrix(Qi),
      i && (Qi.extractRotation(i.matrixWorld), qs.setFromRotationMatrix(Qi), this.quaternion.premultiply(qs.invert()));
  }
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++) this.add(arguments[t]);
      return this;
    }
    return e === this
      ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this)
      : (e && e.isObject3D
          ? (e.removeFromParent(),
            (e.parent = this),
            this.children.push(e),
            e.dispatchEvent(gg),
            (Zs.child = e),
            this.dispatchEvent(Zs),
            (Zs.child = null))
          : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e),
        this);
  }
  remove(e) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++) this.remove(arguments[n]);
      return this;
    }
    const t = this.children.indexOf(e);
    return (
      t !== -1 &&
        ((e.parent = null),
        this.children.splice(t, 1),
        e.dispatchEvent(SS),
        (Af.child = e),
        this.dispatchEvent(Af),
        (Af.child = null)),
      this
    );
  }
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(e) {
    return (
      this.updateWorldMatrix(!0, !1),
      Qi.copy(this.matrixWorld).invert(),
      e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), Qi.multiply(e.parent.matrixWorld)),
      e.applyMatrix4(Qi),
      e.removeFromParent(),
      (e.parent = this),
      this.children.push(e),
      e.updateWorldMatrix(!1, !0),
      e.dispatchEvent(gg),
      (Zs.child = e),
      this.dispatchEvent(Zs),
      (Zs.child = null),
      this
    );
  }
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  getObjectByProperty(e, t) {
    if (this[e] === t) return this;
    for (let n = 0, i = this.children.length; n < i; n++) {
      const l = this.children[n].getObjectByProperty(e, t);
      if (l !== void 0) return l;
    }
  }
  getObjectsByProperty(e, t, n = []) {
    this[e] === t && n.push(this);
    const i = this.children;
    for (let s = 0, l = i.length; s < l; s++) i[s].getObjectsByProperty(e, t, n);
    return n;
  }
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Ko, e, xS), e;
  }
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Ko, yS, e), e;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  raycast() {}
  traverse(e) {
    e(this);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++) t[n].traverse(e);
  }
  traverseVisible(e) {
    if (this.visible === !1) return;
    e(this);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++) t[n].traverseVisible(e);
  }
  traverseAncestors(e) {
    const t = this.parent;
    t !== null && (e(t), t.traverseAncestors(e));
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), (this.matrixWorldNeedsUpdate = !0);
  }
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(),
      (this.matrixWorldNeedsUpdate || e) &&
        (this.matrixWorldAutoUpdate === !0 &&
          (this.parent === null
            ? this.matrixWorld.copy(this.matrix)
            : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)),
        (this.matrixWorldNeedsUpdate = !1),
        (e = !0));
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++) t[n].updateMatrixWorld(e);
  }
  updateWorldMatrix(e, t) {
    const n = this.parent;
    if (
      (e === !0 && n !== null && n.updateWorldMatrix(!0, !1),
      this.matrixAutoUpdate && this.updateMatrix(),
      this.matrixWorldAutoUpdate === !0 &&
        (this.parent === null
          ? this.matrixWorld.copy(this.matrix)
          : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)),
      t === !0)
    ) {
      const i = this.children;
      for (let s = 0, l = i.length; s < l; s++) i[s].updateWorldMatrix(!1, !0);
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string",
      n = {};
    t &&
      ((e = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {},
        skeletons: {},
        animations: {},
        nodes: {},
      }),
      (n.metadata = { version: 4.6, type: "Object", generator: "Object3D.toJSON" }));
    const i = {};
    (i.uuid = this.uuid),
      (i.type = this.type),
      this.name !== "" && (i.name = this.name),
      this.castShadow === !0 && (i.castShadow = !0),
      this.receiveShadow === !0 && (i.receiveShadow = !0),
      this.visible === !1 && (i.visible = !1),
      this.frustumCulled === !1 && (i.frustumCulled = !1),
      this.renderOrder !== 0 && (i.renderOrder = this.renderOrder),
      Object.keys(this.userData).length > 0 && (i.userData = this.userData),
      (i.layers = this.layers.mask),
      (i.matrix = this.matrix.toArray()),
      (i.up = this.up.toArray()),
      this.matrixAutoUpdate === !1 && (i.matrixAutoUpdate = !1),
      this.isInstancedMesh &&
        ((i.type = "InstancedMesh"),
        (i.count = this.count),
        (i.instanceMatrix = this.instanceMatrix.toJSON()),
        this.instanceColor !== null && (i.instanceColor = this.instanceColor.toJSON())),
      this.isBatchedMesh &&
        ((i.type = "BatchedMesh"),
        (i.perObjectFrustumCulled = this.perObjectFrustumCulled),
        (i.sortObjects = this.sortObjects),
        (i.drawRanges = this._drawRanges),
        (i.reservedRanges = this._reservedRanges),
        (i.visibility = this._visibility),
        (i.active = this._active),
        (i.bounds = this._bounds.map((c) => ({
          boxInitialized: c.boxInitialized,
          boxMin: c.box.min.toArray(),
          boxMax: c.box.max.toArray(),
          sphereInitialized: c.sphereInitialized,
          sphereRadius: c.sphere.radius,
          sphereCenter: c.sphere.center.toArray(),
        }))),
        (i.maxInstanceCount = this._maxInstanceCount),
        (i.maxVertexCount = this._maxVertexCount),
        (i.maxIndexCount = this._maxIndexCount),
        (i.geometryInitialized = this._geometryInitialized),
        (i.geometryCount = this._geometryCount),
        (i.matricesTexture = this._matricesTexture.toJSON(e)),
        this._colorsTexture !== null && (i.colorsTexture = this._colorsTexture.toJSON(e)),
        this.boundingSphere !== null &&
          (i.boundingSphere = { center: i.boundingSphere.center.toArray(), radius: i.boundingSphere.radius }),
        this.boundingBox !== null &&
          (i.boundingBox = { min: i.boundingBox.min.toArray(), max: i.boundingBox.max.toArray() }));
    function s(c, u) {
      return c[u.uuid] === void 0 && (c[u.uuid] = u.toJSON(e)), u.uuid;
    }
    if (this.isScene)
      this.background &&
        (this.background.isColor
          ? (i.background = this.background.toJSON())
          : this.background.isTexture && (i.background = this.background.toJSON(e).uuid)),
        this.environment &&
          this.environment.isTexture &&
          this.environment.isRenderTargetTexture !== !0 &&
          (i.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      i.geometry = s(e.geometries, this.geometry);
      const c = this.geometry.parameters;
      if (c !== void 0 && c.shapes !== void 0) {
        const u = c.shapes;
        if (Array.isArray(u))
          for (let h = 0, d = u.length; h < d; h++) {
            const p = u[h];
            s(e.shapes, p);
          }
        else s(e.shapes, u);
      }
    }
    if (
      (this.isSkinnedMesh &&
        ((i.bindMode = this.bindMode),
        (i.bindMatrix = this.bindMatrix.toArray()),
        this.skeleton !== void 0 && (s(e.skeletons, this.skeleton), (i.skeleton = this.skeleton.uuid))),
      this.material !== void 0)
    )
      if (Array.isArray(this.material)) {
        const c = [];
        for (let u = 0, h = this.material.length; u < h; u++) c.push(s(e.materials, this.material[u]));
        i.material = c;
      } else i.material = s(e.materials, this.material);
    if (this.children.length > 0) {
      i.children = [];
      for (let c = 0; c < this.children.length; c++) i.children.push(this.children[c].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      i.animations = [];
      for (let c = 0; c < this.animations.length; c++) {
        const u = this.animations[c];
        i.animations.push(s(e.animations, u));
      }
    }
    if (t) {
      const c = l(e.geometries),
        u = l(e.materials),
        h = l(e.textures),
        d = l(e.images),
        p = l(e.shapes),
        m = l(e.skeletons),
        v = l(e.animations),
        x = l(e.nodes);
      c.length > 0 && (n.geometries = c),
        u.length > 0 && (n.materials = u),
        h.length > 0 && (n.textures = h),
        d.length > 0 && (n.images = d),
        p.length > 0 && (n.shapes = p),
        m.length > 0 && (n.skeletons = m),
        v.length > 0 && (n.animations = v),
        x.length > 0 && (n.nodes = x);
    }
    return (n.object = i), n;
    function l(c) {
      const u = [];
      for (const h in c) {
        const d = c[h];
        delete d.metadata, u.push(d);
      }
      return u;
    }
  }
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  copy(e, t = !0) {
    if (
      ((this.name = e.name),
      this.up.copy(e.up),
      this.position.copy(e.position),
      (this.rotation.order = e.rotation.order),
      this.quaternion.copy(e.quaternion),
      this.scale.copy(e.scale),
      this.matrix.copy(e.matrix),
      this.matrixWorld.copy(e.matrixWorld),
      (this.matrixAutoUpdate = e.matrixAutoUpdate),
      (this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate),
      (this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate),
      (this.layers.mask = e.layers.mask),
      (this.visible = e.visible),
      (this.castShadow = e.castShadow),
      (this.receiveShadow = e.receiveShadow),
      (this.frustumCulled = e.frustumCulled),
      (this.renderOrder = e.renderOrder),
      (this.animations = e.animations.slice()),
      (this.userData = JSON.parse(JSON.stringify(e.userData))),
      t === !0)
    )
      for (let n = 0; n < e.children.length; n++) {
        const i = e.children[n];
        this.add(i.clone());
      }
    return this;
  }
}
Rt.DEFAULT_UP = new N(0, 1, 0);
Rt.DEFAULT_MATRIX_AUTO_UPDATE = !0;
Rt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const _i = new N(),
  $i = new N(),
  bf = new N(),
  er = new N(),
  Js = new N(),
  Ks = new N(),
  vg = new N(),
  Cf = new N(),
  Rf = new N(),
  Pf = new N(),
  If = new Ct(),
  Lf = new Ct(),
  Df = new Ct();
class Xn {
  constructor(e = new N(), t = new N(), n = new N()) {
    (this.a = e), (this.b = t), (this.c = n);
  }
  static getNormal(e, t, n, i) {
    i.subVectors(n, t), _i.subVectors(e, t), i.cross(_i);
    const s = i.lengthSq();
    return s > 0 ? i.multiplyScalar(1 / Math.sqrt(s)) : i.set(0, 0, 0);
  }
  static getBarycoord(e, t, n, i, s) {
    _i.subVectors(i, t), $i.subVectors(n, t), bf.subVectors(e, t);
    const l = _i.dot(_i),
      c = _i.dot($i),
      u = _i.dot(bf),
      h = $i.dot($i),
      d = $i.dot(bf),
      p = l * h - c * c;
    if (p === 0) return s.set(0, 0, 0), null;
    const m = 1 / p,
      v = (h * u - c * d) * m,
      x = (l * d - c * u) * m;
    return s.set(1 - v - x, x, v);
  }
  static containsPoint(e, t, n, i) {
    return this.getBarycoord(e, t, n, i, er) === null ? !1 : er.x >= 0 && er.y >= 0 && er.x + er.y <= 1;
  }
  static getInterpolation(e, t, n, i, s, l, c, u) {
    return this.getBarycoord(e, t, n, i, er) === null
      ? ((u.x = 0), (u.y = 0), "z" in u && (u.z = 0), "w" in u && (u.w = 0), null)
      : (u.setScalar(0), u.addScaledVector(s, er.x), u.addScaledVector(l, er.y), u.addScaledVector(c, er.z), u);
  }
  static getInterpolatedAttribute(e, t, n, i, s, l) {
    return (
      If.setScalar(0),
      Lf.setScalar(0),
      Df.setScalar(0),
      If.fromBufferAttribute(e, t),
      Lf.fromBufferAttribute(e, n),
      Df.fromBufferAttribute(e, i),
      l.setScalar(0),
      l.addScaledVector(If, s.x),
      l.addScaledVector(Lf, s.y),
      l.addScaledVector(Df, s.z),
      l
    );
  }
  static isFrontFacing(e, t, n, i) {
    return _i.subVectors(n, t), $i.subVectors(e, t), _i.cross($i).dot(i) < 0;
  }
  set(e, t, n) {
    return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
  }
  setFromPointsAndIndices(e, t, n, i) {
    return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[i]), this;
  }
  setFromAttributeAndIndices(e, t, n, i) {
    return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, i), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  getArea() {
    return _i.subVectors(this.c, this.b), $i.subVectors(this.a, this.b), _i.cross($i).length() * 0.5;
  }
  getMidpoint(e) {
    return e
      .addVectors(this.a, this.b)
      .add(this.c)
      .multiplyScalar(1 / 3);
  }
  getNormal(e) {
    return Xn.getNormal(this.a, this.b, this.c, e);
  }
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(e, t) {
    return Xn.getBarycoord(e, this.a, this.b, this.c, t);
  }
  getInterpolation(e, t, n, i, s) {
    return Xn.getInterpolation(e, this.a, this.b, this.c, t, n, i, s);
  }
  containsPoint(e) {
    return Xn.containsPoint(e, this.a, this.b, this.c);
  }
  isFrontFacing(e) {
    return Xn.isFrontFacing(this.a, this.b, this.c, e);
  }
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  closestPointToPoint(e, t) {
    const n = this.a,
      i = this.b,
      s = this.c;
    let l, c;
    Js.subVectors(i, n), Ks.subVectors(s, n), Cf.subVectors(e, n);
    const u = Js.dot(Cf),
      h = Ks.dot(Cf);
    if (u <= 0 && h <= 0) return t.copy(n);
    Rf.subVectors(e, i);
    const d = Js.dot(Rf),
      p = Ks.dot(Rf);
    if (d >= 0 && p <= d) return t.copy(i);
    const m = u * p - d * h;
    if (m <= 0 && u >= 0 && d <= 0) return (l = u / (u - d)), t.copy(n).addScaledVector(Js, l);
    Pf.subVectors(e, s);
    const v = Js.dot(Pf),
      x = Ks.dot(Pf);
    if (x >= 0 && v <= x) return t.copy(s);
    const M = v * h - u * x;
    if (M <= 0 && h >= 0 && x <= 0) return (c = h / (h - x)), t.copy(n).addScaledVector(Ks, c);
    const y = d * x - v * p;
    if (y <= 0 && p - d >= 0 && v - x >= 0)
      return vg.subVectors(s, i), (c = (p - d) / (p - d + (v - x))), t.copy(i).addScaledVector(vg, c);
    const _ = 1 / (y + M + m);
    return (l = M * _), (c = m * _), t.copy(n).addScaledVector(Js, l).addScaledVector(Ks, c);
  }
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
const Wv = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074,
  },
  Ar = { h: 0, s: 0, l: 0 },
  rc = { h: 0, s: 0, l: 0 };
function Uf(r, e, t) {
  return (
    t < 0 && (t += 1),
    t > 1 && (t -= 1),
    t < 1 / 6 ? r + (e - r) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? r + (e - r) * 6 * (2 / 3 - t) : r
  );
}
class Ne {
  constructor(e, t, n) {
    return (this.isColor = !0), (this.r = 1), (this.g = 1), (this.b = 1), this.set(e, t, n);
  }
  set(e, t, n) {
    if (t === void 0 && n === void 0) {
      const i = e;
      i && i.isColor ? this.copy(i) : typeof i == "number" ? this.setHex(i) : typeof i == "string" && this.setStyle(i);
    } else this.setRGB(e, t, n);
    return this;
  }
  setScalar(e) {
    return (this.r = e), (this.g = e), (this.b = e), this;
  }
  setHex(e, t = Wn) {
    return (
      (e = Math.floor(e)),
      (this.r = ((e >> 16) & 255) / 255),
      (this.g = ((e >> 8) & 255) / 255),
      (this.b = (e & 255) / 255),
      At.toWorkingColorSpace(this, t),
      this
    );
  }
  setRGB(e, t, n, i = At.workingColorSpace) {
    return (this.r = e), (this.g = t), (this.b = n), At.toWorkingColorSpace(this, i), this;
  }
  setHSL(e, t, n, i = At.workingColorSpace) {
    if (((e = Yd(e, 1)), (t = Jt(t, 0, 1)), (n = Jt(n, 0, 1)), t === 0)) this.r = this.g = this.b = n;
    else {
      const s = n <= 0.5 ? n * (1 + t) : n + t - n * t,
        l = 2 * n - s;
      (this.r = Uf(l, s, e + 1 / 3)), (this.g = Uf(l, s, e)), (this.b = Uf(l, s, e - 1 / 3));
    }
    return At.toWorkingColorSpace(this, i), this;
  }
  setStyle(e, t = Wn) {
    function n(s) {
      s !== void 0 && parseFloat(s) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let i;
    if ((i = /^(\w+)\(([^\)]*)\)/.exec(e))) {
      let s;
      const l = i[1],
        c = i[2];
      switch (l) {
        case "rgb":
        case "rgba":
          if ((s = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c)))
            return (
              n(s[4]),
              this.setRGB(
                Math.min(255, parseInt(s[1], 10)) / 255,
                Math.min(255, parseInt(s[2], 10)) / 255,
                Math.min(255, parseInt(s[3], 10)) / 255,
                t
              )
            );
          if ((s = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c)))
            return (
              n(s[4]),
              this.setRGB(
                Math.min(100, parseInt(s[1], 10)) / 100,
                Math.min(100, parseInt(s[2], 10)) / 100,
                Math.min(100, parseInt(s[3], 10)) / 100,
                t
              )
            );
          break;
        case "hsl":
        case "hsla":
          if ((s = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c)))
            return n(s[4]), this.setHSL(parseFloat(s[1]) / 360, parseFloat(s[2]) / 100, parseFloat(s[3]) / 100, t);
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if ((i = /^\#([A-Fa-f\d]+)$/.exec(e))) {
      const s = i[1],
        l = s.length;
      if (l === 3)
        return this.setRGB(
          parseInt(s.charAt(0), 16) / 15,
          parseInt(s.charAt(1), 16) / 15,
          parseInt(s.charAt(2), 16) / 15,
          t
        );
      if (l === 6) return this.setHex(parseInt(s, 16), t);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0) return this.setColorName(e, t);
    return this;
  }
  setColorName(e, t = Wn) {
    const n = Wv[e.toLowerCase()];
    return n !== void 0 ? this.setHex(n, t) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(e) {
    return (this.r = e.r), (this.g = e.g), (this.b = e.b), this;
  }
  copySRGBToLinear(e) {
    return (this.r = or(e.r)), (this.g = or(e.g)), (this.b = or(e.b)), this;
  }
  copyLinearToSRGB(e) {
    return (this.r = vo(e.r)), (this.g = vo(e.g)), (this.b = vo(e.b)), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex(e = Wn) {
    return (
      At.fromWorkingColorSpace(En.copy(this), e),
      Math.round(Jt(En.r * 255, 0, 255)) * 65536 +
        Math.round(Jt(En.g * 255, 0, 255)) * 256 +
        Math.round(Jt(En.b * 255, 0, 255))
    );
  }
  getHexString(e = Wn) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  getHSL(e, t = At.workingColorSpace) {
    At.fromWorkingColorSpace(En.copy(this), t);
    const n = En.r,
      i = En.g,
      s = En.b,
      l = Math.max(n, i, s),
      c = Math.min(n, i, s);
    let u, h;
    const d = (c + l) / 2;
    if (c === l) (u = 0), (h = 0);
    else {
      const p = l - c;
      switch (((h = d <= 0.5 ? p / (l + c) : p / (2 - l - c)), l)) {
        case n:
          u = (i - s) / p + (i < s ? 6 : 0);
          break;
        case i:
          u = (s - n) / p + 2;
          break;
        case s:
          u = (n - i) / p + 4;
          break;
      }
      u /= 6;
    }
    return (e.h = u), (e.s = h), (e.l = d), e;
  }
  getRGB(e, t = At.workingColorSpace) {
    return At.fromWorkingColorSpace(En.copy(this), t), (e.r = En.r), (e.g = En.g), (e.b = En.b), e;
  }
  getStyle(e = Wn) {
    At.fromWorkingColorSpace(En.copy(this), e);
    const t = En.r,
      n = En.g,
      i = En.b;
    return e !== Wn
      ? `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`
      : `rgb(${Math.round(t * 255)},${Math.round(n * 255)},${Math.round(i * 255)})`;
  }
  offsetHSL(e, t, n) {
    return this.getHSL(Ar), this.setHSL(Ar.h + e, Ar.s + t, Ar.l + n);
  }
  add(e) {
    return (this.r += e.r), (this.g += e.g), (this.b += e.b), this;
  }
  addColors(e, t) {
    return (this.r = e.r + t.r), (this.g = e.g + t.g), (this.b = e.b + t.b), this;
  }
  addScalar(e) {
    return (this.r += e), (this.g += e), (this.b += e), this;
  }
  sub(e) {
    return (
      (this.r = Math.max(0, this.r - e.r)),
      (this.g = Math.max(0, this.g - e.g)),
      (this.b = Math.max(0, this.b - e.b)),
      this
    );
  }
  multiply(e) {
    return (this.r *= e.r), (this.g *= e.g), (this.b *= e.b), this;
  }
  multiplyScalar(e) {
    return (this.r *= e), (this.g *= e), (this.b *= e), this;
  }
  lerp(e, t) {
    return (this.r += (e.r - this.r) * t), (this.g += (e.g - this.g) * t), (this.b += (e.b - this.b) * t), this;
  }
  lerpColors(e, t, n) {
    return (this.r = e.r + (t.r - e.r) * n), (this.g = e.g + (t.g - e.g) * n), (this.b = e.b + (t.b - e.b) * n), this;
  }
  lerpHSL(e, t) {
    this.getHSL(Ar), e.getHSL(rc);
    const n = _a(Ar.h, rc.h, t),
      i = _a(Ar.s, rc.s, t),
      s = _a(Ar.l, rc.l, t);
    return this.setHSL(n, i, s), this;
  }
  setFromVector3(e) {
    return (this.r = e.x), (this.g = e.y), (this.b = e.z), this;
  }
  applyMatrix3(e) {
    const t = this.r,
      n = this.g,
      i = this.b,
      s = e.elements;
    return (
      (this.r = s[0] * t + s[3] * n + s[6] * i),
      (this.g = s[1] * t + s[4] * n + s[7] * i),
      (this.b = s[2] * t + s[5] * n + s[8] * i),
      this
    );
  }
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  fromArray(e, t = 0) {
    return (this.r = e[t]), (this.g = e[t + 1]), (this.b = e[t + 2]), this;
  }
  toArray(e = [], t = 0) {
    return (e[t] = this.r), (e[t + 1] = this.g), (e[t + 2] = this.b), e;
  }
  fromBufferAttribute(e, t) {
    return (this.r = e.getX(t)), (this.g = e.getY(t)), (this.b = e.getZ(t)), this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const En = new Ne();
Ne.NAMES = Wv;
let MS = 0;
class Cn extends Hi {
  static get type() {
    return "Material";
  }
  get type() {
    return this.constructor.type;
  }
  set type(e) {}
  constructor() {
    super(),
      (this.isMaterial = !0),
      Object.defineProperty(this, "id", { value: MS++ }),
      (this.uuid = ti()),
      (this.name = ""),
      (this.blending = ds),
      (this.side = ar),
      (this.vertexColors = !1),
      (this.opacity = 1),
      (this.transparent = !1),
      (this.alphaHash = !1),
      (this.blendSrc = qc),
      (this.blendDst = Zc),
      (this.blendEquation = Pr),
      (this.blendSrcAlpha = null),
      (this.blendDstAlpha = null),
      (this.blendEquationAlpha = null),
      (this.blendColor = new Ne(0, 0, 0)),
      (this.blendAlpha = 0),
      (this.depthFunc = _s),
      (this.depthTest = !0),
      (this.depthWrite = !0),
      (this.stencilWriteMask = 255),
      (this.stencilFunc = xd),
      (this.stencilRef = 0),
      (this.stencilFuncMask = 255),
      (this.stencilFail = os),
      (this.stencilZFail = os),
      (this.stencilZPass = os),
      (this.stencilWrite = !1),
      (this.clippingPlanes = null),
      (this.clipIntersection = !1),
      (this.clipShadows = !1),
      (this.shadowSide = null),
      (this.colorWrite = !0),
      (this.precision = null),
      (this.polygonOffset = !1),
      (this.polygonOffsetFactor = 0),
      (this.polygonOffsetUnits = 0),
      (this.dithering = !1),
      (this.alphaToCoverage = !1),
      (this.premultipliedAlpha = !1),
      (this.forceSinglePass = !1),
      (this.visible = !0),
      (this.toneMapped = !0),
      (this.userData = {}),
      (this.version = 0),
      (this._alphaTest = 0);
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, (this._alphaTest = e);
  }
  onBeforeRender() {}
  onBeforeCompile() {}
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(e) {
    if (e !== void 0)
      for (const t in e) {
        const n = e[t];
        if (n === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const i = this[t];
        if (i === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : (this[t] = n);
      }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    t && (e = { textures: {}, images: {} });
    const n = { metadata: { version: 4.6, type: "Material", generator: "Material.toJSON" } };
    (n.uuid = this.uuid),
      (n.type = this.type),
      this.name !== "" && (n.name = this.name),
      this.color && this.color.isColor && (n.color = this.color.getHex()),
      this.roughness !== void 0 && (n.roughness = this.roughness),
      this.metalness !== void 0 && (n.metalness = this.metalness),
      this.sheen !== void 0 && (n.sheen = this.sheen),
      this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()),
      this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness),
      this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()),
      this.emissiveIntensity !== void 0 &&
        this.emissiveIntensity !== 1 &&
        (n.emissiveIntensity = this.emissiveIntensity),
      this.specular && this.specular.isColor && (n.specular = this.specular.getHex()),
      this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity),
      this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()),
      this.shininess !== void 0 && (n.shininess = this.shininess),
      this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat),
      this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness),
      this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid),
      this.clearcoatRoughnessMap &&
        this.clearcoatRoughnessMap.isTexture &&
        (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid),
      this.clearcoatNormalMap &&
        this.clearcoatNormalMap.isTexture &&
        ((n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid),
        (n.clearcoatNormalScale = this.clearcoatNormalScale.toArray())),
      this.dispersion !== void 0 && (n.dispersion = this.dispersion),
      this.iridescence !== void 0 && (n.iridescence = this.iridescence),
      this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR),
      this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange),
      this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid),
      this.iridescenceThicknessMap &&
        this.iridescenceThicknessMap.isTexture &&
        (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid),
      this.anisotropy !== void 0 && (n.anisotropy = this.anisotropy),
      this.anisotropyRotation !== void 0 && (n.anisotropyRotation = this.anisotropyRotation),
      this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(e).uuid),
      this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid),
      this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid),
      this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid),
      this.lightMap &&
        this.lightMap.isTexture &&
        ((n.lightMap = this.lightMap.toJSON(e).uuid), (n.lightMapIntensity = this.lightMapIntensity)),
      this.aoMap &&
        this.aoMap.isTexture &&
        ((n.aoMap = this.aoMap.toJSON(e).uuid), (n.aoMapIntensity = this.aoMapIntensity)),
      this.bumpMap &&
        this.bumpMap.isTexture &&
        ((n.bumpMap = this.bumpMap.toJSON(e).uuid), (n.bumpScale = this.bumpScale)),
      this.normalMap &&
        this.normalMap.isTexture &&
        ((n.normalMap = this.normalMap.toJSON(e).uuid),
        (n.normalMapType = this.normalMapType),
        (n.normalScale = this.normalScale.toArray())),
      this.displacementMap &&
        this.displacementMap.isTexture &&
        ((n.displacementMap = this.displacementMap.toJSON(e).uuid),
        (n.displacementScale = this.displacementScale),
        (n.displacementBias = this.displacementBias)),
      this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid),
      this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid),
      this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid),
      this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid),
      this.specularIntensityMap &&
        this.specularIntensityMap.isTexture &&
        (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid),
      this.specularColorMap &&
        this.specularColorMap.isTexture &&
        (n.specularColorMap = this.specularColorMap.toJSON(e).uuid),
      this.envMap &&
        this.envMap.isTexture &&
        ((n.envMap = this.envMap.toJSON(e).uuid), this.combine !== void 0 && (n.combine = this.combine)),
      this.envMapRotation !== void 0 && (n.envMapRotation = this.envMapRotation.toArray()),
      this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity),
      this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity),
      this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio),
      this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid),
      this.transmission !== void 0 && (n.transmission = this.transmission),
      this.transmissionMap &&
        this.transmissionMap.isTexture &&
        (n.transmissionMap = this.transmissionMap.toJSON(e).uuid),
      this.thickness !== void 0 && (n.thickness = this.thickness),
      this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid),
      this.attenuationDistance !== void 0 &&
        this.attenuationDistance !== 1 / 0 &&
        (n.attenuationDistance = this.attenuationDistance),
      this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()),
      this.size !== void 0 && (n.size = this.size),
      this.shadowSide !== null && (n.shadowSide = this.shadowSide),
      this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation),
      this.blending !== ds && (n.blending = this.blending),
      this.side !== ar && (n.side = this.side),
      this.vertexColors === !0 && (n.vertexColors = !0),
      this.opacity < 1 && (n.opacity = this.opacity),
      this.transparent === !0 && (n.transparent = !0),
      this.blendSrc !== qc && (n.blendSrc = this.blendSrc),
      this.blendDst !== Zc && (n.blendDst = this.blendDst),
      this.blendEquation !== Pr && (n.blendEquation = this.blendEquation),
      this.blendSrcAlpha !== null && (n.blendSrcAlpha = this.blendSrcAlpha),
      this.blendDstAlpha !== null && (n.blendDstAlpha = this.blendDstAlpha),
      this.blendEquationAlpha !== null && (n.blendEquationAlpha = this.blendEquationAlpha),
      this.blendColor && this.blendColor.isColor && (n.blendColor = this.blendColor.getHex()),
      this.blendAlpha !== 0 && (n.blendAlpha = this.blendAlpha),
      this.depthFunc !== _s && (n.depthFunc = this.depthFunc),
      this.depthTest === !1 && (n.depthTest = this.depthTest),
      this.depthWrite === !1 && (n.depthWrite = this.depthWrite),
      this.colorWrite === !1 && (n.colorWrite = this.colorWrite),
      this.stencilWriteMask !== 255 && (n.stencilWriteMask = this.stencilWriteMask),
      this.stencilFunc !== xd && (n.stencilFunc = this.stencilFunc),
      this.stencilRef !== 0 && (n.stencilRef = this.stencilRef),
      this.stencilFuncMask !== 255 && (n.stencilFuncMask = this.stencilFuncMask),
      this.stencilFail !== os && (n.stencilFail = this.stencilFail),
      this.stencilZFail !== os && (n.stencilZFail = this.stencilZFail),
      this.stencilZPass !== os && (n.stencilZPass = this.stencilZPass),
      this.stencilWrite === !0 && (n.stencilWrite = this.stencilWrite),
      this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation),
      this.polygonOffset === !0 && (n.polygonOffset = !0),
      this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor),
      this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits),
      this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth),
      this.dashSize !== void 0 && (n.dashSize = this.dashSize),
      this.gapSize !== void 0 && (n.gapSize = this.gapSize),
      this.scale !== void 0 && (n.scale = this.scale),
      this.dithering === !0 && (n.dithering = !0),
      this.alphaTest > 0 && (n.alphaTest = this.alphaTest),
      this.alphaHash === !0 && (n.alphaHash = !0),
      this.alphaToCoverage === !0 && (n.alphaToCoverage = !0),
      this.premultipliedAlpha === !0 && (n.premultipliedAlpha = !0),
      this.forceSinglePass === !0 && (n.forceSinglePass = !0),
      this.wireframe === !0 && (n.wireframe = !0),
      this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth),
      this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap),
      this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin),
      this.flatShading === !0 && (n.flatShading = !0),
      this.visible === !1 && (n.visible = !1),
      this.toneMapped === !1 && (n.toneMapped = !1),
      this.fog === !1 && (n.fog = !1),
      Object.keys(this.userData).length > 0 && (n.userData = this.userData);
    function i(s) {
      const l = [];
      for (const c in s) {
        const u = s[c];
        delete u.metadata, l.push(u);
      }
      return l;
    }
    if (t) {
      const s = i(e.textures),
        l = i(e.images);
      s.length > 0 && (n.textures = s), l.length > 0 && (n.images = l);
    }
    return n;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    (this.name = e.name),
      (this.blending = e.blending),
      (this.side = e.side),
      (this.vertexColors = e.vertexColors),
      (this.opacity = e.opacity),
      (this.transparent = e.transparent),
      (this.blendSrc = e.blendSrc),
      (this.blendDst = e.blendDst),
      (this.blendEquation = e.blendEquation),
      (this.blendSrcAlpha = e.blendSrcAlpha),
      (this.blendDstAlpha = e.blendDstAlpha),
      (this.blendEquationAlpha = e.blendEquationAlpha),
      this.blendColor.copy(e.blendColor),
      (this.blendAlpha = e.blendAlpha),
      (this.depthFunc = e.depthFunc),
      (this.depthTest = e.depthTest),
      (this.depthWrite = e.depthWrite),
      (this.stencilWriteMask = e.stencilWriteMask),
      (this.stencilFunc = e.stencilFunc),
      (this.stencilRef = e.stencilRef),
      (this.stencilFuncMask = e.stencilFuncMask),
      (this.stencilFail = e.stencilFail),
      (this.stencilZFail = e.stencilZFail),
      (this.stencilZPass = e.stencilZPass),
      (this.stencilWrite = e.stencilWrite);
    const t = e.clippingPlanes;
    let n = null;
    if (t !== null) {
      const i = t.length;
      n = new Array(i);
      for (let s = 0; s !== i; ++s) n[s] = t[s].clone();
    }
    return (
      (this.clippingPlanes = n),
      (this.clipIntersection = e.clipIntersection),
      (this.clipShadows = e.clipShadows),
      (this.shadowSide = e.shadowSide),
      (this.colorWrite = e.colorWrite),
      (this.precision = e.precision),
      (this.polygonOffset = e.polygonOffset),
      (this.polygonOffsetFactor = e.polygonOffsetFactor),
      (this.polygonOffsetUnits = e.polygonOffsetUnits),
      (this.dithering = e.dithering),
      (this.alphaTest = e.alphaTest),
      (this.alphaHash = e.alphaHash),
      (this.alphaToCoverage = e.alphaToCoverage),
      (this.premultipliedAlpha = e.premultipliedAlpha),
      (this.forceSinglePass = e.forceSinglePass),
      (this.visible = e.visible),
      (this.toneMapped = e.toneMapped),
      (this.userData = JSON.parse(JSON.stringify(e.userData))),
      this
    );
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  onBuild() {
    console.warn("Material: onBuild() has been removed.");
  }
}
class Ur extends Cn {
  static get type() {
    return "MeshBasicMaterial";
  }
  constructor(e) {
    super(),
      (this.isMeshBasicMaterial = !0),
      (this.color = new Ne(16777215)),
      (this.map = null),
      (this.lightMap = null),
      (this.lightMapIntensity = 1),
      (this.aoMap = null),
      (this.aoMapIntensity = 1),
      (this.specularMap = null),
      (this.alphaMap = null),
      (this.envMap = null),
      (this.envMapRotation = new ni()),
      (this.combine = Ba),
      (this.reflectivity = 1),
      (this.refractionRatio = 0.98),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.wireframeLinecap = "round"),
      (this.wireframeLinejoin = "round"),
      (this.fog = !0),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      this.color.copy(e.color),
      (this.map = e.map),
      (this.lightMap = e.lightMap),
      (this.lightMapIntensity = e.lightMapIntensity),
      (this.aoMap = e.aoMap),
      (this.aoMapIntensity = e.aoMapIntensity),
      (this.specularMap = e.specularMap),
      (this.alphaMap = e.alphaMap),
      (this.envMap = e.envMap),
      this.envMapRotation.copy(e.envMapRotation),
      (this.combine = e.combine),
      (this.reflectivity = e.reflectivity),
      (this.refractionRatio = e.refractionRatio),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.wireframeLinecap = e.wireframeLinecap),
      (this.wireframeLinejoin = e.wireframeLinejoin),
      (this.fog = e.fog),
      this
    );
  }
}
const ir = wS();
function wS() {
  const r = new ArrayBuffer(4),
    e = new Float32Array(r),
    t = new Uint32Array(r),
    n = new Uint32Array(512),
    i = new Uint32Array(512);
  for (let u = 0; u < 256; ++u) {
    const h = u - 127;
    h < -27
      ? ((n[u] = 0), (n[u | 256] = 32768), (i[u] = 24), (i[u | 256] = 24))
      : h < -14
        ? ((n[u] = 1024 >> (-h - 14)),
          (n[u | 256] = (1024 >> (-h - 14)) | 32768),
          (i[u] = -h - 1),
          (i[u | 256] = -h - 1))
        : h <= 15
          ? ((n[u] = (h + 15) << 10), (n[u | 256] = ((h + 15) << 10) | 32768), (i[u] = 13), (i[u | 256] = 13))
          : h < 128
            ? ((n[u] = 31744), (n[u | 256] = 64512), (i[u] = 24), (i[u | 256] = 24))
            : ((n[u] = 31744), (n[u | 256] = 64512), (i[u] = 13), (i[u | 256] = 13));
  }
  const s = new Uint32Array(2048),
    l = new Uint32Array(64),
    c = new Uint32Array(64);
  for (let u = 1; u < 1024; ++u) {
    let h = u << 13,
      d = 0;
    for (; !(h & 8388608); ) (h <<= 1), (d -= 8388608);
    (h &= -8388609), (d += 947912704), (s[u] = h | d);
  }
  for (let u = 1024; u < 2048; ++u) s[u] = 939524096 + ((u - 1024) << 13);
  for (let u = 1; u < 31; ++u) l[u] = u << 23;
  (l[31] = 1199570944), (l[32] = 2147483648);
  for (let u = 33; u < 63; ++u) l[u] = 2147483648 + ((u - 32) << 23);
  l[63] = 3347054592;
  for (let u = 1; u < 64; ++u) u !== 32 && (c[u] = 1024);
  return {
    floatView: e,
    uint32View: t,
    baseTable: n,
    shiftTable: i,
    mantissaTable: s,
    exponentTable: l,
    offsetTable: c,
  };
}
function Gn(r) {
  Math.abs(r) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),
    (r = Jt(r, -65504, 65504)),
    (ir.floatView[0] = r);
  const e = ir.uint32View[0],
    t = (e >> 23) & 511;
  return ir.baseTable[t] + ((e & 8388607) >> ir.shiftTable[t]);
}
function ca(r) {
  const e = r >> 10;
  return (ir.uint32View[0] = ir.mantissaTable[ir.offsetTable[e] + (r & 1023)] + ir.exponentTable[e]), ir.floatView[0];
}
const ES = { toHalfFloat: Gn, fromHalfFloat: ca },
  nn = new N(),
  sc = new fe();
class Ot {
  constructor(e, t, n = !1) {
    if (Array.isArray(e)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    (this.isBufferAttribute = !0),
      (this.name = ""),
      (this.array = e),
      (this.itemSize = t),
      (this.count = e !== void 0 ? e.length / t : 0),
      (this.normalized = n),
      (this.usage = ba),
      (this.updateRanges = []),
      (this.gpuType = Yn),
      (this.version = 0);
  }
  onUploadCallback() {}
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return (this.usage = e), this;
  }
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(e) {
    return (
      (this.name = e.name),
      (this.array = new e.array.constructor(e.array)),
      (this.itemSize = e.itemSize),
      (this.count = e.count),
      (this.normalized = e.normalized),
      (this.usage = e.usage),
      (this.gpuType = e.gpuType),
      this
    );
  }
  copyAt(e, t, n) {
    (e *= this.itemSize), (n *= t.itemSize);
    for (let i = 0, s = this.itemSize; i < s; i++) this.array[e + i] = t.array[n + i];
    return this;
  }
  copyArray(e) {
    return this.array.set(e), this;
  }
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let t = 0, n = this.count; t < n; t++)
        sc.fromBufferAttribute(this, t), sc.applyMatrix3(e), this.setXY(t, sc.x, sc.y);
    else if (this.itemSize === 3)
      for (let t = 0, n = this.count; t < n; t++)
        nn.fromBufferAttribute(this, t), nn.applyMatrix3(e), this.setXYZ(t, nn.x, nn.y, nn.z);
    return this;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.count; t < n; t++)
      nn.fromBufferAttribute(this, t), nn.applyMatrix4(e), this.setXYZ(t, nn.x, nn.y, nn.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      nn.fromBufferAttribute(this, t), nn.applyNormalMatrix(e), this.setXYZ(t, nn.x, nn.y, nn.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      nn.fromBufferAttribute(this, t), nn.transformDirection(e), this.setXYZ(t, nn.x, nn.y, nn.z);
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  getComponent(e, t) {
    let n = this.array[e * this.itemSize + t];
    return this.normalized && (n = Un(n, this.array)), n;
  }
  setComponent(e, t, n) {
    return this.normalized && (n = pt(n, this.array)), (this.array[e * this.itemSize + t] = n), this;
  }
  getX(e) {
    let t = this.array[e * this.itemSize];
    return this.normalized && (t = Un(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = pt(t, this.array)), (this.array[e * this.itemSize] = t), this;
  }
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    return this.normalized && (t = Un(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = pt(t, this.array)), (this.array[e * this.itemSize + 1] = t), this;
  }
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    return this.normalized && (t = Un(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = pt(t, this.array)), (this.array[e * this.itemSize + 2] = t), this;
  }
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    return this.normalized && (t = Un(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = pt(t, this.array)), (this.array[e * this.itemSize + 3] = t), this;
  }
  setXY(e, t, n) {
    return (
      (e *= this.itemSize),
      this.normalized && ((t = pt(t, this.array)), (n = pt(n, this.array))),
      (this.array[e + 0] = t),
      (this.array[e + 1] = n),
      this
    );
  }
  setXYZ(e, t, n, i) {
    return (
      (e *= this.itemSize),
      this.normalized && ((t = pt(t, this.array)), (n = pt(n, this.array)), (i = pt(i, this.array))),
      (this.array[e + 0] = t),
      (this.array[e + 1] = n),
      (this.array[e + 2] = i),
      this
    );
  }
  setXYZW(e, t, n, i, s) {
    return (
      (e *= this.itemSize),
      this.normalized &&
        ((t = pt(t, this.array)), (n = pt(n, this.array)), (i = pt(i, this.array)), (s = pt(s, this.array))),
      (this.array[e + 0] = t),
      (this.array[e + 1] = n),
      (this.array[e + 2] = i),
      (this.array[e + 3] = s),
      this
    );
  }
  onUpload(e) {
    return (this.onUploadCallback = e), this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized,
    };
    return this.name !== "" && (e.name = this.name), this.usage !== ba && (e.usage = this.usage), e;
  }
}
class TS extends Ot {
  constructor(e, t, n) {
    super(new Int8Array(e), t, n);
  }
}
class AS extends Ot {
  constructor(e, t, n) {
    super(new Uint8Array(e), t, n);
  }
}
class bS extends Ot {
  constructor(e, t, n) {
    super(new Uint8ClampedArray(e), t, n);
  }
}
class CS extends Ot {
  constructor(e, t, n) {
    super(new Int16Array(e), t, n);
  }
}
class Zd extends Ot {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n);
  }
}
class RS extends Ot {
  constructor(e, t, n) {
    super(new Int32Array(e), t, n);
  }
}
class Jd extends Ot {
  constructor(e, t, n) {
    super(new Uint32Array(e), t, n);
  }
}
class PS extends Ot {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n), (this.isFloat16BufferAttribute = !0);
  }
  getX(e) {
    let t = ca(this.array[e * this.itemSize]);
    return this.normalized && (t = Un(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = pt(t, this.array)), (this.array[e * this.itemSize] = Gn(t)), this;
  }
  getY(e) {
    let t = ca(this.array[e * this.itemSize + 1]);
    return this.normalized && (t = Un(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = pt(t, this.array)), (this.array[e * this.itemSize + 1] = Gn(t)), this;
  }
  getZ(e) {
    let t = ca(this.array[e * this.itemSize + 2]);
    return this.normalized && (t = Un(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = pt(t, this.array)), (this.array[e * this.itemSize + 2] = Gn(t)), this;
  }
  getW(e) {
    let t = ca(this.array[e * this.itemSize + 3]);
    return this.normalized && (t = Un(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = pt(t, this.array)), (this.array[e * this.itemSize + 3] = Gn(t)), this;
  }
  setXY(e, t, n) {
    return (
      (e *= this.itemSize),
      this.normalized && ((t = pt(t, this.array)), (n = pt(n, this.array))),
      (this.array[e + 0] = Gn(t)),
      (this.array[e + 1] = Gn(n)),
      this
    );
  }
  setXYZ(e, t, n, i) {
    return (
      (e *= this.itemSize),
      this.normalized && ((t = pt(t, this.array)), (n = pt(n, this.array)), (i = pt(i, this.array))),
      (this.array[e + 0] = Gn(t)),
      (this.array[e + 1] = Gn(n)),
      (this.array[e + 2] = Gn(i)),
      this
    );
  }
  setXYZW(e, t, n, i, s) {
    return (
      (e *= this.itemSize),
      this.normalized &&
        ((t = pt(t, this.array)), (n = pt(n, this.array)), (i = pt(i, this.array)), (s = pt(s, this.array))),
      (this.array[e + 0] = Gn(t)),
      (this.array[e + 1] = Gn(n)),
      (this.array[e + 2] = Gn(i)),
      (this.array[e + 3] = Gn(s)),
      this
    );
  }
}
class Xe extends Ot {
  constructor(e, t, n) {
    super(new Float32Array(e), t, n);
  }
}
let IS = 0;
const hi = new st(),
  Nf = new Rt(),
  js = new N(),
  ei = new Fn(),
  jo = new Fn(),
  mn = new N();
class vt extends Hi {
  constructor() {
    super(),
      (this.isBufferGeometry = !0),
      Object.defineProperty(this, "id", { value: IS++ }),
      (this.uuid = ti()),
      (this.name = ""),
      (this.type = "BufferGeometry"),
      (this.index = null),
      (this.indirect = null),
      (this.attributes = {}),
      (this.morphAttributes = {}),
      (this.morphTargetsRelative = !1),
      (this.groups = []),
      (this.boundingBox = null),
      (this.boundingSphere = null),
      (this.drawRange = { start: 0, count: 1 / 0 }),
      (this.userData = {});
  }
  getIndex() {
    return this.index;
  }
  setIndex(e) {
    return Array.isArray(e) ? (this.index = new (kv(e) ? Jd : Zd)(e, 1)) : (this.index = e), this;
  }
  setIndirect(e) {
    return (this.indirect = e), this;
  }
  getIndirect() {
    return this.indirect;
  }
  getAttribute(e) {
    return this.attributes[e];
  }
  setAttribute(e, t) {
    return (this.attributes[e] = t), this;
  }
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  addGroup(e, t, n = 0) {
    this.groups.push({ start: e, count: t, materialIndex: n });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(e, t) {
    (this.drawRange.start = e), (this.drawRange.count = t);
  }
  applyMatrix4(e) {
    const t = this.attributes.position;
    t !== void 0 && (t.applyMatrix4(e), (t.needsUpdate = !0));
    const n = this.attributes.normal;
    if (n !== void 0) {
      const s = new dt().getNormalMatrix(e);
      n.applyNormalMatrix(s), (n.needsUpdate = !0);
    }
    const i = this.attributes.tangent;
    return (
      i !== void 0 && (i.transformDirection(e), (i.needsUpdate = !0)),
      this.boundingBox !== null && this.computeBoundingBox(),
      this.boundingSphere !== null && this.computeBoundingSphere(),
      this
    );
  }
  applyQuaternion(e) {
    return hi.makeRotationFromQuaternion(e), this.applyMatrix4(hi), this;
  }
  rotateX(e) {
    return hi.makeRotationX(e), this.applyMatrix4(hi), this;
  }
  rotateY(e) {
    return hi.makeRotationY(e), this.applyMatrix4(hi), this;
  }
  rotateZ(e) {
    return hi.makeRotationZ(e), this.applyMatrix4(hi), this;
  }
  translate(e, t, n) {
    return hi.makeTranslation(e, t, n), this.applyMatrix4(hi), this;
  }
  scale(e, t, n) {
    return hi.makeScale(e, t, n), this.applyMatrix4(hi), this;
  }
  lookAt(e) {
    return Nf.lookAt(e), Nf.updateMatrix(), this.applyMatrix4(Nf.matrix), this;
  }
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(js).negate(), this.translate(js.x, js.y, js.z), this;
  }
  setFromPoints(e) {
    const t = this.getAttribute("position");
    if (t === void 0) {
      const n = [];
      for (let i = 0, s = e.length; i < s; i++) {
        const l = e[i];
        n.push(l.x, l.y, l.z || 0);
      }
      this.setAttribute("position", new Xe(n, 3));
    } else {
      for (let n = 0, i = t.count; n < i; n++) {
        const s = e[n];
        t.setXYZ(n, s.x, s.y, s.z || 0);
      }
      e.length > t.count &&
        console.warn(
          "THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."
        ),
        (t.needsUpdate = !0);
    }
    return this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Fn());
    const e = this.attributes.position,
      t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error(
        "THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",
        this
      ),
        this.boundingBox.set(new N(-1 / 0, -1 / 0, -1 / 0), new N(1 / 0, 1 / 0, 1 / 0));
      return;
    }
    if (e !== void 0) {
      if ((this.boundingBox.setFromBufferAttribute(e), t))
        for (let n = 0, i = t.length; n < i; n++) {
          const s = t[n];
          ei.setFromBufferAttribute(s),
            this.morphTargetsRelative
              ? (mn.addVectors(this.boundingBox.min, ei.min),
                this.boundingBox.expandByPoint(mn),
                mn.addVectors(this.boundingBox.max, ei.max),
                this.boundingBox.expandByPoint(mn))
              : (this.boundingBox.expandByPoint(ei.min), this.boundingBox.expandByPoint(ei.max));
        }
    } else this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) &&
      console.error(
        'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',
        this
      );
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new bn());
    const e = this.attributes.position,
      t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error(
        "THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",
        this
      ),
        this.boundingSphere.set(new N(), 1 / 0);
      return;
    }
    if (e) {
      const n = this.boundingSphere.center;
      if ((ei.setFromBufferAttribute(e), t))
        for (let s = 0, l = t.length; s < l; s++) {
          const c = t[s];
          jo.setFromBufferAttribute(c),
            this.morphTargetsRelative
              ? (mn.addVectors(ei.min, jo.min),
                ei.expandByPoint(mn),
                mn.addVectors(ei.max, jo.max),
                ei.expandByPoint(mn))
              : (ei.expandByPoint(jo.min), ei.expandByPoint(jo.max));
        }
      ei.getCenter(n);
      let i = 0;
      for (let s = 0, l = e.count; s < l; s++) mn.fromBufferAttribute(e, s), (i = Math.max(i, n.distanceToSquared(mn)));
      if (t)
        for (let s = 0, l = t.length; s < l; s++) {
          const c = t[s],
            u = this.morphTargetsRelative;
          for (let h = 0, d = c.count; h < d; h++)
            mn.fromBufferAttribute(c, h),
              u && (js.fromBufferAttribute(e, h), mn.add(js)),
              (i = Math.max(i, n.distanceToSquared(mn)));
        }
      (this.boundingSphere.radius = Math.sqrt(i)),
        isNaN(this.boundingSphere.radius) &&
          console.error(
            'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',
            this
          );
    }
  }
  computeTangents() {
    const e = this.index,
      t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error(
        "THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)"
      );
      return;
    }
    const n = t.position,
      i = t.normal,
      s = t.uv;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new Ot(new Float32Array(4 * n.count), 4));
    const l = this.getAttribute("tangent"),
      c = [],
      u = [];
    for (let F = 0; F < n.count; F++) (c[F] = new N()), (u[F] = new N());
    const h = new N(),
      d = new N(),
      p = new N(),
      m = new fe(),
      v = new fe(),
      x = new fe(),
      M = new N(),
      y = new N();
    function _(F, C, b) {
      h.fromBufferAttribute(n, F),
        d.fromBufferAttribute(n, C),
        p.fromBufferAttribute(n, b),
        m.fromBufferAttribute(s, F),
        v.fromBufferAttribute(s, C),
        x.fromBufferAttribute(s, b),
        d.sub(h),
        p.sub(h),
        v.sub(m),
        x.sub(m);
      const D = 1 / (v.x * x.y - x.x * v.y);
      isFinite(D) &&
        (M.copy(d).multiplyScalar(x.y).addScaledVector(p, -v.y).multiplyScalar(D),
        y.copy(p).multiplyScalar(v.x).addScaledVector(d, -x.x).multiplyScalar(D),
        c[F].add(M),
        c[C].add(M),
        c[b].add(M),
        u[F].add(y),
        u[C].add(y),
        u[b].add(y));
    }
    let w = this.groups;
    w.length === 0 && (w = [{ start: 0, count: e.count }]);
    for (let F = 0, C = w.length; F < C; ++F) {
      const b = w[F],
        D = b.start,
        Y = b.count;
      for (let q = D, K = D + Y; q < K; q += 3) _(e.getX(q + 0), e.getX(q + 1), e.getX(q + 2));
    }
    const E = new N(),
      A = new N(),
      O = new N(),
      P = new N();
    function L(F) {
      O.fromBufferAttribute(i, F), P.copy(O);
      const C = c[F];
      E.copy(C), E.sub(O.multiplyScalar(O.dot(C))).normalize(), A.crossVectors(P, C);
      const D = A.dot(u[F]) < 0 ? -1 : 1;
      l.setXYZW(F, E.x, E.y, E.z, D);
    }
    for (let F = 0, C = w.length; F < C; ++F) {
      const b = w[F],
        D = b.start,
        Y = b.count;
      for (let q = D, K = D + Y; q < K; q += 3) L(e.getX(q + 0)), L(e.getX(q + 1)), L(e.getX(q + 2));
    }
  }
  computeVertexNormals() {
    const e = this.index,
      t = this.getAttribute("position");
    if (t !== void 0) {
      let n = this.getAttribute("normal");
      if (n === void 0) (n = new Ot(new Float32Array(t.count * 3), 3)), this.setAttribute("normal", n);
      else for (let m = 0, v = n.count; m < v; m++) n.setXYZ(m, 0, 0, 0);
      const i = new N(),
        s = new N(),
        l = new N(),
        c = new N(),
        u = new N(),
        h = new N(),
        d = new N(),
        p = new N();
      if (e)
        for (let m = 0, v = e.count; m < v; m += 3) {
          const x = e.getX(m + 0),
            M = e.getX(m + 1),
            y = e.getX(m + 2);
          i.fromBufferAttribute(t, x),
            s.fromBufferAttribute(t, M),
            l.fromBufferAttribute(t, y),
            d.subVectors(l, s),
            p.subVectors(i, s),
            d.cross(p),
            c.fromBufferAttribute(n, x),
            u.fromBufferAttribute(n, M),
            h.fromBufferAttribute(n, y),
            c.add(d),
            u.add(d),
            h.add(d),
            n.setXYZ(x, c.x, c.y, c.z),
            n.setXYZ(M, u.x, u.y, u.z),
            n.setXYZ(y, h.x, h.y, h.z);
        }
      else
        for (let m = 0, v = t.count; m < v; m += 3)
          i.fromBufferAttribute(t, m + 0),
            s.fromBufferAttribute(t, m + 1),
            l.fromBufferAttribute(t, m + 2),
            d.subVectors(l, s),
            p.subVectors(i, s),
            d.cross(p),
            n.setXYZ(m + 0, d.x, d.y, d.z),
            n.setXYZ(m + 1, d.x, d.y, d.z),
            n.setXYZ(m + 2, d.x, d.y, d.z);
      this.normalizeNormals(), (n.needsUpdate = !0);
    }
  }
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, n = e.count; t < n; t++)
      mn.fromBufferAttribute(e, t), mn.normalize(), e.setXYZ(t, mn.x, mn.y, mn.z);
  }
  toNonIndexed() {
    function e(c, u) {
      const h = c.array,
        d = c.itemSize,
        p = c.normalized,
        m = new h.constructor(u.length * d);
      let v = 0,
        x = 0;
      for (let M = 0, y = u.length; M < y; M++) {
        c.isInterleavedBufferAttribute ? (v = u[M] * c.data.stride + c.offset) : (v = u[M] * d);
        for (let _ = 0; _ < d; _++) m[x++] = h[v++];
      }
      return new Ot(m, d, p);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const t = new vt(),
      n = this.index.array,
      i = this.attributes;
    for (const c in i) {
      const u = i[c],
        h = e(u, n);
      t.setAttribute(c, h);
    }
    const s = this.morphAttributes;
    for (const c in s) {
      const u = [],
        h = s[c];
      for (let d = 0, p = h.length; d < p; d++) {
        const m = h[d],
          v = e(m, n);
        u.push(v);
      }
      t.morphAttributes[c] = u;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const l = this.groups;
    for (let c = 0, u = l.length; c < u; c++) {
      const h = l[c];
      t.addGroup(h.start, h.count, h.materialIndex);
    }
    return t;
  }
  toJSON() {
    const e = { metadata: { version: 4.6, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };
    if (
      ((e.uuid = this.uuid),
      (e.type = this.type),
      this.name !== "" && (e.name = this.name),
      Object.keys(this.userData).length > 0 && (e.userData = this.userData),
      this.parameters !== void 0)
    ) {
      const u = this.parameters;
      for (const h in u) u[h] !== void 0 && (e[h] = u[h]);
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    t !== null && (e.data.index = { type: t.array.constructor.name, array: Array.prototype.slice.call(t.array) });
    const n = this.attributes;
    for (const u in n) {
      const h = n[u];
      e.data.attributes[u] = h.toJSON(e.data);
    }
    const i = {};
    let s = !1;
    for (const u in this.morphAttributes) {
      const h = this.morphAttributes[u],
        d = [];
      for (let p = 0, m = h.length; p < m; p++) {
        const v = h[p];
        d.push(v.toJSON(e.data));
      }
      d.length > 0 && ((i[u] = d), (s = !0));
    }
    s && ((e.data.morphAttributes = i), (e.data.morphTargetsRelative = this.morphTargetsRelative));
    const l = this.groups;
    l.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(l)));
    const c = this.boundingSphere;
    return c !== null && (e.data.boundingSphere = { center: c.center.toArray(), radius: c.radius }), e;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    (this.index = null),
      (this.attributes = {}),
      (this.morphAttributes = {}),
      (this.groups = []),
      (this.boundingBox = null),
      (this.boundingSphere = null);
    const t = {};
    this.name = e.name;
    const n = e.index;
    n !== null && this.setIndex(n.clone(t));
    const i = e.attributes;
    for (const h in i) {
      const d = i[h];
      this.setAttribute(h, d.clone(t));
    }
    const s = e.morphAttributes;
    for (const h in s) {
      const d = [],
        p = s[h];
      for (let m = 0, v = p.length; m < v; m++) d.push(p[m].clone(t));
      this.morphAttributes[h] = d;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const l = e.groups;
    for (let h = 0, d = l.length; h < d; h++) {
      const p = l[h];
      this.addGroup(p.start, p.count, p.materialIndex);
    }
    const c = e.boundingBox;
    c !== null && (this.boundingBox = c.clone());
    const u = e.boundingSphere;
    return (
      u !== null && (this.boundingSphere = u.clone()),
      (this.drawRange.start = e.drawRange.start),
      (this.drawRange.count = e.drawRange.count),
      (this.userData = e.userData),
      this
    );
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const _g = new st(),
  Jr = new To(),
  oc = new bn(),
  xg = new N(),
  ac = new N(),
  lc = new N(),
  cc = new N(),
  Ff = new N(),
  uc = new N(),
  yg = new N(),
  hc = new N();
class rn extends Rt {
  constructor(e = new vt(), t = new Ur()) {
    super(),
      (this.isMesh = !0),
      (this.type = "Mesh"),
      (this.geometry = e),
      (this.material = t),
      this.updateMorphTargets();
  }
  copy(e, t) {
    return (
      super.copy(e, t),
      e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()),
      e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)),
      (this.material = Array.isArray(e.material) ? e.material.slice() : e.material),
      (this.geometry = e.geometry),
      this
    );
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes,
      n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        (this.morphTargetInfluences = []), (this.morphTargetDictionary = {});
        for (let s = 0, l = i.length; s < l; s++) {
          const c = i[s].name || String(s);
          this.morphTargetInfluences.push(0), (this.morphTargetDictionary[c] = s);
        }
      }
    }
  }
  getVertexPosition(e, t) {
    const n = this.geometry,
      i = n.attributes.position,
      s = n.morphAttributes.position,
      l = n.morphTargetsRelative;
    t.fromBufferAttribute(i, e);
    const c = this.morphTargetInfluences;
    if (s && c) {
      uc.set(0, 0, 0);
      for (let u = 0, h = s.length; u < h; u++) {
        const d = c[u],
          p = s[u];
        d !== 0 && (Ff.fromBufferAttribute(p, e), l ? uc.addScaledVector(Ff, d) : uc.addScaledVector(Ff.sub(t), d));
      }
      t.add(uc);
    }
    return t;
  }
  raycast(e, t) {
    const n = this.geometry,
      i = this.material,
      s = this.matrixWorld;
    i !== void 0 &&
      (n.boundingSphere === null && n.computeBoundingSphere(),
      oc.copy(n.boundingSphere),
      oc.applyMatrix4(s),
      Jr.copy(e.ray).recast(e.near),
      !(
        oc.containsPoint(Jr.origin) === !1 &&
        (Jr.intersectSphere(oc, xg) === null || Jr.origin.distanceToSquared(xg) > (e.far - e.near) ** 2)
      ) &&
        (_g.copy(s).invert(),
        Jr.copy(e.ray).applyMatrix4(_g),
        !(n.boundingBox !== null && Jr.intersectsBox(n.boundingBox) === !1) && this._computeIntersections(e, t, Jr)));
  }
  _computeIntersections(e, t, n) {
    let i;
    const s = this.geometry,
      l = this.material,
      c = s.index,
      u = s.attributes.position,
      h = s.attributes.uv,
      d = s.attributes.uv1,
      p = s.attributes.normal,
      m = s.groups,
      v = s.drawRange;
    if (c !== null)
      if (Array.isArray(l))
        for (let x = 0, M = m.length; x < M; x++) {
          const y = m[x],
            _ = l[y.materialIndex],
            w = Math.max(y.start, v.start),
            E = Math.min(c.count, Math.min(y.start + y.count, v.start + v.count));
          for (let A = w, O = E; A < O; A += 3) {
            const P = c.getX(A),
              L = c.getX(A + 1),
              F = c.getX(A + 2);
            (i = fc(this, _, e, n, h, d, p, P, L, F)),
              i && ((i.faceIndex = Math.floor(A / 3)), (i.face.materialIndex = y.materialIndex), t.push(i));
          }
        }
      else {
        const x = Math.max(0, v.start),
          M = Math.min(c.count, v.start + v.count);
        for (let y = x, _ = M; y < _; y += 3) {
          const w = c.getX(y),
            E = c.getX(y + 1),
            A = c.getX(y + 2);
          (i = fc(this, l, e, n, h, d, p, w, E, A)), i && ((i.faceIndex = Math.floor(y / 3)), t.push(i));
        }
      }
    else if (u !== void 0)
      if (Array.isArray(l))
        for (let x = 0, M = m.length; x < M; x++) {
          const y = m[x],
            _ = l[y.materialIndex],
            w = Math.max(y.start, v.start),
            E = Math.min(u.count, Math.min(y.start + y.count, v.start + v.count));
          for (let A = w, O = E; A < O; A += 3) {
            const P = A,
              L = A + 1,
              F = A + 2;
            (i = fc(this, _, e, n, h, d, p, P, L, F)),
              i && ((i.faceIndex = Math.floor(A / 3)), (i.face.materialIndex = y.materialIndex), t.push(i));
          }
        }
      else {
        const x = Math.max(0, v.start),
          M = Math.min(u.count, v.start + v.count);
        for (let y = x, _ = M; y < _; y += 3) {
          const w = y,
            E = y + 1,
            A = y + 2;
          (i = fc(this, l, e, n, h, d, p, w, E, A)), i && ((i.faceIndex = Math.floor(y / 3)), t.push(i));
        }
      }
  }
}
function LS(r, e, t, n, i, s, l, c) {
  let u;
  if (
    (e.side === Nn ? (u = n.intersectTriangle(l, s, i, !0, c)) : (u = n.intersectTriangle(i, s, l, e.side === ar, c)),
    u === null)
  )
    return null;
  hc.copy(c), hc.applyMatrix4(r.matrixWorld);
  const h = t.ray.origin.distanceTo(hc);
  return h < t.near || h > t.far ? null : { distance: h, point: hc.clone(), object: r };
}
function fc(r, e, t, n, i, s, l, c, u, h) {
  r.getVertexPosition(c, ac), r.getVertexPosition(u, lc), r.getVertexPosition(h, cc);
  const d = LS(r, e, t, n, ac, lc, cc, yg);
  if (d) {
    const p = new N();
    Xn.getBarycoord(yg, ac, lc, cc, p),
      i && (d.uv = Xn.getInterpolatedAttribute(i, c, u, h, p, new fe())),
      s && (d.uv1 = Xn.getInterpolatedAttribute(s, c, u, h, p, new fe())),
      l &&
        ((d.normal = Xn.getInterpolatedAttribute(l, c, u, h, p, new N())),
        d.normal.dot(n.direction) > 0 && d.normal.multiplyScalar(-1));
    const m = { a: c, b: u, c: h, normal: new N(), materialIndex: 0 };
    Xn.getNormal(ac, lc, cc, m.normal), (d.face = m), (d.barycoord = p);
  }
  return d;
}
class Es extends vt {
  constructor(e = 1, t = 1, n = 1, i = 1, s = 1, l = 1) {
    super(),
      (this.type = "BoxGeometry"),
      (this.parameters = { width: e, height: t, depth: n, widthSegments: i, heightSegments: s, depthSegments: l });
    const c = this;
    (i = Math.floor(i)), (s = Math.floor(s)), (l = Math.floor(l));
    const u = [],
      h = [],
      d = [],
      p = [];
    let m = 0,
      v = 0;
    x("z", "y", "x", -1, -1, n, t, e, l, s, 0),
      x("z", "y", "x", 1, -1, n, t, -e, l, s, 1),
      x("x", "z", "y", 1, 1, e, n, t, i, l, 2),
      x("x", "z", "y", 1, -1, e, n, -t, i, l, 3),
      x("x", "y", "z", 1, -1, e, t, n, i, s, 4),
      x("x", "y", "z", -1, -1, e, t, -n, i, s, 5),
      this.setIndex(u),
      this.setAttribute("position", new Xe(h, 3)),
      this.setAttribute("normal", new Xe(d, 3)),
      this.setAttribute("uv", new Xe(p, 2));
    function x(M, y, _, w, E, A, O, P, L, F, C) {
      const b = A / L,
        D = O / F,
        Y = A / 2,
        q = O / 2,
        K = P / 2,
        ae = L + 1,
        j = F + 1;
      let me = 0,
        k = 0;
      const ne = new N();
      for (let te = 0; te < j; te++) {
        const ce = te * D - q;
        for (let Ce = 0; Ce < ae; Ce++) {
          const Ye = Ce * b - Y;
          (ne[M] = Ye * w),
            (ne[y] = ce * E),
            (ne[_] = K),
            h.push(ne.x, ne.y, ne.z),
            (ne[M] = 0),
            (ne[y] = 0),
            (ne[_] = P > 0 ? 1 : -1),
            d.push(ne.x, ne.y, ne.z),
            p.push(Ce / L),
            p.push(1 - te / F),
            (me += 1);
        }
      }
      for (let te = 0; te < F; te++)
        for (let ce = 0; ce < L; ce++) {
          const Ce = m + ce + ae * te,
            Ye = m + ce + ae * (te + 1),
            re = m + (ce + 1) + ae * (te + 1),
            ge = m + (ce + 1) + ae * te;
          u.push(Ce, Ye, ge), u.push(Ye, re, ge), (k += 6);
        }
      c.addGroup(v, k, C), (v += k), (m += me);
    }
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  static fromJSON(e) {
    return new Es(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function yo(r) {
  const e = {};
  for (const t in r) {
    e[t] = {};
    for (const n in r[t]) {
      const i = r[t][n];
      i &&
      (i.isColor ||
        i.isMatrix3 ||
        i.isMatrix4 ||
        i.isVector2 ||
        i.isVector3 ||
        i.isVector4 ||
        i.isTexture ||
        i.isQuaternion)
        ? i.isRenderTargetTexture
          ? (console.warn(
              "UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."
            ),
            (e[t][n] = null))
          : (e[t][n] = i.clone())
        : Array.isArray(i)
          ? (e[t][n] = i.slice())
          : (e[t][n] = i);
    }
  }
  return e;
}
function Dn(r) {
  const e = {};
  for (let t = 0; t < r.length; t++) {
    const n = yo(r[t]);
    for (const i in n) e[i] = n[i];
  }
  return e;
}
function DS(r) {
  const e = [];
  for (let t = 0; t < r.length; t++) e.push(r[t].clone());
  return e;
}
function Xv(r) {
  const e = r.getRenderTarget();
  return e === null ? r.outputColorSpace : e.isXRRenderTarget === !0 ? e.texture.colorSpace : At.workingColorSpace;
}
const Yv = { clone: yo, merge: Dn };
var US = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,
  NS = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class Ei extends Cn {
  static get type() {
    return "ShaderMaterial";
  }
  constructor(e) {
    super(),
      (this.isShaderMaterial = !0),
      (this.defines = {}),
      (this.uniforms = {}),
      (this.uniformsGroups = []),
      (this.vertexShader = US),
      (this.fragmentShader = NS),
      (this.linewidth = 1),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.fog = !1),
      (this.lights = !1),
      (this.clipping = !1),
      (this.forceSinglePass = !0),
      (this.extensions = { clipCullDistance: !1, multiDraw: !1 }),
      (this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv1: [0, 0] }),
      (this.index0AttributeName = void 0),
      (this.uniformsNeedUpdate = !1),
      (this.glslVersion = null),
      e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      (this.fragmentShader = e.fragmentShader),
      (this.vertexShader = e.vertexShader),
      (this.uniforms = yo(e.uniforms)),
      (this.uniformsGroups = DS(e.uniformsGroups)),
      (this.defines = Object.assign({}, e.defines)),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.fog = e.fog),
      (this.lights = e.lights),
      (this.clipping = e.clipping),
      (this.extensions = Object.assign({}, e.extensions)),
      (this.glslVersion = e.glslVersion),
      this
    );
  }
  toJSON(e) {
    const t = super.toJSON(e);
    (t.glslVersion = this.glslVersion), (t.uniforms = {});
    for (const i in this.uniforms) {
      const l = this.uniforms[i].value;
      l && l.isTexture
        ? (t.uniforms[i] = { type: "t", value: l.toJSON(e).uuid })
        : l && l.isColor
          ? (t.uniforms[i] = { type: "c", value: l.getHex() })
          : l && l.isVector2
            ? (t.uniforms[i] = { type: "v2", value: l.toArray() })
            : l && l.isVector3
              ? (t.uniforms[i] = { type: "v3", value: l.toArray() })
              : l && l.isVector4
                ? (t.uniforms[i] = { type: "v4", value: l.toArray() })
                : l && l.isMatrix3
                  ? (t.uniforms[i] = { type: "m3", value: l.toArray() })
                  : l && l.isMatrix4
                    ? (t.uniforms[i] = { type: "m4", value: l.toArray() })
                    : (t.uniforms[i] = { value: l });
    }
    Object.keys(this.defines).length > 0 && (t.defines = this.defines),
      (t.vertexShader = this.vertexShader),
      (t.fragmentShader = this.fragmentShader),
      (t.lights = this.lights),
      (t.clipping = this.clipping);
    const n = {};
    for (const i in this.extensions) this.extensions[i] === !0 && (n[i] = !0);
    return Object.keys(n).length > 0 && (t.extensions = n), t;
  }
}
class Va extends Rt {
  constructor() {
    super(),
      (this.isCamera = !0),
      (this.type = "Camera"),
      (this.matrixWorldInverse = new st()),
      (this.projectionMatrix = new st()),
      (this.projectionMatrixInverse = new st()),
      (this.coordinateSystem = Bi);
  }
  copy(e, t) {
    return (
      super.copy(e, t),
      this.matrixWorldInverse.copy(e.matrixWorldInverse),
      this.projectionMatrix.copy(e.projectionMatrix),
      this.projectionMatrixInverse.copy(e.projectionMatrixInverse),
      (this.coordinateSystem = e.coordinateSystem),
      this
    );
  }
  getWorldDirection(e) {
    return super.getWorldDirection(e).negate();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const br = new N(),
  Sg = new fe(),
  Mg = new fe();
class gn extends Va {
  constructor(e = 50, t = 1, n = 0.1, i = 2e3) {
    super(),
      (this.isPerspectiveCamera = !0),
      (this.type = "PerspectiveCamera"),
      (this.fov = e),
      (this.zoom = 1),
      (this.near = n),
      (this.far = i),
      (this.focus = 10),
      (this.aspect = t),
      (this.view = null),
      (this.filmGauge = 35),
      (this.filmOffset = 0),
      this.updateProjectionMatrix();
  }
  copy(e, t) {
    return (
      super.copy(e, t),
      (this.fov = e.fov),
      (this.zoom = e.zoom),
      (this.near = e.near),
      (this.far = e.far),
      (this.focus = e.focus),
      (this.aspect = e.aspect),
      (this.view = e.view === null ? null : Object.assign({}, e.view)),
      (this.filmGauge = e.filmGauge),
      (this.filmOffset = e.filmOffset),
      this
    );
  }
  setFocalLength(e) {
    const t = (0.5 * this.getFilmHeight()) / e;
    (this.fov = xo * 2 * Math.atan(t)), this.updateProjectionMatrix();
  }
  getFocalLength() {
    const e = Math.tan(ms * 0.5 * this.fov);
    return (0.5 * this.getFilmHeight()) / e;
  }
  getEffectiveFOV() {
    return xo * 2 * Math.atan(Math.tan(ms * 0.5 * this.fov) / this.zoom);
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  getViewBounds(e, t, n) {
    br.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse),
      t.set(br.x, br.y).multiplyScalar(-e / br.z),
      br.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse),
      n.set(br.x, br.y).multiplyScalar(-e / br.z);
  }
  getViewSize(e, t) {
    return this.getViewBounds(e, Sg, Mg), t.subVectors(Mg, Sg);
  }
  setViewOffset(e, t, n, i, s, l) {
    (this.aspect = e / t),
      this.view === null &&
        (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }),
      (this.view.enabled = !0),
      (this.view.fullWidth = e),
      (this.view.fullHeight = t),
      (this.view.offsetX = n),
      (this.view.offsetY = i),
      (this.view.width = s),
      (this.view.height = l),
      this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = this.near;
    let t = (e * Math.tan(ms * 0.5 * this.fov)) / this.zoom,
      n = 2 * t,
      i = this.aspect * n,
      s = -0.5 * i;
    const l = this.view;
    if (this.view !== null && this.view.enabled) {
      const u = l.fullWidth,
        h = l.fullHeight;
      (s += (l.offsetX * i) / u), (t -= (l.offsetY * n) / h), (i *= l.width / u), (n *= l.height / h);
    }
    const c = this.filmOffset;
    c !== 0 && (s += (e * c) / this.getFilmWidth()),
      this.projectionMatrix.makePerspective(s, s + i, t, t - n, e, this.far, this.coordinateSystem),
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return (
      (t.object.fov = this.fov),
      (t.object.zoom = this.zoom),
      (t.object.near = this.near),
      (t.object.far = this.far),
      (t.object.focus = this.focus),
      (t.object.aspect = this.aspect),
      this.view !== null && (t.object.view = Object.assign({}, this.view)),
      (t.object.filmGauge = this.filmGauge),
      (t.object.filmOffset = this.filmOffset),
      t
    );
  }
}
const Qs = -90,
  $s = 1;
class qv extends Rt {
  constructor(e, t, n) {
    super(),
      (this.type = "CubeCamera"),
      (this.renderTarget = n),
      (this.coordinateSystem = null),
      (this.activeMipmapLevel = 0);
    const i = new gn(Qs, $s, e, t);
    (i.layers = this.layers), this.add(i);
    const s = new gn(Qs, $s, e, t);
    (s.layers = this.layers), this.add(s);
    const l = new gn(Qs, $s, e, t);
    (l.layers = this.layers), this.add(l);
    const c = new gn(Qs, $s, e, t);
    (c.layers = this.layers), this.add(c);
    const u = new gn(Qs, $s, e, t);
    (u.layers = this.layers), this.add(u);
    const h = new gn(Qs, $s, e, t);
    (h.layers = this.layers), this.add(h);
  }
  updateCoordinateSystem() {
    const e = this.coordinateSystem,
      t = this.children.concat(),
      [n, i, s, l, c, u] = t;
    for (const h of t) this.remove(h);
    if (e === Bi)
      n.up.set(0, 1, 0),
        n.lookAt(1, 0, 0),
        i.up.set(0, 1, 0),
        i.lookAt(-1, 0, 0),
        s.up.set(0, 0, -1),
        s.lookAt(0, 1, 0),
        l.up.set(0, 0, 1),
        l.lookAt(0, -1, 0),
        c.up.set(0, 1, 0),
        c.lookAt(0, 0, 1),
        u.up.set(0, 1, 0),
        u.lookAt(0, 0, -1);
    else if (e === Ca)
      n.up.set(0, -1, 0),
        n.lookAt(-1, 0, 0),
        i.up.set(0, -1, 0),
        i.lookAt(1, 0, 0),
        s.up.set(0, 0, 1),
        s.lookAt(0, 1, 0),
        l.up.set(0, 0, -1),
        l.lookAt(0, -1, 0),
        c.up.set(0, -1, 0),
        c.lookAt(0, 0, 1),
        u.up.set(0, -1, 0),
        u.lookAt(0, 0, -1);
    else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
    for (const h of t) this.add(h), h.updateMatrixWorld();
  }
  update(e, t) {
    this.parent === null && this.updateMatrixWorld();
    const { renderTarget: n, activeMipmapLevel: i } = this;
    this.coordinateSystem !== e.coordinateSystem &&
      ((this.coordinateSystem = e.coordinateSystem), this.updateCoordinateSystem());
    const [s, l, c, u, h, d] = this.children,
      p = e.getRenderTarget(),
      m = e.getActiveCubeFace(),
      v = e.getActiveMipmapLevel(),
      x = e.xr.enabled;
    e.xr.enabled = !1;
    const M = n.texture.generateMipmaps;
    (n.texture.generateMipmaps = !1),
      e.setRenderTarget(n, 0, i),
      e.render(t, s),
      e.setRenderTarget(n, 1, i),
      e.render(t, l),
      e.setRenderTarget(n, 2, i),
      e.render(t, c),
      e.setRenderTarget(n, 3, i),
      e.render(t, u),
      e.setRenderTarget(n, 4, i),
      e.render(t, h),
      (n.texture.generateMipmaps = M),
      e.setRenderTarget(n, 5, i),
      e.render(t, d),
      e.setRenderTarget(p, m, v),
      (e.xr.enabled = x),
      (n.texture.needsPMREMUpdate = !0);
  }
}
class Ha extends Kt {
  constructor(e, t, n, i, s, l, c, u, h, d) {
    (e = e !== void 0 ? e : []),
      (t = t !== void 0 ? t : lr),
      super(e, t, n, i, s, l, c, u, h, d),
      (this.isCubeTexture = !0),
      (this.flipY = !1);
  }
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class Zv extends wi {
  constructor(e = 1, t = {}) {
    super(e, e, t), (this.isWebGLCubeRenderTarget = !0);
    const n = { width: e, height: e, depth: 1 },
      i = [n, n, n, n, n, n];
    (this.texture = new Ha(
      i,
      t.mapping,
      t.wrapS,
      t.wrapT,
      t.magFilter,
      t.minFilter,
      t.format,
      t.type,
      t.anisotropy,
      t.colorSpace
    )),
      (this.texture.isRenderTargetTexture = !0),
      (this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1),
      (this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : an);
  }
  fromEquirectangularTexture(e, t) {
    (this.texture.type = t.type),
      (this.texture.colorSpace = t.colorSpace),
      (this.texture.generateMipmaps = t.generateMipmaps),
      (this.texture.minFilter = t.minFilter),
      (this.texture.magFilter = t.magFilter);
    const n = {
        uniforms: { tEquirect: { value: null } },
        vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
        fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`,
      },
      i = new Es(5, 5, 5),
      s = new Ei({
        name: "CubemapFromEquirect",
        uniforms: yo(n.uniforms),
        vertexShader: n.vertexShader,
        fragmentShader: n.fragmentShader,
        side: Nn,
        blending: sr,
      });
    s.uniforms.tEquirect.value = t;
    const l = new rn(i, s),
      c = t.minFilter;
    return (
      t.minFilter === Oi && (t.minFilter = an),
      new qv(1, 10, this).update(e, l),
      (t.minFilter = c),
      l.geometry.dispose(),
      l.material.dispose(),
      this
    );
  }
  clear(e, t, n, i) {
    const s = e.getRenderTarget();
    for (let l = 0; l < 6; l++) e.setRenderTarget(this, l), e.clear(t, n, i);
    e.setRenderTarget(s);
  }
}
const Of = new N(),
  FS = new N(),
  OS = new dt();
class Rr {
  constructor(e = new N(1, 0, 0), t = 0) {
    (this.isPlane = !0), (this.normal = e), (this.constant = t);
  }
  set(e, t) {
    return this.normal.copy(e), (this.constant = t), this;
  }
  setComponents(e, t, n, i) {
    return this.normal.set(e, t, n), (this.constant = i), this;
  }
  setFromNormalAndCoplanarPoint(e, t) {
    return this.normal.copy(e), (this.constant = -t.dot(this.normal)), this;
  }
  setFromCoplanarPoints(e, t, n) {
    const i = Of.subVectors(n, t).cross(FS.subVectors(e, t)).normalize();
    return this.setFromNormalAndCoplanarPoint(i, e), this;
  }
  copy(e) {
    return this.normal.copy(e.normal), (this.constant = e.constant), this;
  }
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), (this.constant *= e), this;
  }
  negate() {
    return (this.constant *= -1), this.normal.negate(), this;
  }
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  intersectLine(e, t) {
    const n = e.delta(Of),
      i = this.normal.dot(n);
    if (i === 0) return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
    const s = -(e.start.dot(this.normal) + this.constant) / i;
    return s < 0 || s > 1 ? null : t.copy(e.start).addScaledVector(n, s);
  }
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start),
      n = this.distanceToPoint(e.end);
    return (t < 0 && n > 0) || (n < 0 && t > 0);
  }
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(e, t) {
    const n = t || OS.getNormalMatrix(e),
      i = this.coplanarPoint(Of).applyMatrix4(e),
      s = this.normal.applyMatrix3(n).normalize();
    return (this.constant = -i.dot(s)), this;
  }
  translate(e) {
    return (this.constant -= e.dot(this.normal)), this;
  }
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Kr = new bn(),
  dc = new N();
class Ga {
  constructor(e = new Rr(), t = new Rr(), n = new Rr(), i = new Rr(), s = new Rr(), l = new Rr()) {
    this.planes = [e, t, n, i, s, l];
  }
  set(e, t, n, i, s, l) {
    const c = this.planes;
    return c[0].copy(e), c[1].copy(t), c[2].copy(n), c[3].copy(i), c[4].copy(s), c[5].copy(l), this;
  }
  copy(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) t[n].copy(e.planes[n]);
    return this;
  }
  setFromProjectionMatrix(e, t = Bi) {
    const n = this.planes,
      i = e.elements,
      s = i[0],
      l = i[1],
      c = i[2],
      u = i[3],
      h = i[4],
      d = i[5],
      p = i[6],
      m = i[7],
      v = i[8],
      x = i[9],
      M = i[10],
      y = i[11],
      _ = i[12],
      w = i[13],
      E = i[14],
      A = i[15];
    if (
      (n[0].setComponents(u - s, m - h, y - v, A - _).normalize(),
      n[1].setComponents(u + s, m + h, y + v, A + _).normalize(),
      n[2].setComponents(u + l, m + d, y + x, A + w).normalize(),
      n[3].setComponents(u - l, m - d, y - x, A - w).normalize(),
      n[4].setComponents(u - c, m - p, y - M, A - E).normalize(),
      t === Bi)
    )
      n[5].setComponents(u + c, m + p, y + M, A + E).normalize();
    else if (t === Ca) n[5].setComponents(c, p, M, E).normalize();
    else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
    return this;
  }
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), Kr.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const t = e.geometry;
      t.boundingSphere === null && t.computeBoundingSphere(), Kr.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(Kr);
  }
  intersectsSprite(e) {
    return (
      Kr.center.set(0, 0, 0),
      (Kr.radius = 0.7071067811865476),
      Kr.applyMatrix4(e.matrixWorld),
      this.intersectsSphere(Kr)
    );
  }
  intersectsSphere(e) {
    const t = this.planes,
      n = e.center,
      i = -e.radius;
    for (let s = 0; s < 6; s++) if (t[s].distanceToPoint(n) < i) return !1;
    return !0;
  }
  intersectsBox(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      const i = t[n];
      if (
        ((dc.x = i.normal.x > 0 ? e.max.x : e.min.x),
        (dc.y = i.normal.y > 0 ? e.max.y : e.min.y),
        (dc.z = i.normal.z > 0 ? e.max.z : e.min.z),
        i.distanceToPoint(dc) < 0)
      )
        return !1;
    }
    return !0;
  }
  containsPoint(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) if (t[n].distanceToPoint(e) < 0) return !1;
    return !0;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
function Jv() {
  let r = null,
    e = !1,
    t = null,
    n = null;
  function i(s, l) {
    t(s, l), (n = r.requestAnimationFrame(i));
  }
  return {
    start: function () {
      e !== !0 && t !== null && ((n = r.requestAnimationFrame(i)), (e = !0));
    },
    stop: function () {
      r.cancelAnimationFrame(n), (e = !1);
    },
    setAnimationLoop: function (s) {
      t = s;
    },
    setContext: function (s) {
      r = s;
    },
  };
}
function BS(r) {
  const e = new WeakMap();
  function t(c, u) {
    const h = c.array,
      d = c.usage,
      p = h.byteLength,
      m = r.createBuffer();
    r.bindBuffer(u, m), r.bufferData(u, h, d), c.onUploadCallback();
    let v;
    if (h instanceof Float32Array) v = r.FLOAT;
    else if (h instanceof Uint16Array) c.isFloat16BufferAttribute ? (v = r.HALF_FLOAT) : (v = r.UNSIGNED_SHORT);
    else if (h instanceof Int16Array) v = r.SHORT;
    else if (h instanceof Uint32Array) v = r.UNSIGNED_INT;
    else if (h instanceof Int32Array) v = r.INT;
    else if (h instanceof Int8Array) v = r.BYTE;
    else if (h instanceof Uint8Array) v = r.UNSIGNED_BYTE;
    else if (h instanceof Uint8ClampedArray) v = r.UNSIGNED_BYTE;
    else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + h);
    return { buffer: m, type: v, bytesPerElement: h.BYTES_PER_ELEMENT, version: c.version, size: p };
  }
  function n(c, u, h) {
    const d = u.array,
      p = u.updateRanges;
    if ((r.bindBuffer(h, c), p.length === 0)) r.bufferSubData(h, 0, d);
    else {
      p.sort((v, x) => v.start - x.start);
      let m = 0;
      for (let v = 1; v < p.length; v++) {
        const x = p[m],
          M = p[v];
        M.start <= x.start + x.count + 1
          ? (x.count = Math.max(x.count, M.start + M.count - x.start))
          : (++m, (p[m] = M));
      }
      p.length = m + 1;
      for (let v = 0, x = p.length; v < x; v++) {
        const M = p[v];
        r.bufferSubData(h, M.start * d.BYTES_PER_ELEMENT, d, M.start, M.count);
      }
      u.clearUpdateRanges();
    }
    u.onUploadCallback();
  }
  function i(c) {
    return c.isInterleavedBufferAttribute && (c = c.data), e.get(c);
  }
  function s(c) {
    c.isInterleavedBufferAttribute && (c = c.data);
    const u = e.get(c);
    u && (r.deleteBuffer(u.buffer), e.delete(c));
  }
  function l(c, u) {
    if ((c.isInterleavedBufferAttribute && (c = c.data), c.isGLBufferAttribute)) {
      const d = e.get(c);
      (!d || d.version < c.version) &&
        e.set(c, { buffer: c.buffer, type: c.type, bytesPerElement: c.elementSize, version: c.version });
      return;
    }
    const h = e.get(c);
    if (h === void 0) e.set(c, t(c, u));
    else if (h.version < c.version) {
      if (h.size !== c.array.byteLength)
        throw new Error(
          "THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported."
        );
      n(h.buffer, c, u), (h.version = c.version);
    }
  }
  return { get: i, remove: s, update: l };
}
class Ao extends vt {
  constructor(e = 1, t = 1, n = 1, i = 1) {
    super(),
      (this.type = "PlaneGeometry"),
      (this.parameters = { width: e, height: t, widthSegments: n, heightSegments: i });
    const s = e / 2,
      l = t / 2,
      c = Math.floor(n),
      u = Math.floor(i),
      h = c + 1,
      d = u + 1,
      p = e / c,
      m = t / u,
      v = [],
      x = [],
      M = [],
      y = [];
    for (let _ = 0; _ < d; _++) {
      const w = _ * m - l;
      for (let E = 0; E < h; E++) {
        const A = E * p - s;
        x.push(A, -w, 0), M.push(0, 0, 1), y.push(E / c), y.push(1 - _ / u);
      }
    }
    for (let _ = 0; _ < u; _++)
      for (let w = 0; w < c; w++) {
        const E = w + h * _,
          A = w + h * (_ + 1),
          O = w + 1 + h * (_ + 1),
          P = w + 1 + h * _;
        v.push(E, A, P), v.push(A, O, P);
      }
    this.setIndex(v),
      this.setAttribute("position", new Xe(x, 3)),
      this.setAttribute("normal", new Xe(M, 3)),
      this.setAttribute("uv", new Xe(y, 2));
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  static fromJSON(e) {
    return new Ao(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
var zS = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,
  kS = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,
  VS = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,
  HS = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,
  GS = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,
  WS = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,
  XS = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,
  YS = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,
  qS = `#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,
  ZS = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,
  JS = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,
  KS = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,
  jS = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,
  QS = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,
  $S = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,
  eM = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,
  tM = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,
  nM = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,
  iM = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,
  rM = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,
  sM = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,
  oM = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,
  aM = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,
  lM = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,
  cM = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,
  uM = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,
  hM = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,
  fM = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,
  dM = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,
  pM = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,
  mM = "gl_FragColor = linearToOutputTexel( gl_FragColor );",
  gM = `vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,
  vM = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,
  _M = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,
  xM = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,
  yM = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,
  SM = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,
  MM = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,
  wM = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`,
  EM = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,
  TM = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,
  AM = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,
  bM = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,
  CM = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,
  RM = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,
  PM = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,
  IM = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,
  LM = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,
  DM = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,
  UM = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,
  NM = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,
  FM = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,
  OM = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,
  BM = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,
  zM = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,
  kM = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,
  VM = `#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,
  HM = `#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,
  GM = `#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,
  WM = `#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,
  XM = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,
  YM = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`,
  qM = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,
  ZM = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,
  JM = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,
  KM = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,
  jM = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,
  QM = `#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,
  $M = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,
  e1 = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,
  t1 = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,
  n1 = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,
  i1 = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,
  r1 = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,
  s1 = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,
  o1 = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,
  a1 = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,
  l1 = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,
  c1 = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,
  u1 = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,
  h1 = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,
  f1 = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,
  d1 = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,
  p1 = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,
  m1 = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,
  g1 = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,
  v1 = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,
  _1 = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,
  x1 = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,
  y1 = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,
  S1 = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,
  M1 = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,
  w1 = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,
  E1 = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,
  T1 = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,
  A1 = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,
  b1 = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,
  C1 = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,
  R1 = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,
  P1 = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,
  I1 = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,
  L1 = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,
  D1 = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
		
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
		
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		
		#else
		
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,
  U1 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,
  N1 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,
  F1 = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,
  O1 = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const B1 = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,
  z1 = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,
  k1 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,
  V1 = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,
  H1 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,
  G1 = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,
  W1 = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,
  X1 = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,
  Y1 = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,
  q1 = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,
  Z1 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,
  J1 = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,
  K1 = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,
  j1 = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,
  Q1 = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,
  $1 = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
  ew = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,
  tw = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
  nw = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,
  iw = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
  rw = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,
  sw = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,
  ow = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,
  aw = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
  lw = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,
  cw = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
  uw = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,
  hw = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
  fw = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,
  dw = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,
  pw = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,
  mw = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,
  gw = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,
  vw = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,
  gt = {
    alphahash_fragment: zS,
    alphahash_pars_fragment: kS,
    alphamap_fragment: VS,
    alphamap_pars_fragment: HS,
    alphatest_fragment: GS,
    alphatest_pars_fragment: WS,
    aomap_fragment: XS,
    aomap_pars_fragment: YS,
    batching_pars_vertex: qS,
    batching_vertex: ZS,
    begin_vertex: JS,
    beginnormal_vertex: KS,
    bsdfs: jS,
    iridescence_fragment: QS,
    bumpmap_pars_fragment: $S,
    clipping_planes_fragment: eM,
    clipping_planes_pars_fragment: tM,
    clipping_planes_pars_vertex: nM,
    clipping_planes_vertex: iM,
    color_fragment: rM,
    color_pars_fragment: sM,
    color_pars_vertex: oM,
    color_vertex: aM,
    common: lM,
    cube_uv_reflection_fragment: cM,
    defaultnormal_vertex: uM,
    displacementmap_pars_vertex: hM,
    displacementmap_vertex: fM,
    emissivemap_fragment: dM,
    emissivemap_pars_fragment: pM,
    colorspace_fragment: mM,
    colorspace_pars_fragment: gM,
    envmap_fragment: vM,
    envmap_common_pars_fragment: _M,
    envmap_pars_fragment: xM,
    envmap_pars_vertex: yM,
    envmap_physical_pars_fragment: IM,
    envmap_vertex: SM,
    fog_vertex: MM,
    fog_pars_vertex: wM,
    fog_fragment: EM,
    fog_pars_fragment: TM,
    gradientmap_pars_fragment: AM,
    lightmap_pars_fragment: bM,
    lights_lambert_fragment: CM,
    lights_lambert_pars_fragment: RM,
    lights_pars_begin: PM,
    lights_toon_fragment: LM,
    lights_toon_pars_fragment: DM,
    lights_phong_fragment: UM,
    lights_phong_pars_fragment: NM,
    lights_physical_fragment: FM,
    lights_physical_pars_fragment: OM,
    lights_fragment_begin: BM,
    lights_fragment_maps: zM,
    lights_fragment_end: kM,
    logdepthbuf_fragment: VM,
    logdepthbuf_pars_fragment: HM,
    logdepthbuf_pars_vertex: GM,
    logdepthbuf_vertex: WM,
    map_fragment: XM,
    map_pars_fragment: YM,
    map_particle_fragment: qM,
    map_particle_pars_fragment: ZM,
    metalnessmap_fragment: JM,
    metalnessmap_pars_fragment: KM,
    morphinstance_vertex: jM,
    morphcolor_vertex: QM,
    morphnormal_vertex: $M,
    morphtarget_pars_vertex: e1,
    morphtarget_vertex: t1,
    normal_fragment_begin: n1,
    normal_fragment_maps: i1,
    normal_pars_fragment: r1,
    normal_pars_vertex: s1,
    normal_vertex: o1,
    normalmap_pars_fragment: a1,
    clearcoat_normal_fragment_begin: l1,
    clearcoat_normal_fragment_maps: c1,
    clearcoat_pars_fragment: u1,
    iridescence_pars_fragment: h1,
    opaque_fragment: f1,
    packing: d1,
    premultiplied_alpha_fragment: p1,
    project_vertex: m1,
    dithering_fragment: g1,
    dithering_pars_fragment: v1,
    roughnessmap_fragment: _1,
    roughnessmap_pars_fragment: x1,
    shadowmap_pars_fragment: y1,
    shadowmap_pars_vertex: S1,
    shadowmap_vertex: M1,
    shadowmask_pars_fragment: w1,
    skinbase_vertex: E1,
    skinning_pars_vertex: T1,
    skinning_vertex: A1,
    skinnormal_vertex: b1,
    specularmap_fragment: C1,
    specularmap_pars_fragment: R1,
    tonemapping_fragment: P1,
    tonemapping_pars_fragment: I1,
    transmission_fragment: L1,
    transmission_pars_fragment: D1,
    uv_pars_fragment: U1,
    uv_pars_vertex: N1,
    uv_vertex: F1,
    worldpos_vertex: O1,
    background_vert: B1,
    background_frag: z1,
    backgroundCube_vert: k1,
    backgroundCube_frag: V1,
    cube_vert: H1,
    cube_frag: G1,
    depth_vert: W1,
    depth_frag: X1,
    distanceRGBA_vert: Y1,
    distanceRGBA_frag: q1,
    equirect_vert: Z1,
    equirect_frag: J1,
    linedashed_vert: K1,
    linedashed_frag: j1,
    meshbasic_vert: Q1,
    meshbasic_frag: $1,
    meshlambert_vert: ew,
    meshlambert_frag: tw,
    meshmatcap_vert: nw,
    meshmatcap_frag: iw,
    meshnormal_vert: rw,
    meshnormal_frag: sw,
    meshphong_vert: ow,
    meshphong_frag: aw,
    meshphysical_vert: lw,
    meshphysical_frag: cw,
    meshtoon_vert: uw,
    meshtoon_frag: hw,
    points_vert: fw,
    points_frag: dw,
    shadow_vert: pw,
    shadow_frag: mw,
    sprite_vert: gw,
    sprite_frag: vw,
  },
  we = {
    common: {
      diffuse: { value: new Ne(16777215) },
      opacity: { value: 1 },
      map: { value: null },
      mapTransform: { value: new dt() },
      alphaMap: { value: null },
      alphaMapTransform: { value: new dt() },
      alphaTest: { value: 0 },
    },
    specularmap: { specularMap: { value: null }, specularMapTransform: { value: new dt() } },
    envmap: {
      envMap: { value: null },
      envMapRotation: { value: new dt() },
      flipEnvMap: { value: -1 },
      reflectivity: { value: 1 },
      ior: { value: 1.5 },
      refractionRatio: { value: 0.98 },
    },
    aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 }, aoMapTransform: { value: new dt() } },
    lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 }, lightMapTransform: { value: new dt() } },
    bumpmap: { bumpMap: { value: null }, bumpMapTransform: { value: new dt() }, bumpScale: { value: 1 } },
    normalmap: {
      normalMap: { value: null },
      normalMapTransform: { value: new dt() },
      normalScale: { value: new fe(1, 1) },
    },
    displacementmap: {
      displacementMap: { value: null },
      displacementMapTransform: { value: new dt() },
      displacementScale: { value: 1 },
      displacementBias: { value: 0 },
    },
    emissivemap: { emissiveMap: { value: null }, emissiveMapTransform: { value: new dt() } },
    metalnessmap: { metalnessMap: { value: null }, metalnessMapTransform: { value: new dt() } },
    roughnessmap: { roughnessMap: { value: null }, roughnessMapTransform: { value: new dt() } },
    gradientmap: { gradientMap: { value: null } },
    fog: {
      fogDensity: { value: 25e-5 },
      fogNear: { value: 1 },
      fogFar: { value: 2e3 },
      fogColor: { value: new Ne(16777215) },
    },
    lights: {
      ambientLightColor: { value: [] },
      lightProbe: { value: [] },
      directionalLights: { value: [], properties: { direction: {}, color: {} } },
      directionalLightShadows: {
        value: [],
        properties: { shadowIntensity: 1, shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} },
      },
      directionalShadowMap: { value: [] },
      directionalShadowMatrix: { value: [] },
      spotLights: {
        value: [],
        properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {} },
      },
      spotLightShadows: {
        value: [],
        properties: { shadowIntensity: 1, shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} },
      },
      spotLightMap: { value: [] },
      spotShadowMap: { value: [] },
      spotLightMatrix: { value: [] },
      pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {} } },
      pointLightShadows: {
        value: [],
        properties: {
          shadowIntensity: 1,
          shadowBias: {},
          shadowNormalBias: {},
          shadowRadius: {},
          shadowMapSize: {},
          shadowCameraNear: {},
          shadowCameraFar: {},
        },
      },
      pointShadowMap: { value: [] },
      pointShadowMatrix: { value: [] },
      hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } },
      rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } },
      ltc_1: { value: null },
      ltc_2: { value: null },
    },
    points: {
      diffuse: { value: new Ne(16777215) },
      opacity: { value: 1 },
      size: { value: 1 },
      scale: { value: 1 },
      map: { value: null },
      alphaMap: { value: null },
      alphaMapTransform: { value: new dt() },
      alphaTest: { value: 0 },
      uvTransform: { value: new dt() },
    },
    sprite: {
      diffuse: { value: new Ne(16777215) },
      opacity: { value: 1 },
      center: { value: new fe(0.5, 0.5) },
      rotation: { value: 0 },
      map: { value: null },
      mapTransform: { value: new dt() },
      alphaMap: { value: null },
      alphaMapTransform: { value: new dt() },
      alphaTest: { value: 0 },
    },
  },
  yi = {
    basic: {
      uniforms: Dn([we.common, we.specularmap, we.envmap, we.aomap, we.lightmap, we.fog]),
      vertexShader: gt.meshbasic_vert,
      fragmentShader: gt.meshbasic_frag,
    },
    lambert: {
      uniforms: Dn([
        we.common,
        we.specularmap,
        we.envmap,
        we.aomap,
        we.lightmap,
        we.emissivemap,
        we.bumpmap,
        we.normalmap,
        we.displacementmap,
        we.fog,
        we.lights,
        { emissive: { value: new Ne(0) } },
      ]),
      vertexShader: gt.meshlambert_vert,
      fragmentShader: gt.meshlambert_frag,
    },
    phong: {
      uniforms: Dn([
        we.common,
        we.specularmap,
        we.envmap,
        we.aomap,
        we.lightmap,
        we.emissivemap,
        we.bumpmap,
        we.normalmap,
        we.displacementmap,
        we.fog,
        we.lights,
        { emissive: { value: new Ne(0) }, specular: { value: new Ne(1118481) }, shininess: { value: 30 } },
      ]),
      vertexShader: gt.meshphong_vert,
      fragmentShader: gt.meshphong_frag,
    },
    standard: {
      uniforms: Dn([
        we.common,
        we.envmap,
        we.aomap,
        we.lightmap,
        we.emissivemap,
        we.bumpmap,
        we.normalmap,
        we.displacementmap,
        we.roughnessmap,
        we.metalnessmap,
        we.fog,
        we.lights,
        {
          emissive: { value: new Ne(0) },
          roughness: { value: 1 },
          metalness: { value: 0 },
          envMapIntensity: { value: 1 },
        },
      ]),
      vertexShader: gt.meshphysical_vert,
      fragmentShader: gt.meshphysical_frag,
    },
    toon: {
      uniforms: Dn([
        we.common,
        we.aomap,
        we.lightmap,
        we.emissivemap,
        we.bumpmap,
        we.normalmap,
        we.displacementmap,
        we.gradientmap,
        we.fog,
        we.lights,
        { emissive: { value: new Ne(0) } },
      ]),
      vertexShader: gt.meshtoon_vert,
      fragmentShader: gt.meshtoon_frag,
    },
    matcap: {
      uniforms: Dn([we.common, we.bumpmap, we.normalmap, we.displacementmap, we.fog, { matcap: { value: null } }]),
      vertexShader: gt.meshmatcap_vert,
      fragmentShader: gt.meshmatcap_frag,
    },
    points: { uniforms: Dn([we.points, we.fog]), vertexShader: gt.points_vert, fragmentShader: gt.points_frag },
    dashed: {
      uniforms: Dn([we.common, we.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]),
      vertexShader: gt.linedashed_vert,
      fragmentShader: gt.linedashed_frag,
    },
    depth: {
      uniforms: Dn([we.common, we.displacementmap]),
      vertexShader: gt.depth_vert,
      fragmentShader: gt.depth_frag,
    },
    normal: {
      uniforms: Dn([we.common, we.bumpmap, we.normalmap, we.displacementmap, { opacity: { value: 1 } }]),
      vertexShader: gt.meshnormal_vert,
      fragmentShader: gt.meshnormal_frag,
    },
    sprite: { uniforms: Dn([we.sprite, we.fog]), vertexShader: gt.sprite_vert, fragmentShader: gt.sprite_frag },
    background: {
      uniforms: { uvTransform: { value: new dt() }, t2D: { value: null }, backgroundIntensity: { value: 1 } },
      vertexShader: gt.background_vert,
      fragmentShader: gt.background_frag,
    },
    backgroundCube: {
      uniforms: {
        envMap: { value: null },
        flipEnvMap: { value: -1 },
        backgroundBlurriness: { value: 0 },
        backgroundIntensity: { value: 1 },
        backgroundRotation: { value: new dt() },
      },
      vertexShader: gt.backgroundCube_vert,
      fragmentShader: gt.backgroundCube_frag,
    },
    cube: {
      uniforms: { tCube: { value: null }, tFlip: { value: -1 }, opacity: { value: 1 } },
      vertexShader: gt.cube_vert,
      fragmentShader: gt.cube_frag,
    },
    equirect: {
      uniforms: { tEquirect: { value: null } },
      vertexShader: gt.equirect_vert,
      fragmentShader: gt.equirect_frag,
    },
    distanceRGBA: {
      uniforms: Dn([
        we.common,
        we.displacementmap,
        { referencePosition: { value: new N() }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } },
      ]),
      vertexShader: gt.distanceRGBA_vert,
      fragmentShader: gt.distanceRGBA_frag,
    },
    shadow: {
      uniforms: Dn([we.lights, we.fog, { color: { value: new Ne(0) }, opacity: { value: 1 } }]),
      vertexShader: gt.shadow_vert,
      fragmentShader: gt.shadow_frag,
    },
  };
yi.physical = {
  uniforms: Dn([
    yi.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: new dt() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: new dt() },
      clearcoatNormalScale: { value: new fe(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: new dt() },
      dispersion: { value: 0 },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: new dt() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: new dt() },
      sheen: { value: 0 },
      sheenColor: { value: new Ne(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: new dt() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: new dt() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: new dt() },
      transmissionSamplerSize: { value: new fe() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: new dt() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: new Ne(0) },
      specularColor: { value: new Ne(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: new dt() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: new dt() },
      anisotropyVector: { value: new fe() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: new dt() },
    },
  ]),
  vertexShader: gt.meshphysical_vert,
  fragmentShader: gt.meshphysical_frag,
};
const pc = { r: 0, b: 0, g: 0 },
  jr = new ni(),
  _w = new st();
function xw(r, e, t, n, i, s, l) {
  const c = new Ne(0);
  let u = s === !0 ? 0 : 1,
    h,
    d,
    p = null,
    m = 0,
    v = null;
  function x(w) {
    let E = w.isScene === !0 ? w.background : null;
    return E && E.isTexture && (E = (w.backgroundBlurriness > 0 ? t : e).get(E)), E;
  }
  function M(w) {
    let E = !1;
    const A = x(w);
    A === null ? _(c, u) : A && A.isColor && (_(A, 1), (E = !0));
    const O = r.xr.getEnvironmentBlendMode();
    O === "additive"
      ? n.buffers.color.setClear(0, 0, 0, 1, l)
      : O === "alpha-blend" && n.buffers.color.setClear(0, 0, 0, 0, l),
      (r.autoClear || E) &&
        (n.buffers.depth.setTest(!0),
        n.buffers.depth.setMask(!0),
        n.buffers.color.setMask(!0),
        r.clear(r.autoClearColor, r.autoClearDepth, r.autoClearStencil));
  }
  function y(w, E) {
    const A = x(E);
    A && (A.isCubeTexture || A.mapping === wo)
      ? (d === void 0 &&
          ((d = new rn(
            new Es(1, 1, 1),
            new Ei({
              name: "BackgroundCubeMaterial",
              uniforms: yo(yi.backgroundCube.uniforms),
              vertexShader: yi.backgroundCube.vertexShader,
              fragmentShader: yi.backgroundCube.fragmentShader,
              side: Nn,
              depthTest: !1,
              depthWrite: !1,
              fog: !1,
            })
          )),
          d.geometry.deleteAttribute("normal"),
          d.geometry.deleteAttribute("uv"),
          (d.onBeforeRender = function (O, P, L) {
            this.matrixWorld.copyPosition(L.matrixWorld);
          }),
          Object.defineProperty(d.material, "envMap", {
            get: function () {
              return this.uniforms.envMap.value;
            },
          }),
          i.update(d)),
        jr.copy(E.backgroundRotation),
        (jr.x *= -1),
        (jr.y *= -1),
        (jr.z *= -1),
        A.isCubeTexture && A.isRenderTargetTexture === !1 && ((jr.y *= -1), (jr.z *= -1)),
        (d.material.uniforms.envMap.value = A),
        (d.material.uniforms.flipEnvMap.value = A.isCubeTexture && A.isRenderTargetTexture === !1 ? -1 : 1),
        (d.material.uniforms.backgroundBlurriness.value = E.backgroundBlurriness),
        (d.material.uniforms.backgroundIntensity.value = E.backgroundIntensity),
        d.material.uniforms.backgroundRotation.value.setFromMatrix4(_w.makeRotationFromEuler(jr)),
        (d.material.toneMapped = At.getTransfer(A.colorSpace) !== Ut),
        (p !== A || m !== A.version || v !== r.toneMapping) &&
          ((d.material.needsUpdate = !0), (p = A), (m = A.version), (v = r.toneMapping)),
        d.layers.enableAll(),
        w.unshift(d, d.geometry, d.material, 0, 0, null))
      : A &&
        A.isTexture &&
        (h === void 0 &&
          ((h = new rn(
            new Ao(2, 2),
            new Ei({
              name: "BackgroundMaterial",
              uniforms: yo(yi.background.uniforms),
              vertexShader: yi.background.vertexShader,
              fragmentShader: yi.background.fragmentShader,
              side: ar,
              depthTest: !1,
              depthWrite: !1,
              fog: !1,
            })
          )),
          h.geometry.deleteAttribute("normal"),
          Object.defineProperty(h.material, "map", {
            get: function () {
              return this.uniforms.t2D.value;
            },
          }),
          i.update(h)),
        (h.material.uniforms.t2D.value = A),
        (h.material.uniforms.backgroundIntensity.value = E.backgroundIntensity),
        (h.material.toneMapped = At.getTransfer(A.colorSpace) !== Ut),
        A.matrixAutoUpdate === !0 && A.updateMatrix(),
        h.material.uniforms.uvTransform.value.copy(A.matrix),
        (p !== A || m !== A.version || v !== r.toneMapping) &&
          ((h.material.needsUpdate = !0), (p = A), (m = A.version), (v = r.toneMapping)),
        h.layers.enableAll(),
        w.unshift(h, h.geometry, h.material, 0, 0, null));
  }
  function _(w, E) {
    w.getRGB(pc, Xv(r)), n.buffers.color.setClear(pc.r, pc.g, pc.b, E, l);
  }
  return {
    getClearColor: function () {
      return c;
    },
    setClearColor: function (w, E = 1) {
      c.set(w), (u = E), _(c, u);
    },
    getClearAlpha: function () {
      return u;
    },
    setClearAlpha: function (w) {
      (u = w), _(c, u);
    },
    render: M,
    addToRenderList: y,
  };
}
function yw(r, e) {
  const t = r.getParameter(r.MAX_VERTEX_ATTRIBS),
    n = {},
    i = m(null);
  let s = i,
    l = !1;
  function c(b, D, Y, q, K) {
    let ae = !1;
    const j = p(q, Y, D);
    s !== j && ((s = j), h(s.object)),
      (ae = v(b, q, Y, K)),
      ae && x(b, q, Y, K),
      K !== null && e.update(K, r.ELEMENT_ARRAY_BUFFER),
      (ae || l) && ((l = !1), A(b, D, Y, q), K !== null && r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, e.get(K).buffer));
  }
  function u() {
    return r.createVertexArray();
  }
  function h(b) {
    return r.bindVertexArray(b);
  }
  function d(b) {
    return r.deleteVertexArray(b);
  }
  function p(b, D, Y) {
    const q = Y.wireframe === !0;
    let K = n[b.id];
    K === void 0 && ((K = {}), (n[b.id] = K));
    let ae = K[D.id];
    ae === void 0 && ((ae = {}), (K[D.id] = ae));
    let j = ae[q];
    return j === void 0 && ((j = m(u())), (ae[q] = j)), j;
  }
  function m(b) {
    const D = [],
      Y = [],
      q = [];
    for (let K = 0; K < t; K++) (D[K] = 0), (Y[K] = 0), (q[K] = 0);
    return {
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: D,
      enabledAttributes: Y,
      attributeDivisors: q,
      object: b,
      attributes: {},
      index: null,
    };
  }
  function v(b, D, Y, q) {
    const K = s.attributes,
      ae = D.attributes;
    let j = 0;
    const me = Y.getAttributes();
    for (const k in me)
      if (me[k].location >= 0) {
        const te = K[k];
        let ce = ae[k];
        if (
          (ce === void 0 &&
            (k === "instanceMatrix" && b.instanceMatrix && (ce = b.instanceMatrix),
            k === "instanceColor" && b.instanceColor && (ce = b.instanceColor)),
          te === void 0 || te.attribute !== ce || (ce && te.data !== ce.data))
        )
          return !0;
        j++;
      }
    return s.attributesNum !== j || s.index !== q;
  }
  function x(b, D, Y, q) {
    const K = {},
      ae = D.attributes;
    let j = 0;
    const me = Y.getAttributes();
    for (const k in me)
      if (me[k].location >= 0) {
        let te = ae[k];
        te === void 0 &&
          (k === "instanceMatrix" && b.instanceMatrix && (te = b.instanceMatrix),
          k === "instanceColor" && b.instanceColor && (te = b.instanceColor));
        const ce = {};
        (ce.attribute = te), te && te.data && (ce.data = te.data), (K[k] = ce), j++;
      }
    (s.attributes = K), (s.attributesNum = j), (s.index = q);
  }
  function M() {
    const b = s.newAttributes;
    for (let D = 0, Y = b.length; D < Y; D++) b[D] = 0;
  }
  function y(b) {
    _(b, 0);
  }
  function _(b, D) {
    const Y = s.newAttributes,
      q = s.enabledAttributes,
      K = s.attributeDivisors;
    (Y[b] = 1),
      q[b] === 0 && (r.enableVertexAttribArray(b), (q[b] = 1)),
      K[b] !== D && (r.vertexAttribDivisor(b, D), (K[b] = D));
  }
  function w() {
    const b = s.newAttributes,
      D = s.enabledAttributes;
    for (let Y = 0, q = D.length; Y < q; Y++) D[Y] !== b[Y] && (r.disableVertexAttribArray(Y), (D[Y] = 0));
  }
  function E(b, D, Y, q, K, ae, j) {
    j === !0 ? r.vertexAttribIPointer(b, D, Y, K, ae) : r.vertexAttribPointer(b, D, Y, q, K, ae);
  }
  function A(b, D, Y, q) {
    M();
    const K = q.attributes,
      ae = Y.getAttributes(),
      j = D.defaultAttributeValues;
    for (const me in ae) {
      const k = ae[me];
      if (k.location >= 0) {
        let ne = K[me];
        if (
          (ne === void 0 &&
            (me === "instanceMatrix" && b.instanceMatrix && (ne = b.instanceMatrix),
            me === "instanceColor" && b.instanceColor && (ne = b.instanceColor)),
          ne !== void 0)
        ) {
          const te = ne.normalized,
            ce = ne.itemSize,
            Ce = e.get(ne);
          if (Ce === void 0) continue;
          const Ye = Ce.buffer,
            re = Ce.type,
            ge = Ce.bytesPerElement,
            De = re === r.INT || re === r.UNSIGNED_INT || ne.gpuType === Fu;
          if (ne.isInterleavedBufferAttribute) {
            const xe = ne.data,
              je = xe.stride,
              it = ne.offset;
            if (xe.isInstancedInterleavedBuffer) {
              for (let Qe = 0; Qe < k.locationSize; Qe++) _(k.location + Qe, xe.meshPerAttribute);
              b.isInstancedMesh !== !0 &&
                q._maxInstanceCount === void 0 &&
                (q._maxInstanceCount = xe.meshPerAttribute * xe.count);
            } else for (let Qe = 0; Qe < k.locationSize; Qe++) y(k.location + Qe);
            r.bindBuffer(r.ARRAY_BUFFER, Ye);
            for (let Qe = 0; Qe < k.locationSize; Qe++)
              E(k.location + Qe, ce / k.locationSize, re, te, je * ge, (it + (ce / k.locationSize) * Qe) * ge, De);
          } else {
            if (ne.isInstancedBufferAttribute) {
              for (let xe = 0; xe < k.locationSize; xe++) _(k.location + xe, ne.meshPerAttribute);
              b.isInstancedMesh !== !0 &&
                q._maxInstanceCount === void 0 &&
                (q._maxInstanceCount = ne.meshPerAttribute * ne.count);
            } else for (let xe = 0; xe < k.locationSize; xe++) y(k.location + xe);
            r.bindBuffer(r.ARRAY_BUFFER, Ye);
            for (let xe = 0; xe < k.locationSize; xe++)
              E(k.location + xe, ce / k.locationSize, re, te, ce * ge, (ce / k.locationSize) * xe * ge, De);
          }
        } else if (j !== void 0) {
          const te = j[me];
          if (te !== void 0)
            switch (te.length) {
              case 2:
                r.vertexAttrib2fv(k.location, te);
                break;
              case 3:
                r.vertexAttrib3fv(k.location, te);
                break;
              case 4:
                r.vertexAttrib4fv(k.location, te);
                break;
              default:
                r.vertexAttrib1fv(k.location, te);
            }
        }
      }
    }
    w();
  }
  function O() {
    F();
    for (const b in n) {
      const D = n[b];
      for (const Y in D) {
        const q = D[Y];
        for (const K in q) d(q[K].object), delete q[K];
        delete D[Y];
      }
      delete n[b];
    }
  }
  function P(b) {
    if (n[b.id] === void 0) return;
    const D = n[b.id];
    for (const Y in D) {
      const q = D[Y];
      for (const K in q) d(q[K].object), delete q[K];
      delete D[Y];
    }
    delete n[b.id];
  }
  function L(b) {
    for (const D in n) {
      const Y = n[D];
      if (Y[b.id] === void 0) continue;
      const q = Y[b.id];
      for (const K in q) d(q[K].object), delete q[K];
      delete Y[b.id];
    }
  }
  function F() {
    C(), (l = !0), s !== i && ((s = i), h(s.object));
  }
  function C() {
    (i.geometry = null), (i.program = null), (i.wireframe = !1);
  }
  return {
    setup: c,
    reset: F,
    resetDefaultState: C,
    dispose: O,
    releaseStatesOfGeometry: P,
    releaseStatesOfProgram: L,
    initAttributes: M,
    enableAttribute: y,
    disableUnusedAttributes: w,
  };
}
function Sw(r, e, t) {
  let n;
  function i(h) {
    n = h;
  }
  function s(h, d) {
    r.drawArrays(n, h, d), t.update(d, n, 1);
  }
  function l(h, d, p) {
    p !== 0 && (r.drawArraysInstanced(n, h, d, p), t.update(d, n, p));
  }
  function c(h, d, p) {
    if (p === 0) return;
    e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n, h, 0, d, 0, p);
    let v = 0;
    for (let x = 0; x < p; x++) v += d[x];
    t.update(v, n, 1);
  }
  function u(h, d, p, m) {
    if (p === 0) return;
    const v = e.get("WEBGL_multi_draw");
    if (v === null) for (let x = 0; x < h.length; x++) l(h[x], d[x], m[x]);
    else {
      v.multiDrawArraysInstancedWEBGL(n, h, 0, d, 0, m, 0, p);
      let x = 0;
      for (let M = 0; M < p; M++) x += d[M] * m[M];
      t.update(x, n, 1);
    }
  }
  (this.setMode = i),
    (this.render = s),
    (this.renderInstances = l),
    (this.renderMultiDraw = c),
    (this.renderMultiDrawInstances = u);
}
function Mw(r, e, t, n) {
  let i;
  function s() {
    if (i !== void 0) return i;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const L = e.get("EXT_texture_filter_anisotropic");
      i = r.getParameter(L.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else i = 0;
    return i;
  }
  function l(L) {
    return !(L !== An && n.convert(L) !== r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT));
  }
  function c(L) {
    const F = L === Eo && (e.has("EXT_color_buffer_half_float") || e.has("EXT_color_buffer_float"));
    return !(L !== Mi && n.convert(L) !== r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE) && L !== Yn && !F);
  }
  function u(L) {
    if (L === "highp") {
      if (
        r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.HIGH_FLOAT).precision > 0 &&
        r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.HIGH_FLOAT).precision > 0
      )
        return "highp";
      L = "mediump";
    }
    return L === "mediump" &&
      r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.MEDIUM_FLOAT).precision > 0 &&
      r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.MEDIUM_FLOAT).precision > 0
      ? "mediump"
      : "lowp";
  }
  let h = t.precision !== void 0 ? t.precision : "highp";
  const d = u(h);
  d !== h && (console.warn("THREE.WebGLRenderer:", h, "not supported, using", d, "instead."), (h = d));
  const p = t.logarithmicDepthBuffer === !0,
    m = t.reverseDepthBuffer === !0 && e.has("EXT_clip_control"),
    v = r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),
    x = r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
    M = r.getParameter(r.MAX_TEXTURE_SIZE),
    y = r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),
    _ = r.getParameter(r.MAX_VERTEX_ATTRIBS),
    w = r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),
    E = r.getParameter(r.MAX_VARYING_VECTORS),
    A = r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),
    O = x > 0,
    P = r.getParameter(r.MAX_SAMPLES);
  return {
    isWebGL2: !0,
    getMaxAnisotropy: s,
    getMaxPrecision: u,
    textureFormatReadable: l,
    textureTypeReadable: c,
    precision: h,
    logarithmicDepthBuffer: p,
    reverseDepthBuffer: m,
    maxTextures: v,
    maxVertexTextures: x,
    maxTextureSize: M,
    maxCubemapSize: y,
    maxAttributes: _,
    maxVertexUniforms: w,
    maxVaryings: E,
    maxFragmentUniforms: A,
    vertexTextures: O,
    maxSamples: P,
  };
}
function ww(r) {
  const e = this;
  let t = null,
    n = 0,
    i = !1,
    s = !1;
  const l = new Rr(),
    c = new dt(),
    u = { value: null, needsUpdate: !1 };
  (this.uniform = u),
    (this.numPlanes = 0),
    (this.numIntersection = 0),
    (this.init = function (p, m) {
      const v = p.length !== 0 || m || n !== 0 || i;
      return (i = m), (n = p.length), v;
    }),
    (this.beginShadows = function () {
      (s = !0), d(null);
    }),
    (this.endShadows = function () {
      s = !1;
    }),
    (this.setGlobalState = function (p, m) {
      t = d(p, m, 0);
    }),
    (this.setState = function (p, m, v) {
      const x = p.clippingPlanes,
        M = p.clipIntersection,
        y = p.clipShadows,
        _ = r.get(p);
      if (!i || x === null || x.length === 0 || (s && !y)) s ? d(null) : h();
      else {
        const w = s ? 0 : n,
          E = w * 4;
        let A = _.clippingState || null;
        (u.value = A), (A = d(x, m, E, v));
        for (let O = 0; O !== E; ++O) A[O] = t[O];
        (_.clippingState = A), (this.numIntersection = M ? this.numPlanes : 0), (this.numPlanes += w);
      }
    });
  function h() {
    u.value !== t && ((u.value = t), (u.needsUpdate = n > 0)), (e.numPlanes = n), (e.numIntersection = 0);
  }
  function d(p, m, v, x) {
    const M = p !== null ? p.length : 0;
    let y = null;
    if (M !== 0) {
      if (((y = u.value), x !== !0 || y === null)) {
        const _ = v + M * 4,
          w = m.matrixWorldInverse;
        c.getNormalMatrix(w), (y === null || y.length < _) && (y = new Float32Array(_));
        for (let E = 0, A = v; E !== M; ++E, A += 4)
          l.copy(p[E]).applyMatrix4(w, c), l.normal.toArray(y, A), (y[A + 3] = l.constant);
      }
      (u.value = y), (u.needsUpdate = !0);
    }
    return (e.numPlanes = M), (e.numIntersection = 0), y;
  }
}
function Ew(r) {
  let e = new WeakMap();
  function t(l, c) {
    return c === Sa ? (l.mapping = lr) : c === Ma && (l.mapping = Ir), l;
  }
  function n(l) {
    if (l && l.isTexture) {
      const c = l.mapping;
      if (c === Sa || c === Ma)
        if (e.has(l)) {
          const u = e.get(l).texture;
          return t(u, l.mapping);
        } else {
          const u = l.image;
          if (u && u.height > 0) {
            const h = new Zv(u.height);
            return (
              h.fromEquirectangularTexture(r, l), e.set(l, h), l.addEventListener("dispose", i), t(h.texture, l.mapping)
            );
          } else return null;
        }
    }
    return l;
  }
  function i(l) {
    const c = l.target;
    c.removeEventListener("dispose", i);
    const u = e.get(c);
    u !== void 0 && (e.delete(c), u.dispose());
  }
  function s() {
    e = new WeakMap();
  }
  return { get: n, dispose: s };
}
class Wa extends Va {
  constructor(e = -1, t = 1, n = 1, i = -1, s = 0.1, l = 2e3) {
    super(),
      (this.isOrthographicCamera = !0),
      (this.type = "OrthographicCamera"),
      (this.zoom = 1),
      (this.view = null),
      (this.left = e),
      (this.right = t),
      (this.top = n),
      (this.bottom = i),
      (this.near = s),
      (this.far = l),
      this.updateProjectionMatrix();
  }
  copy(e, t) {
    return (
      super.copy(e, t),
      (this.left = e.left),
      (this.right = e.right),
      (this.top = e.top),
      (this.bottom = e.bottom),
      (this.near = e.near),
      (this.far = e.far),
      (this.zoom = e.zoom),
      (this.view = e.view === null ? null : Object.assign({}, e.view)),
      this
    );
  }
  setViewOffset(e, t, n, i, s, l) {
    this.view === null &&
      (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }),
      (this.view.enabled = !0),
      (this.view.fullWidth = e),
      (this.view.fullHeight = t),
      (this.view.offsetX = n),
      (this.view.offsetY = i),
      (this.view.width = s),
      (this.view.height = l),
      this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom),
      t = (this.top - this.bottom) / (2 * this.zoom),
      n = (this.right + this.left) / 2,
      i = (this.top + this.bottom) / 2;
    let s = n - e,
      l = n + e,
      c = i + t,
      u = i - t;
    if (this.view !== null && this.view.enabled) {
      const h = (this.right - this.left) / this.view.fullWidth / this.zoom,
        d = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      (s += h * this.view.offsetX),
        (l = s + h * this.view.width),
        (c -= d * this.view.offsetY),
        (u = c - d * this.view.height);
    }
    this.projectionMatrix.makeOrthographic(s, l, c, u, this.near, this.far, this.coordinateSystem),
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return (
      (t.object.zoom = this.zoom),
      (t.object.left = this.left),
      (t.object.right = this.right),
      (t.object.top = this.top),
      (t.object.bottom = this.bottom),
      (t.object.near = this.near),
      (t.object.far = this.far),
      this.view !== null && (t.object.view = Object.assign({}, this.view)),
      t
    );
  }
}
const fo = 4,
  wg = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582],
  ls = 20,
  Bf = new Wa(),
  Eg = new Ne();
let zf = null,
  kf = 0,
  Vf = 0,
  Hf = !1;
const as = (1 + Math.sqrt(5)) / 2,
  eo = 1 / as,
  Tg = [
    new N(-as, eo, 0),
    new N(as, eo, 0),
    new N(-eo, 0, as),
    new N(eo, 0, as),
    new N(0, as, -eo),
    new N(0, as, eo),
    new N(-1, 1, -1),
    new N(1, 1, -1),
    new N(-1, 1, 1),
    new N(1, 1, 1),
  ];
class Sd {
  constructor(e) {
    (this._renderer = e),
      (this._pingPongRenderTarget = null),
      (this._lodMax = 0),
      (this._cubeSize = 0),
      (this._lodPlanes = []),
      (this._sizeLods = []),
      (this._sigmas = []),
      (this._blurMaterial = null),
      (this._cubemapMaterial = null),
      (this._equirectMaterial = null),
      this._compileMaterial(this._blurMaterial);
  }
  fromScene(e, t = 0, n = 0.1, i = 100) {
    (zf = this._renderer.getRenderTarget()),
      (kf = this._renderer.getActiveCubeFace()),
      (Vf = this._renderer.getActiveMipmapLevel()),
      (Hf = this._renderer.xr.enabled),
      (this._renderer.xr.enabled = !1),
      this._setSize(256);
    const s = this._allocateTargets();
    return (
      (s.depthBuffer = !0),
      this._sceneToCubeUV(e, n, i, s),
      t > 0 && this._blur(s, 0, 0, t),
      this._applyPMREM(s),
      this._cleanup(s),
      s
    );
  }
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  compileCubemapShader() {
    this._cubemapMaterial === null && ((this._cubemapMaterial = Cg()), this._compileMaterial(this._cubemapMaterial));
  }
  compileEquirectangularShader() {
    this._equirectMaterial === null && ((this._equirectMaterial = bg()), this._compileMaterial(this._equirectMaterial));
  }
  dispose() {
    this._dispose(),
      this._cubemapMaterial !== null && this._cubemapMaterial.dispose(),
      this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  _setSize(e) {
    (this._lodMax = Math.floor(Math.log2(e))), (this._cubeSize = Math.pow(2, this._lodMax));
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(),
      this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++) this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(zf, kf, Vf),
      (this._renderer.xr.enabled = Hf),
      (e.scissorTest = !1),
      mc(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    e.mapping === lr || e.mapping === Ir
      ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width)
      : this._setSize(e.image.width / 4),
      (zf = this._renderer.getRenderTarget()),
      (kf = this._renderer.getActiveCubeFace()),
      (Vf = this._renderer.getActiveMipmapLevel()),
      (Hf = this._renderer.xr.enabled),
      (this._renderer.xr.enabled = !1);
    const n = t || this._allocateTargets();
    return this._textureToCubeUV(e, n), this._applyPMREM(n), this._cleanup(n), n;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112),
      t = 4 * this._cubeSize,
      n = { magFilter: an, minFilter: an, generateMipmaps: !1, type: Eo, format: An, colorSpace: ws, depthBuffer: !1 },
      i = Ag(e, t, n);
    if (
      this._pingPongRenderTarget === null ||
      this._pingPongRenderTarget.width !== e ||
      this._pingPongRenderTarget.height !== t
    ) {
      this._pingPongRenderTarget !== null && this._dispose(), (this._pingPongRenderTarget = Ag(e, t, n));
      const { _lodMax: s } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = Tw(s)),
        (this._blurMaterial = Aw(s, e, t));
    }
    return i;
  }
  _compileMaterial(e) {
    const t = new rn(this._lodPlanes[0], e);
    this._renderer.compile(t, Bf);
  }
  _sceneToCubeUV(e, t, n, i) {
    const c = new gn(90, 1, t, n),
      u = [1, -1, 1, 1, 1, 1],
      h = [1, 1, 1, -1, -1, -1],
      d = this._renderer,
      p = d.autoClear,
      m = d.toneMapping;
    d.getClearColor(Eg), (d.toneMapping = zi), (d.autoClear = !1);
    const v = new Ur({ name: "PMREM.Background", side: Nn, depthWrite: !1, depthTest: !1 }),
      x = new rn(new Es(), v);
    let M = !1;
    const y = e.background;
    y ? y.isColor && (v.color.copy(y), (e.background = null), (M = !0)) : (v.color.copy(Eg), (M = !0));
    for (let _ = 0; _ < 6; _++) {
      const w = _ % 3;
      w === 0
        ? (c.up.set(0, u[_], 0), c.lookAt(h[_], 0, 0))
        : w === 1
          ? (c.up.set(0, 0, u[_]), c.lookAt(0, h[_], 0))
          : (c.up.set(0, u[_], 0), c.lookAt(0, 0, h[_]));
      const E = this._cubeSize;
      mc(i, w * E, _ > 2 ? E : 0, E, E), d.setRenderTarget(i), M && d.render(x, c), d.render(e, c);
    }
    x.geometry.dispose(), x.material.dispose(), (d.toneMapping = m), (d.autoClear = p), (e.background = y);
  }
  _textureToCubeUV(e, t) {
    const n = this._renderer,
      i = e.mapping === lr || e.mapping === Ir;
    i
      ? (this._cubemapMaterial === null && (this._cubemapMaterial = Cg()),
        (this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1))
      : this._equirectMaterial === null && (this._equirectMaterial = bg());
    const s = i ? this._cubemapMaterial : this._equirectMaterial,
      l = new rn(this._lodPlanes[0], s),
      c = s.uniforms;
    c.envMap.value = e;
    const u = this._cubeSize;
    mc(t, 0, 0, 3 * u, 2 * u), n.setRenderTarget(t), n.render(l, Bf);
  }
  _applyPMREM(e) {
    const t = this._renderer,
      n = t.autoClear;
    t.autoClear = !1;
    const i = this._lodPlanes.length;
    for (let s = 1; s < i; s++) {
      const l = Math.sqrt(this._sigmas[s] * this._sigmas[s] - this._sigmas[s - 1] * this._sigmas[s - 1]),
        c = Tg[(i - s - 1) % Tg.length];
      this._blur(e, s - 1, s, l, c);
    }
    t.autoClear = n;
  }
  _blur(e, t, n, i, s) {
    const l = this._pingPongRenderTarget;
    this._halfBlur(e, l, t, n, i, "latitudinal", s), this._halfBlur(l, e, n, n, i, "longitudinal", s);
  }
  _halfBlur(e, t, n, i, s, l, c) {
    const u = this._renderer,
      h = this._blurMaterial;
    l !== "latitudinal" &&
      l !== "longitudinal" &&
      console.error("blur direction must be either latitudinal or longitudinal!");
    const d = 3,
      p = new rn(this._lodPlanes[i], h),
      m = h.uniforms,
      v = this._sizeLods[n] - 1,
      x = isFinite(s) ? Math.PI / (2 * v) : (2 * Math.PI) / (2 * ls - 1),
      M = s / x,
      y = isFinite(s) ? 1 + Math.floor(d * M) : ls;
    y > ls &&
      console.warn(
        `sigmaRadians, ${s}, is too large and will clip, as it requested ${y} samples when the maximum is set to ${ls}`
      );
    const _ = [];
    let w = 0;
    for (let L = 0; L < ls; ++L) {
      const F = L / M,
        C = Math.exp((-F * F) / 2);
      _.push(C), L === 0 ? (w += C) : L < y && (w += 2 * C);
    }
    for (let L = 0; L < _.length; L++) _[L] = _[L] / w;
    (m.envMap.value = e.texture),
      (m.samples.value = y),
      (m.weights.value = _),
      (m.latitudinal.value = l === "latitudinal"),
      c && (m.poleAxis.value = c);
    const { _lodMax: E } = this;
    (m.dTheta.value = x), (m.mipInt.value = E - n);
    const A = this._sizeLods[i],
      O = 3 * A * (i > E - fo ? i - E + fo : 0),
      P = 4 * (this._cubeSize - A);
    mc(t, O, P, 3 * A, 2 * A), u.setRenderTarget(t), u.render(p, Bf);
  }
}
function Tw(r) {
  const e = [],
    t = [],
    n = [];
  let i = r;
  const s = r - fo + 1 + wg.length;
  for (let l = 0; l < s; l++) {
    const c = Math.pow(2, i);
    t.push(c);
    let u = 1 / c;
    l > r - fo ? (u = wg[l - r + fo - 1]) : l === 0 && (u = 0), n.push(u);
    const h = 1 / (c - 2),
      d = -h,
      p = 1 + h,
      m = [d, d, p, d, p, p, d, d, p, p, d, p],
      v = 6,
      x = 6,
      M = 3,
      y = 2,
      _ = 1,
      w = new Float32Array(M * x * v),
      E = new Float32Array(y * x * v),
      A = new Float32Array(_ * x * v);
    for (let P = 0; P < v; P++) {
      const L = ((P % 3) * 2) / 3 - 1,
        F = P > 2 ? 0 : -1,
        C = [L, F, 0, L + 2 / 3, F, 0, L + 2 / 3, F + 1, 0, L, F, 0, L + 2 / 3, F + 1, 0, L, F + 1, 0];
      w.set(C, M * x * P), E.set(m, y * x * P);
      const b = [P, P, P, P, P, P];
      A.set(b, _ * x * P);
    }
    const O = new vt();
    O.setAttribute("position", new Ot(w, M)),
      O.setAttribute("uv", new Ot(E, y)),
      O.setAttribute("faceIndex", new Ot(A, _)),
      e.push(O),
      i > fo && i--;
  }
  return { lodPlanes: e, sizeLods: t, sigmas: n };
}
function Ag(r, e, t) {
  const n = new wi(r, e, t);
  return (n.texture.mapping = wo), (n.texture.name = "PMREM.cubeUv"), (n.scissorTest = !0), n;
}
function mc(r, e, t, n, i) {
  r.viewport.set(e, t, n, i), r.scissor.set(e, t, n, i);
}
function Aw(r, e, t) {
  const n = new Float32Array(ls),
    i = new N(0, 1, 0);
  return new Ei({
    name: "SphericalGaussianBlur",
    defines: { n: ls, CUBEUV_TEXEL_WIDTH: 1 / e, CUBEUV_TEXEL_HEIGHT: 1 / t, CUBEUV_MAX_MIP: `${r}.0` },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: n },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: i },
    },
    vertexShader: Kd(),
    fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
    blending: sr,
    depthTest: !1,
    depthWrite: !1,
  });
}
function bg() {
  return new Ei({
    name: "EquirectangularToCubeUV",
    uniforms: { envMap: { value: null } },
    vertexShader: Kd(),
    fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,
    blending: sr,
    depthTest: !1,
    depthWrite: !1,
  });
}
function Cg() {
  return new Ei({
    name: "CubemapToCubeUV",
    uniforms: { envMap: { value: null }, flipEnvMap: { value: -1 } },
    vertexShader: Kd(),
    fragmentShader: `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,
    blending: sr,
    depthTest: !1,
    depthWrite: !1,
  });
}
function Kd() {
  return `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
}
function bw(r) {
  let e = new WeakMap(),
    t = null;
  function n(c) {
    if (c && c.isTexture) {
      const u = c.mapping,
        h = u === Sa || u === Ma,
        d = u === lr || u === Ir;
      if (h || d) {
        let p = e.get(c);
        const m = p !== void 0 ? p.texture.pmremVersion : 0;
        if (c.isRenderTargetTexture && c.pmremVersion !== m)
          return (
            t === null && (t = new Sd(r)),
            (p = h ? t.fromEquirectangular(c, p) : t.fromCubemap(c, p)),
            (p.texture.pmremVersion = c.pmremVersion),
            e.set(c, p),
            p.texture
          );
        if (p !== void 0) return p.texture;
        {
          const v = c.image;
          return (h && v && v.height > 0) || (d && v && i(v))
            ? (t === null && (t = new Sd(r)),
              (p = h ? t.fromEquirectangular(c) : t.fromCubemap(c)),
              (p.texture.pmremVersion = c.pmremVersion),
              e.set(c, p),
              c.addEventListener("dispose", s),
              p.texture)
            : null;
        }
      }
    }
    return c;
  }
  function i(c) {
    let u = 0;
    const h = 6;
    for (let d = 0; d < h; d++) c[d] !== void 0 && u++;
    return u === h;
  }
  function s(c) {
    const u = c.target;
    u.removeEventListener("dispose", s);
    const h = e.get(u);
    h !== void 0 && (e.delete(u), h.dispose());
  }
  function l() {
    (e = new WeakMap()), t !== null && (t.dispose(), (t = null));
  }
  return { get: n, dispose: l };
}
function Cw(r) {
  const e = {};
  function t(n) {
    if (e[n] !== void 0) return e[n];
    let i;
    switch (n) {
      case "WEBGL_depth_texture":
        i =
          r.getExtension("WEBGL_depth_texture") ||
          r.getExtension("MOZ_WEBGL_depth_texture") ||
          r.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        i =
          r.getExtension("EXT_texture_filter_anisotropic") ||
          r.getExtension("MOZ_EXT_texture_filter_anisotropic") ||
          r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        i =
          r.getExtension("WEBGL_compressed_texture_s3tc") ||
          r.getExtension("MOZ_WEBGL_compressed_texture_s3tc") ||
          r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        i = r.getExtension("WEBGL_compressed_texture_pvrtc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        i = r.getExtension(n);
    }
    return (e[n] = i), i;
  }
  return {
    has: function (n) {
      return t(n) !== null;
    },
    init: function () {
      t("EXT_color_buffer_float"),
        t("WEBGL_clip_cull_distance"),
        t("OES_texture_float_linear"),
        t("EXT_color_buffer_half_float"),
        t("WEBGL_multisampled_render_to_texture"),
        t("WEBGL_render_shared_exponent");
    },
    get: function (n) {
      const i = t(n);
      return i === null && la("THREE.WebGLRenderer: " + n + " extension not supported."), i;
    },
  };
}
function Rw(r, e, t, n) {
  const i = {},
    s = new WeakMap();
  function l(p) {
    const m = p.target;
    m.index !== null && e.remove(m.index);
    for (const x in m.attributes) e.remove(m.attributes[x]);
    for (const x in m.morphAttributes) {
      const M = m.morphAttributes[x];
      for (let y = 0, _ = M.length; y < _; y++) e.remove(M[y]);
    }
    m.removeEventListener("dispose", l), delete i[m.id];
    const v = s.get(m);
    v && (e.remove(v), s.delete(m)),
      n.releaseStatesOfGeometry(m),
      m.isInstancedBufferGeometry === !0 && delete m._maxInstanceCount,
      t.memory.geometries--;
  }
  function c(p, m) {
    return i[m.id] === !0 || (m.addEventListener("dispose", l), (i[m.id] = !0), t.memory.geometries++), m;
  }
  function u(p) {
    const m = p.attributes;
    for (const x in m) e.update(m[x], r.ARRAY_BUFFER);
    const v = p.morphAttributes;
    for (const x in v) {
      const M = v[x];
      for (let y = 0, _ = M.length; y < _; y++) e.update(M[y], r.ARRAY_BUFFER);
    }
  }
  function h(p) {
    const m = [],
      v = p.index,
      x = p.attributes.position;
    let M = 0;
    if (v !== null) {
      const w = v.array;
      M = v.version;
      for (let E = 0, A = w.length; E < A; E += 3) {
        const O = w[E + 0],
          P = w[E + 1],
          L = w[E + 2];
        m.push(O, P, P, L, L, O);
      }
    } else if (x !== void 0) {
      const w = x.array;
      M = x.version;
      for (let E = 0, A = w.length / 3 - 1; E < A; E += 3) {
        const O = E + 0,
          P = E + 1,
          L = E + 2;
        m.push(O, P, P, L, L, O);
      }
    } else return;
    const y = new (kv(m) ? Jd : Zd)(m, 1);
    y.version = M;
    const _ = s.get(p);
    _ && e.remove(_), s.set(p, y);
  }
  function d(p) {
    const m = s.get(p);
    if (m) {
      const v = p.index;
      v !== null && m.version < v.version && h(p);
    } else h(p);
    return s.get(p);
  }
  return { get: c, update: u, getWireframeAttribute: d };
}
function Pw(r, e, t) {
  let n;
  function i(m) {
    n = m;
  }
  let s, l;
  function c(m) {
    (s = m.type), (l = m.bytesPerElement);
  }
  function u(m, v) {
    r.drawElements(n, v, s, m * l), t.update(v, n, 1);
  }
  function h(m, v, x) {
    x !== 0 && (r.drawElementsInstanced(n, v, s, m * l, x), t.update(v, n, x));
  }
  function d(m, v, x) {
    if (x === 0) return;
    e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n, v, 0, s, m, 0, x);
    let y = 0;
    for (let _ = 0; _ < x; _++) y += v[_];
    t.update(y, n, 1);
  }
  function p(m, v, x, M) {
    if (x === 0) return;
    const y = e.get("WEBGL_multi_draw");
    if (y === null) for (let _ = 0; _ < m.length; _++) h(m[_] / l, v[_], M[_]);
    else {
      y.multiDrawElementsInstancedWEBGL(n, v, 0, s, m, 0, M, 0, x);
      let _ = 0;
      for (let w = 0; w < x; w++) _ += v[w] * M[w];
      t.update(_, n, 1);
    }
  }
  (this.setMode = i),
    (this.setIndex = c),
    (this.render = u),
    (this.renderInstances = h),
    (this.renderMultiDraw = d),
    (this.renderMultiDrawInstances = p);
}
function Iw(r) {
  const e = { geometries: 0, textures: 0 },
    t = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 };
  function n(s, l, c) {
    switch ((t.calls++, l)) {
      case r.TRIANGLES:
        t.triangles += c * (s / 3);
        break;
      case r.LINES:
        t.lines += c * (s / 2);
        break;
      case r.LINE_STRIP:
        t.lines += c * (s - 1);
        break;
      case r.LINE_LOOP:
        t.lines += c * s;
        break;
      case r.POINTS:
        t.points += c * s;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", l);
        break;
    }
  }
  function i() {
    (t.calls = 0), (t.triangles = 0), (t.points = 0), (t.lines = 0);
  }
  return { memory: e, render: t, programs: null, autoReset: !0, reset: i, update: n };
}
function Lw(r, e, t) {
  const n = new WeakMap(),
    i = new Ct();
  function s(l, c, u) {
    const h = l.morphTargetInfluences,
      d = c.morphAttributes.position || c.morphAttributes.normal || c.morphAttributes.color,
      p = d !== void 0 ? d.length : 0;
    let m = n.get(c);
    if (m === void 0 || m.count !== p) {
      let C = function () {
        L.dispose(), n.delete(c), c.removeEventListener("dispose", C);
      };
      m !== void 0 && m.texture.dispose();
      const v = c.morphAttributes.position !== void 0,
        x = c.morphAttributes.normal !== void 0,
        M = c.morphAttributes.color !== void 0,
        y = c.morphAttributes.position || [],
        _ = c.morphAttributes.normal || [],
        w = c.morphAttributes.color || [];
      let E = 0;
      v === !0 && (E = 1), x === !0 && (E = 2), M === !0 && (E = 3);
      let A = c.attributes.position.count * E,
        O = 1;
      A > e.maxTextureSize && ((O = Math.ceil(A / e.maxTextureSize)), (A = e.maxTextureSize));
      const P = new Float32Array(A * O * 4 * p),
        L = new Gu(P, A, O, p);
      (L.type = Yn), (L.needsUpdate = !0);
      const F = E * 4;
      for (let b = 0; b < p; b++) {
        const D = y[b],
          Y = _[b],
          q = w[b],
          K = A * O * 4 * b;
        for (let ae = 0; ae < D.count; ae++) {
          const j = ae * F;
          v === !0 &&
            (i.fromBufferAttribute(D, ae),
            (P[K + j + 0] = i.x),
            (P[K + j + 1] = i.y),
            (P[K + j + 2] = i.z),
            (P[K + j + 3] = 0)),
            x === !0 &&
              (i.fromBufferAttribute(Y, ae),
              (P[K + j + 4] = i.x),
              (P[K + j + 5] = i.y),
              (P[K + j + 6] = i.z),
              (P[K + j + 7] = 0)),
            M === !0 &&
              (i.fromBufferAttribute(q, ae),
              (P[K + j + 8] = i.x),
              (P[K + j + 9] = i.y),
              (P[K + j + 10] = i.z),
              (P[K + j + 11] = q.itemSize === 4 ? i.w : 1));
        }
      }
      (m = { count: p, texture: L, size: new fe(A, O) }), n.set(c, m), c.addEventListener("dispose", C);
    }
    if (l.isInstancedMesh === !0 && l.morphTexture !== null)
      u.getUniforms().setValue(r, "morphTexture", l.morphTexture, t);
    else {
      let v = 0;
      for (let M = 0; M < h.length; M++) v += h[M];
      const x = c.morphTargetsRelative ? 1 : 1 - v;
      u.getUniforms().setValue(r, "morphTargetBaseInfluence", x),
        u.getUniforms().setValue(r, "morphTargetInfluences", h);
    }
    u.getUniforms().setValue(r, "morphTargetsTexture", m.texture, t),
      u.getUniforms().setValue(r, "morphTargetsTextureSize", m.size);
  }
  return { update: s };
}
function Dw(r, e, t, n) {
  let i = new WeakMap();
  function s(u) {
    const h = n.render.frame,
      d = u.geometry,
      p = e.get(u, d);
    if (
      (i.get(p) !== h && (e.update(p), i.set(p, h)),
      u.isInstancedMesh &&
        (u.hasEventListener("dispose", c) === !1 && u.addEventListener("dispose", c),
        i.get(u) !== h &&
          (t.update(u.instanceMatrix, r.ARRAY_BUFFER),
          u.instanceColor !== null && t.update(u.instanceColor, r.ARRAY_BUFFER),
          i.set(u, h))),
      u.isSkinnedMesh)
    ) {
      const m = u.skeleton;
      i.get(m) !== h && (m.update(), i.set(m, h));
    }
    return p;
  }
  function l() {
    i = new WeakMap();
  }
  function c(u) {
    const h = u.target;
    h.removeEventListener("dispose", c),
      t.remove(h.instanceMatrix),
      h.instanceColor !== null && t.remove(h.instanceColor);
  }
  return { update: s, dispose: l };
}
class jd extends Kt {
  constructor(e, t, n, i, s, l, c, u, h, d = ps) {
    if (d !== ps && d !== ys)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    n === void 0 && d === ps && (n = cr),
      n === void 0 && d === ys && (n = xs),
      super(null, i, s, l, c, u, d, n, h),
      (this.isDepthTexture = !0),
      (this.image = { width: e, height: t }),
      (this.magFilter = c !== void 0 ? c : _n),
      (this.minFilter = u !== void 0 ? u : _n),
      (this.flipY = !1),
      (this.generateMipmaps = !1),
      (this.compareFunction = null);
  }
  copy(e) {
    return super.copy(e), (this.compareFunction = e.compareFunction), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
  }
}
const Kv = new Kt(),
  Rg = new jd(1, 1),
  jv = new Gu(),
  Qv = new qd(),
  $v = new Ha(),
  Pg = [],
  Ig = [],
  Lg = new Float32Array(16),
  Dg = new Float32Array(9),
  Ug = new Float32Array(4);
function bo(r, e, t) {
  const n = r[0];
  if (n <= 0 || n > 0) return r;
  const i = e * t;
  let s = Pg[i];
  if ((s === void 0 && ((s = new Float32Array(i)), (Pg[i] = s)), e !== 0)) {
    n.toArray(s, 0);
    for (let l = 1, c = 0; l !== e; ++l) (c += t), r[l].toArray(s, c);
  }
  return s;
}
function ln(r, e) {
  if (r.length !== e.length) return !1;
  for (let t = 0, n = r.length; t < n; t++) if (r[t] !== e[t]) return !1;
  return !0;
}
function cn(r, e) {
  for (let t = 0, n = e.length; t < n; t++) r[t] = e[t];
}
function Wu(r, e) {
  let t = Ig[e];
  t === void 0 && ((t = new Int32Array(e)), (Ig[e] = t));
  for (let n = 0; n !== e; ++n) t[n] = r.allocateTextureUnit();
  return t;
}
function Uw(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1f(this.addr, e), (t[0] = e));
}
function Nw(r, e) {
  const t = this.cache;
  if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (r.uniform2f(this.addr, e.x, e.y), (t[0] = e.x), (t[1] = e.y));
  else {
    if (ln(t, e)) return;
    r.uniform2fv(this.addr, e), cn(t, e);
  }
}
function Fw(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) &&
      (r.uniform3f(this.addr, e.x, e.y, e.z), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z));
  else if (e.r !== void 0)
    (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) &&
      (r.uniform3f(this.addr, e.r, e.g, e.b), (t[0] = e.r), (t[1] = e.g), (t[2] = e.b));
  else {
    if (ln(t, e)) return;
    r.uniform3fv(this.addr, e), cn(t, e);
  }
}
function Ow(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) &&
      (r.uniform4f(this.addr, e.x, e.y, e.z, e.w), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z), (t[3] = e.w));
  else {
    if (ln(t, e)) return;
    r.uniform4fv(this.addr, e), cn(t, e);
  }
}
function Bw(r, e) {
  const t = this.cache,
    n = e.elements;
  if (n === void 0) {
    if (ln(t, e)) return;
    r.uniformMatrix2fv(this.addr, !1, e), cn(t, e);
  } else {
    if (ln(t, n)) return;
    Ug.set(n), r.uniformMatrix2fv(this.addr, !1, Ug), cn(t, n);
  }
}
function zw(r, e) {
  const t = this.cache,
    n = e.elements;
  if (n === void 0) {
    if (ln(t, e)) return;
    r.uniformMatrix3fv(this.addr, !1, e), cn(t, e);
  } else {
    if (ln(t, n)) return;
    Dg.set(n), r.uniformMatrix3fv(this.addr, !1, Dg), cn(t, n);
  }
}
function kw(r, e) {
  const t = this.cache,
    n = e.elements;
  if (n === void 0) {
    if (ln(t, e)) return;
    r.uniformMatrix4fv(this.addr, !1, e), cn(t, e);
  } else {
    if (ln(t, n)) return;
    Lg.set(n), r.uniformMatrix4fv(this.addr, !1, Lg), cn(t, n);
  }
}
function Vw(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1i(this.addr, e), (t[0] = e));
}
function Hw(r, e) {
  const t = this.cache;
  if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (r.uniform2i(this.addr, e.x, e.y), (t[0] = e.x), (t[1] = e.y));
  else {
    if (ln(t, e)) return;
    r.uniform2iv(this.addr, e), cn(t, e);
  }
}
function Gw(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) &&
      (r.uniform3i(this.addr, e.x, e.y, e.z), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z));
  else {
    if (ln(t, e)) return;
    r.uniform3iv(this.addr, e), cn(t, e);
  }
}
function Ww(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) &&
      (r.uniform4i(this.addr, e.x, e.y, e.z, e.w), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z), (t[3] = e.w));
  else {
    if (ln(t, e)) return;
    r.uniform4iv(this.addr, e), cn(t, e);
  }
}
function Xw(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1ui(this.addr, e), (t[0] = e));
}
function Yw(r, e) {
  const t = this.cache;
  if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (r.uniform2ui(this.addr, e.x, e.y), (t[0] = e.x), (t[1] = e.y));
  else {
    if (ln(t, e)) return;
    r.uniform2uiv(this.addr, e), cn(t, e);
  }
}
function qw(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) &&
      (r.uniform3ui(this.addr, e.x, e.y, e.z), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z));
  else {
    if (ln(t, e)) return;
    r.uniform3uiv(this.addr, e), cn(t, e);
  }
}
function Zw(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) &&
      (r.uniform4ui(this.addr, e.x, e.y, e.z, e.w), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z), (t[3] = e.w));
  else {
    if (ln(t, e)) return;
    r.uniform4uiv(this.addr, e), cn(t, e);
  }
}
function Jw(r, e, t) {
  const n = this.cache,
    i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), (n[0] = i));
  let s;
  this.type === r.SAMPLER_2D_SHADOW ? ((Rg.compareFunction = Xd), (s = Rg)) : (s = Kv), t.setTexture2D(e || s, i);
}
function Kw(r, e, t) {
  const n = this.cache,
    i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), (n[0] = i)), t.setTexture3D(e || Qv, i);
}
function jw(r, e, t) {
  const n = this.cache,
    i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), (n[0] = i)), t.setTextureCube(e || $v, i);
}
function Qw(r, e, t) {
  const n = this.cache,
    i = t.allocateTextureUnit();
  n[0] !== i && (r.uniform1i(this.addr, i), (n[0] = i)), t.setTexture2DArray(e || jv, i);
}
function $w(r) {
  switch (r) {
    case 5126:
      return Uw;
    case 35664:
      return Nw;
    case 35665:
      return Fw;
    case 35666:
      return Ow;
    case 35674:
      return Bw;
    case 35675:
      return zw;
    case 35676:
      return kw;
    case 5124:
    case 35670:
      return Vw;
    case 35667:
    case 35671:
      return Hw;
    case 35668:
    case 35672:
      return Gw;
    case 35669:
    case 35673:
      return Ww;
    case 5125:
      return Xw;
    case 36294:
      return Yw;
    case 36295:
      return qw;
    case 36296:
      return Zw;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return Jw;
    case 35679:
    case 36299:
    case 36307:
      return Kw;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return jw;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return Qw;
  }
}
function eE(r, e) {
  r.uniform1fv(this.addr, e);
}
function tE(r, e) {
  const t = bo(e, this.size, 2);
  r.uniform2fv(this.addr, t);
}
function nE(r, e) {
  const t = bo(e, this.size, 3);
  r.uniform3fv(this.addr, t);
}
function iE(r, e) {
  const t = bo(e, this.size, 4);
  r.uniform4fv(this.addr, t);
}
function rE(r, e) {
  const t = bo(e, this.size, 4);
  r.uniformMatrix2fv(this.addr, !1, t);
}
function sE(r, e) {
  const t = bo(e, this.size, 9);
  r.uniformMatrix3fv(this.addr, !1, t);
}
function oE(r, e) {
  const t = bo(e, this.size, 16);
  r.uniformMatrix4fv(this.addr, !1, t);
}
function aE(r, e) {
  r.uniform1iv(this.addr, e);
}
function lE(r, e) {
  r.uniform2iv(this.addr, e);
}
function cE(r, e) {
  r.uniform3iv(this.addr, e);
}
function uE(r, e) {
  r.uniform4iv(this.addr, e);
}
function hE(r, e) {
  r.uniform1uiv(this.addr, e);
}
function fE(r, e) {
  r.uniform2uiv(this.addr, e);
}
function dE(r, e) {
  r.uniform3uiv(this.addr, e);
}
function pE(r, e) {
  r.uniform4uiv(this.addr, e);
}
function mE(r, e, t) {
  const n = this.cache,
    i = e.length,
    s = Wu(t, i);
  ln(n, s) || (r.uniform1iv(this.addr, s), cn(n, s));
  for (let l = 0; l !== i; ++l) t.setTexture2D(e[l] || Kv, s[l]);
}
function gE(r, e, t) {
  const n = this.cache,
    i = e.length,
    s = Wu(t, i);
  ln(n, s) || (r.uniform1iv(this.addr, s), cn(n, s));
  for (let l = 0; l !== i; ++l) t.setTexture3D(e[l] || Qv, s[l]);
}
function vE(r, e, t) {
  const n = this.cache,
    i = e.length,
    s = Wu(t, i);
  ln(n, s) || (r.uniform1iv(this.addr, s), cn(n, s));
  for (let l = 0; l !== i; ++l) t.setTextureCube(e[l] || $v, s[l]);
}
function _E(r, e, t) {
  const n = this.cache,
    i = e.length,
    s = Wu(t, i);
  ln(n, s) || (r.uniform1iv(this.addr, s), cn(n, s));
  for (let l = 0; l !== i; ++l) t.setTexture2DArray(e[l] || jv, s[l]);
}
function xE(r) {
  switch (r) {
    case 5126:
      return eE;
    case 35664:
      return tE;
    case 35665:
      return nE;
    case 35666:
      return iE;
    case 35674:
      return rE;
    case 35675:
      return sE;
    case 35676:
      return oE;
    case 5124:
    case 35670:
      return aE;
    case 35667:
    case 35671:
      return lE;
    case 35668:
    case 35672:
      return cE;
    case 35669:
    case 35673:
      return uE;
    case 5125:
      return hE;
    case 36294:
      return fE;
    case 36295:
      return dE;
    case 36296:
      return pE;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return mE;
    case 35679:
    case 36299:
    case 36307:
      return gE;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return vE;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return _E;
  }
}
class yE {
  constructor(e, t, n) {
    (this.id = e), (this.addr = n), (this.cache = []), (this.type = t.type), (this.setValue = $w(t.type));
  }
}
class SE {
  constructor(e, t, n) {
    (this.id = e),
      (this.addr = n),
      (this.cache = []),
      (this.type = t.type),
      (this.size = t.size),
      (this.setValue = xE(t.type));
  }
}
class ME {
  constructor(e) {
    (this.id = e), (this.seq = []), (this.map = {});
  }
  setValue(e, t, n) {
    const i = this.seq;
    for (let s = 0, l = i.length; s !== l; ++s) {
      const c = i[s];
      c.setValue(e, t[c.id], n);
    }
  }
}
const Gf = /(\w+)(\])?(\[|\.)?/g;
function Ng(r, e) {
  r.seq.push(e), (r.map[e.id] = e);
}
function wE(r, e, t) {
  const n = r.name,
    i = n.length;
  for (Gf.lastIndex = 0; ; ) {
    const s = Gf.exec(n),
      l = Gf.lastIndex;
    let c = s[1];
    const u = s[2] === "]",
      h = s[3];
    if ((u && (c = c | 0), h === void 0 || (h === "[" && l + 2 === i))) {
      Ng(t, h === void 0 ? new yE(c, r, e) : new SE(c, r, e));
      break;
    } else {
      let p = t.map[c];
      p === void 0 && ((p = new ME(c)), Ng(t, p)), (t = p);
    }
  }
}
class Xc {
  constructor(e, t) {
    (this.seq = []), (this.map = {});
    const n = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
    for (let i = 0; i < n; ++i) {
      const s = e.getActiveUniform(t, i),
        l = e.getUniformLocation(t, s.name);
      wE(s, l, this);
    }
  }
  setValue(e, t, n, i) {
    const s = this.map[t];
    s !== void 0 && s.setValue(e, n, i);
  }
  setOptional(e, t, n) {
    const i = t[n];
    i !== void 0 && this.setValue(e, n, i);
  }
  static upload(e, t, n, i) {
    for (let s = 0, l = t.length; s !== l; ++s) {
      const c = t[s],
        u = n[c.id];
      u.needsUpdate !== !1 && c.setValue(e, u.value, i);
    }
  }
  static seqWithValue(e, t) {
    const n = [];
    for (let i = 0, s = e.length; i !== s; ++i) {
      const l = e[i];
      l.id in t && n.push(l);
    }
    return n;
  }
}
function Fg(r, e, t) {
  const n = r.createShader(e);
  return r.shaderSource(n, t), r.compileShader(n), n;
}
const EE = 37297;
let TE = 0;
function AE(r, e) {
  const t = r.split(`
`),
    n = [],
    i = Math.max(e - 6, 0),
    s = Math.min(e + 6, t.length);
  for (let l = i; l < s; l++) {
    const c = l + 1;
    n.push(`${c === e ? ">" : " "} ${c}: ${t[l]}`);
  }
  return n.join(`
`);
}
const Og = new dt();
function bE(r) {
  At._getMatrix(Og, At.workingColorSpace, r);
  const e = `mat3( ${Og.elements.map((t) => t.toFixed(4))} )`;
  switch (At.getTransfer(r)) {
    case ka:
      return [e, "LinearTransferOETF"];
    case Ut:
      return [e, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space: ", r), [e, "LinearTransferOETF"];
  }
}
function Bg(r, e, t) {
  const n = r.getShaderParameter(e, r.COMPILE_STATUS),
    i = r.getShaderInfoLog(e).trim();
  if (n && i === "") return "";
  const s = /ERROR: 0:(\d+)/.exec(i);
  if (s) {
    const l = parseInt(s[1]);
    return (
      t.toUpperCase() +
      `

` +
      i +
      `

` +
      AE(r.getShaderSource(e), l)
    );
  } else return i;
}
function CE(r, e) {
  const t = bE(e);
  return [`vec4 ${r}( vec4 value ) {`, `	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`, "}"].join(`
`);
}
function RE(r, e) {
  let t;
  switch (e) {
    case yv:
      t = "Linear";
      break;
    case Sv:
      t = "Reinhard";
      break;
    case Mv:
      t = "Cineon";
      break;
    case Dd:
      t = "ACESFilmic";
      break;
    case Ev:
      t = "AgX";
      break;
    case Tv:
      t = "Neutral";
      break;
    case wv:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), (t = "Linear");
  }
  return "vec3 " + r + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
const gc = new N();
function PE() {
  At.getLuminanceCoefficients(gc);
  const r = gc.x.toFixed(4),
    e = gc.y.toFixed(4),
    t = gc.z.toFixed(4);
  return [
    "float luminance( const in vec3 rgb ) {",
    `	const vec3 weights = vec3( ${r}, ${e}, ${t} );`,
    "	return dot( weights, rgb );",
    "}",
  ].join(`
`);
}
function IE(r) {
  return [
    r.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
    r.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : "",
  ].filter(ua).join(`
`);
}
function LE(r) {
  const e = [];
  for (const t in r) {
    const n = r[t];
    n !== !1 && e.push("#define " + t + " " + n);
  }
  return e.join(`
`);
}
function DE(r, e) {
  const t = {},
    n = r.getProgramParameter(e, r.ACTIVE_ATTRIBUTES);
  for (let i = 0; i < n; i++) {
    const s = r.getActiveAttrib(e, i),
      l = s.name;
    let c = 1;
    s.type === r.FLOAT_MAT2 && (c = 2),
      s.type === r.FLOAT_MAT3 && (c = 3),
      s.type === r.FLOAT_MAT4 && (c = 4),
      (t[l] = { type: s.type, location: r.getAttribLocation(e, l), locationSize: c });
  }
  return t;
}
function ua(r) {
  return r !== "";
}
function zg(r, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return r
    .replace(/NUM_DIR_LIGHTS/g, e.numDirLights)
    .replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights)
    .replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps)
    .replace(/NUM_SPOT_LIGHT_COORDS/g, t)
    .replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights)
    .replace(/NUM_POINT_LIGHTS/g, e.numPointLights)
    .replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights)
    .replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows)
    .replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps)
    .replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows)
    .replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function kg(r, e) {
  return r
    .replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes)
    .replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const UE = /^[ \t]*#include +<([\w\d./]+)>/gm;
function Md(r) {
  return r.replace(UE, FE);
}
const NE = new Map();
function FE(r, e) {
  let t = gt[e];
  if (t === void 0) {
    const n = NE.get(e);
    if (n !== void 0)
      (t = gt[n]), console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, n);
    else throw new Error("Can not resolve #include <" + e + ">");
  }
  return Md(t);
}
const OE =
  /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function Vg(r) {
  return r.replace(OE, BE);
}
function BE(r, e, t, n) {
  let i = "";
  for (let s = parseInt(e); s < parseInt(t); s++)
    i += n.replace(/\[\s*i\s*\]/g, "[ " + s + " ]").replace(/UNROLLED_LOOP_INDEX/g, s);
  return i;
}
function Hg(r) {
  let e = `precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;
  return (
    r.precision === "highp"
      ? (e += `
#define HIGH_PRECISION`)
      : r.precision === "mediump"
        ? (e += `
#define MEDIUM_PRECISION`)
        : r.precision === "lowp" &&
          (e += `
#define LOW_PRECISION`),
    e
  );
}
function zE(r) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return (
    r.shadowMapType === Uu
      ? (e = "SHADOWMAP_TYPE_PCF")
      : r.shadowMapType === ha
        ? (e = "SHADOWMAP_TYPE_PCF_SOFT")
        : r.shadowMapType === xi && (e = "SHADOWMAP_TYPE_VSM"),
    e
  );
}
function kE(r) {
  let e = "ENVMAP_TYPE_CUBE";
  if (r.envMap)
    switch (r.envMapMode) {
      case lr:
      case Ir:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case wo:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function VE(r) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (r.envMap)
    switch (r.envMapMode) {
      case Ir:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function HE(r) {
  let e = "ENVMAP_BLENDING_NONE";
  if (r.envMap)
    switch (r.combine) {
      case Ba:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case _v:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case xv:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function GE(r) {
  const e = r.envMapCubeUVHeight;
  if (e === null) return null;
  const t = Math.log2(e) - 2,
    n = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)), texelHeight: n, maxMip: t };
}
function WE(r, e, t, n) {
  const i = r.getContext(),
    s = t.defines;
  let l = t.vertexShader,
    c = t.fragmentShader;
  const u = zE(t),
    h = kE(t),
    d = VE(t),
    p = HE(t),
    m = GE(t),
    v = IE(t),
    x = LE(s),
    M = i.createProgram();
  let y,
    _,
    w = t.glslVersion
      ? "#version " +
        t.glslVersion +
        `
`
      : "";
  t.isRawShaderMaterial
    ? ((y = ["#define SHADER_TYPE " + t.shaderType, "#define SHADER_NAME " + t.shaderName, x].filter(ua).join(`
`)),
      y.length > 0 &&
        (y += `
`),
      (_ = ["#define SHADER_TYPE " + t.shaderType, "#define SHADER_NAME " + t.shaderName, x].filter(ua).join(`
`)),
      _.length > 0 &&
        (_ += `
`))
    : ((y = [
        Hg(t),
        "#define SHADER_TYPE " + t.shaderType,
        "#define SHADER_NAME " + t.shaderName,
        x,
        t.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
        t.batching ? "#define USE_BATCHING" : "",
        t.batchingColor ? "#define USE_BATCHING_COLOR" : "",
        t.instancing ? "#define USE_INSTANCING" : "",
        t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        t.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
        t.useFog && t.fog ? "#define USE_FOG" : "",
        t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
        t.map ? "#define USE_MAP" : "",
        t.envMap ? "#define USE_ENVMAP" : "",
        t.envMap ? "#define " + d : "",
        t.lightMap ? "#define USE_LIGHTMAP" : "",
        t.aoMap ? "#define USE_AOMAP" : "",
        t.bumpMap ? "#define USE_BUMPMAP" : "",
        t.normalMap ? "#define USE_NORMALMAP" : "",
        t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
        t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        t.anisotropy ? "#define USE_ANISOTROPY" : "",
        t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        t.specularMap ? "#define USE_SPECULARMAP" : "",
        t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        t.metalnessMap ? "#define USE_METALNESSMAP" : "",
        t.alphaMap ? "#define USE_ALPHAMAP" : "",
        t.alphaHash ? "#define USE_ALPHAHASH" : "",
        t.transmission ? "#define USE_TRANSMISSION" : "",
        t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        t.mapUv ? "#define MAP_UV " + t.mapUv : "",
        t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
        t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
        t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
        t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
        t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
        t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
        t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
        t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
        t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
        t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
        t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
        t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
        t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
        t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
        t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
        t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
        t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
        t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
        t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
        t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
        t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
        t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
        t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
        t.vertexColors ? "#define USE_COLOR" : "",
        t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        t.vertexUv1s ? "#define USE_UV1" : "",
        t.vertexUv2s ? "#define USE_UV2" : "",
        t.vertexUv3s ? "#define USE_UV3" : "",
        t.pointsUvs ? "#define USE_POINTS_UV" : "",
        t.flatShading ? "#define FLAT_SHADED" : "",
        t.skinning ? "#define USE_SKINNING" : "",
        t.morphTargets ? "#define USE_MORPHTARGETS" : "",
        t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
        t.morphColors ? "#define USE_MORPHCOLORS" : "",
        t.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
        t.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
        t.doubleSided ? "#define DOUBLE_SIDED" : "",
        t.flipSided ? "#define FLIP_SIDED" : "",
        t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        t.shadowMapEnabled ? "#define " + u : "",
        t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
        t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        t.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "#ifdef USE_INSTANCING_MORPH",
        "	uniform sampler2D morphTexture;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_UV1",
        "	attribute vec2 uv1;",
        "#endif",
        "#ifdef USE_UV2",
        "	attribute vec2 uv2;",
        "#endif",
        "#ifdef USE_UV3",
        "	attribute vec2 uv3;",
        "#endif",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#if defined( USE_COLOR_ALPHA )",
        "	attribute vec4 color;",
        "#elif defined( USE_COLOR )",
        "	attribute vec3 color;",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        `
`,
      ].filter(ua).join(`
`)),
      (_ = [
        Hg(t),
        "#define SHADER_TYPE " + t.shaderType,
        "#define SHADER_NAME " + t.shaderName,
        x,
        t.useFog && t.fog ? "#define USE_FOG" : "",
        t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
        t.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
        t.map ? "#define USE_MAP" : "",
        t.matcap ? "#define USE_MATCAP" : "",
        t.envMap ? "#define USE_ENVMAP" : "",
        t.envMap ? "#define " + h : "",
        t.envMap ? "#define " + d : "",
        t.envMap ? "#define " + p : "",
        m ? "#define CUBEUV_TEXEL_WIDTH " + m.texelWidth : "",
        m ? "#define CUBEUV_TEXEL_HEIGHT " + m.texelHeight : "",
        m ? "#define CUBEUV_MAX_MIP " + m.maxMip + ".0" : "",
        t.lightMap ? "#define USE_LIGHTMAP" : "",
        t.aoMap ? "#define USE_AOMAP" : "",
        t.bumpMap ? "#define USE_BUMPMAP" : "",
        t.normalMap ? "#define USE_NORMALMAP" : "",
        t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        t.anisotropy ? "#define USE_ANISOTROPY" : "",
        t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        t.clearcoat ? "#define USE_CLEARCOAT" : "",
        t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        t.dispersion ? "#define USE_DISPERSION" : "",
        t.iridescence ? "#define USE_IRIDESCENCE" : "",
        t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        t.specularMap ? "#define USE_SPECULARMAP" : "",
        t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        t.metalnessMap ? "#define USE_METALNESSMAP" : "",
        t.alphaMap ? "#define USE_ALPHAMAP" : "",
        t.alphaTest ? "#define USE_ALPHATEST" : "",
        t.alphaHash ? "#define USE_ALPHAHASH" : "",
        t.sheen ? "#define USE_SHEEN" : "",
        t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        t.transmission ? "#define USE_TRANSMISSION" : "",
        t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
        t.vertexColors || t.instancingColor || t.batchingColor ? "#define USE_COLOR" : "",
        t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        t.vertexUv1s ? "#define USE_UV1" : "",
        t.vertexUv2s ? "#define USE_UV2" : "",
        t.vertexUv3s ? "#define USE_UV3" : "",
        t.pointsUvs ? "#define USE_POINTS_UV" : "",
        t.gradientMap ? "#define USE_GRADIENTMAP" : "",
        t.flatShading ? "#define FLAT_SHADED" : "",
        t.doubleSided ? "#define DOUBLE_SIDED" : "",
        t.flipSided ? "#define FLIP_SIDED" : "",
        t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        t.shadowMapEnabled ? "#define " + u : "",
        t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
        t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
        t.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "",
        t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        t.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        t.toneMapping !== zi ? "#define TONE_MAPPING" : "",
        t.toneMapping !== zi ? gt.tonemapping_pars_fragment : "",
        t.toneMapping !== zi ? RE("toneMapping", t.toneMapping) : "",
        t.dithering ? "#define DITHERING" : "",
        t.opaque ? "#define OPAQUE" : "",
        gt.colorspace_pars_fragment,
        CE("linearToOutputTexel", t.outputColorSpace),
        PE(),
        t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
        `
`,
      ].filter(ua).join(`
`))),
    (l = Md(l)),
    (l = zg(l, t)),
    (l = kg(l, t)),
    (c = Md(c)),
    (c = zg(c, t)),
    (c = kg(c, t)),
    (l = Vg(l)),
    (c = Vg(c)),
    t.isRawShaderMaterial !== !0 &&
      ((w = `#version 300 es
`),
      (y =
        [v, "#define attribute in", "#define varying out", "#define texture2D texture"].join(`
`) +
        `
` +
        y),
      (_ =
        [
          "#define varying in",
          t.glslVersion === yd ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
          t.glslVersion === yd ? "" : "#define gl_FragColor pc_fragColor",
          "#define gl_FragDepthEXT gl_FragDepth",
          "#define texture2D texture",
          "#define textureCube texture",
          "#define texture2DProj textureProj",
          "#define texture2DLodEXT textureLod",
          "#define texture2DProjLodEXT textureProjLod",
          "#define textureCubeLodEXT textureLod",
          "#define texture2DGradEXT textureGrad",
          "#define texture2DProjGradEXT textureProjGrad",
          "#define textureCubeGradEXT textureGrad",
        ].join(`
`) +
        `
` +
        _));
  const E = w + y + l,
    A = w + _ + c,
    O = Fg(i, i.VERTEX_SHADER, E),
    P = Fg(i, i.FRAGMENT_SHADER, A);
  i.attachShader(M, O),
    i.attachShader(M, P),
    t.index0AttributeName !== void 0
      ? i.bindAttribLocation(M, 0, t.index0AttributeName)
      : t.morphTargets === !0 && i.bindAttribLocation(M, 0, "position"),
    i.linkProgram(M);
  function L(D) {
    if (r.debug.checkShaderErrors) {
      const Y = i.getProgramInfoLog(M).trim(),
        q = i.getShaderInfoLog(O).trim(),
        K = i.getShaderInfoLog(P).trim();
      let ae = !0,
        j = !0;
      if (i.getProgramParameter(M, i.LINK_STATUS) === !1)
        if (((ae = !1), typeof r.debug.onShaderError == "function")) r.debug.onShaderError(i, M, O, P);
        else {
          const me = Bg(i, O, "vertex"),
            k = Bg(i, P, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " +
              i.getError() +
              " - VALIDATE_STATUS " +
              i.getProgramParameter(M, i.VALIDATE_STATUS) +
              `

Material Name: ` +
              D.name +
              `
Material Type: ` +
              D.type +
              `

Program Info Log: ` +
              Y +
              `
` +
              me +
              `
` +
              k
          );
        }
      else Y !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", Y) : (q === "" || K === "") && (j = !1);
      j &&
        (D.diagnostics = {
          runnable: ae,
          programLog: Y,
          vertexShader: { log: q, prefix: y },
          fragmentShader: { log: K, prefix: _ },
        });
    }
    i.deleteShader(O), i.deleteShader(P), (F = new Xc(i, M)), (C = DE(i, M));
  }
  let F;
  this.getUniforms = function () {
    return F === void 0 && L(this), F;
  };
  let C;
  this.getAttributes = function () {
    return C === void 0 && L(this), C;
  };
  let b = t.rendererExtensionParallelShaderCompile === !1;
  return (
    (this.isReady = function () {
      return b === !1 && (b = i.getProgramParameter(M, EE)), b;
    }),
    (this.destroy = function () {
      n.releaseStatesOfProgram(this), i.deleteProgram(M), (this.program = void 0);
    }),
    (this.type = t.shaderType),
    (this.name = t.shaderName),
    (this.id = TE++),
    (this.cacheKey = e),
    (this.usedTimes = 1),
    (this.program = M),
    (this.vertexShader = O),
    (this.fragmentShader = P),
    this
  );
}
let XE = 0;
class YE {
  constructor() {
    (this.shaderCache = new Map()), (this.materialCache = new Map());
  }
  update(e) {
    const t = e.vertexShader,
      n = e.fragmentShader,
      i = this._getShaderStage(t),
      s = this._getShaderStage(n),
      l = this._getShaderCacheForMaterial(e);
    return l.has(i) === !1 && (l.add(i), i.usedTimes++), l.has(s) === !1 && (l.add(s), s.usedTimes++), this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const n of t) n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let n = t.get(e);
    return n === void 0 && ((n = new Set()), t.set(e, n)), n;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let n = t.get(e);
    return n === void 0 && ((n = new qE(e)), t.set(e, n)), n;
  }
}
class qE {
  constructor(e) {
    (this.id = XE++), (this.code = e), (this.usedTimes = 0);
  }
}
function ZE(r, e, t, n, i, s, l) {
  const c = new gs(),
    u = new YE(),
    h = new Set(),
    d = [],
    p = i.logarithmicDepthBuffer,
    m = i.vertexTextures;
  let v = i.precision;
  const x = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite",
  };
  function M(C) {
    return h.add(C), C === 0 ? "uv" : `uv${C}`;
  }
  function y(C, b, D, Y, q) {
    const K = Y.fog,
      ae = q.geometry,
      j = C.isMeshStandardMaterial ? Y.environment : null,
      me = (C.isMeshStandardMaterial ? t : e).get(C.envMap || j),
      k = me && me.mapping === wo ? me.image.height : null,
      ne = x[C.type];
    C.precision !== null &&
      ((v = i.getMaxPrecision(C.precision)),
      v !== C.precision &&
        console.warn("THREE.WebGLProgram.getParameters:", C.precision, "not supported, using", v, "instead."));
    const te = ae.morphAttributes.position || ae.morphAttributes.normal || ae.morphAttributes.color,
      ce = te !== void 0 ? te.length : 0;
    let Ce = 0;
    ae.morphAttributes.position !== void 0 && (Ce = 1),
      ae.morphAttributes.normal !== void 0 && (Ce = 2),
      ae.morphAttributes.color !== void 0 && (Ce = 3);
    let Ye, re, ge, De;
    if (ne) {
      const Pt = yi[ne];
      (Ye = Pt.vertexShader), (re = Pt.fragmentShader);
    } else
      (Ye = C.vertexShader),
        (re = C.fragmentShader),
        u.update(C),
        (ge = u.getVertexShaderID(C)),
        (De = u.getFragmentShaderID(C));
    const xe = r.getRenderTarget(),
      je = r.state.buffers.depth.getReversed(),
      it = q.isInstancedMesh === !0,
      Qe = q.isBatchedMesh === !0,
      at = !!C.map,
      ue = !!C.matcap,
      pe = !!me,
      z = !!C.aoMap,
      qe = !!C.lightMap,
      ve = !!C.bumpMap,
      Oe = !!C.normalMap,
      Me = !!C.displacementMap,
      tt = !!C.emissiveMap,
      Ie = !!C.metalnessMap,
      U = !!C.roughnessMap,
      R = C.anisotropy > 0,
      Z = C.clearcoat > 0,
      oe = C.dispersion > 0,
      de = C.iridescence > 0,
      le = C.sheen > 0,
      We = C.transmission > 0,
      Ee = R && !!C.anisotropyMap,
      Fe = Z && !!C.clearcoatMap,
      Mt = Z && !!C.clearcoatNormalMap,
      _e = Z && !!C.clearcoatRoughnessMap,
      Be = de && !!C.iridescenceMap,
      nt = de && !!C.iridescenceThicknessMap,
      ot = le && !!C.sheenColorMap,
      ze = le && !!C.sheenRoughnessMap,
      Et = !!C.specularMap,
      ct = !!C.specularColorMap,
      Nt = !!C.specularIntensityMap,
      H = We && !!C.transmissionMap,
      Te = We && !!C.thicknessMap,
      se = !!C.gradientMap,
      he = !!C.alphaMap,
      Ue = C.alphaTest > 0,
      Re = !!C.alphaHash,
      lt = !!C.extensions;
    let kt = zi;
    C.toneMapped && (xe === null || xe.isXRRenderTarget === !0) && (kt = r.toneMapping);
    const sn = {
      shaderID: ne,
      shaderType: C.type,
      shaderName: C.name,
      vertexShader: Ye,
      fragmentShader: re,
      defines: C.defines,
      customVertexShaderID: ge,
      customFragmentShaderID: De,
      isRawShaderMaterial: C.isRawShaderMaterial === !0,
      glslVersion: C.glslVersion,
      precision: v,
      batching: Qe,
      batchingColor: Qe && q._colorsTexture !== null,
      instancing: it,
      instancingColor: it && q.instanceColor !== null,
      instancingMorph: it && q.morphTexture !== null,
      supportsVertexTextures: m,
      outputColorSpace: xe === null ? r.outputColorSpace : xe.isXRRenderTarget === !0 ? xe.texture.colorSpace : ws,
      alphaToCoverage: !!C.alphaToCoverage,
      map: at,
      matcap: ue,
      envMap: pe,
      envMapMode: pe && me.mapping,
      envMapCubeUVHeight: k,
      aoMap: z,
      lightMap: qe,
      bumpMap: ve,
      normalMap: Oe,
      displacementMap: m && Me,
      emissiveMap: tt,
      normalMapObjectSpace: Oe && C.normalMapType === Lv,
      normalMapTangentSpace: Oe && C.normalMapType === Dr,
      metalnessMap: Ie,
      roughnessMap: U,
      anisotropy: R,
      anisotropyMap: Ee,
      clearcoat: Z,
      clearcoatMap: Fe,
      clearcoatNormalMap: Mt,
      clearcoatRoughnessMap: _e,
      dispersion: oe,
      iridescence: de,
      iridescenceMap: Be,
      iridescenceThicknessMap: nt,
      sheen: le,
      sheenColorMap: ot,
      sheenRoughnessMap: ze,
      specularMap: Et,
      specularColorMap: ct,
      specularIntensityMap: Nt,
      transmission: We,
      transmissionMap: H,
      thicknessMap: Te,
      gradientMap: se,
      opaque: C.transparent === !1 && C.blending === ds && C.alphaToCoverage === !1,
      alphaMap: he,
      alphaTest: Ue,
      alphaHash: Re,
      combine: C.combine,
      mapUv: at && M(C.map.channel),
      aoMapUv: z && M(C.aoMap.channel),
      lightMapUv: qe && M(C.lightMap.channel),
      bumpMapUv: ve && M(C.bumpMap.channel),
      normalMapUv: Oe && M(C.normalMap.channel),
      displacementMapUv: Me && M(C.displacementMap.channel),
      emissiveMapUv: tt && M(C.emissiveMap.channel),
      metalnessMapUv: Ie && M(C.metalnessMap.channel),
      roughnessMapUv: U && M(C.roughnessMap.channel),
      anisotropyMapUv: Ee && M(C.anisotropyMap.channel),
      clearcoatMapUv: Fe && M(C.clearcoatMap.channel),
      clearcoatNormalMapUv: Mt && M(C.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: _e && M(C.clearcoatRoughnessMap.channel),
      iridescenceMapUv: Be && M(C.iridescenceMap.channel),
      iridescenceThicknessMapUv: nt && M(C.iridescenceThicknessMap.channel),
      sheenColorMapUv: ot && M(C.sheenColorMap.channel),
      sheenRoughnessMapUv: ze && M(C.sheenRoughnessMap.channel),
      specularMapUv: Et && M(C.specularMap.channel),
      specularColorMapUv: ct && M(C.specularColorMap.channel),
      specularIntensityMapUv: Nt && M(C.specularIntensityMap.channel),
      transmissionMapUv: H && M(C.transmissionMap.channel),
      thicknessMapUv: Te && M(C.thicknessMap.channel),
      alphaMapUv: he && M(C.alphaMap.channel),
      vertexTangents: !!ae.attributes.tangent && (Oe || R),
      vertexColors: C.vertexColors,
      vertexAlphas: C.vertexColors === !0 && !!ae.attributes.color && ae.attributes.color.itemSize === 4,
      pointsUvs: q.isPoints === !0 && !!ae.attributes.uv && (at || he),
      fog: !!K,
      useFog: C.fog === !0,
      fogExp2: !!K && K.isFogExp2,
      flatShading: C.flatShading === !0,
      sizeAttenuation: C.sizeAttenuation === !0,
      logarithmicDepthBuffer: p,
      reverseDepthBuffer: je,
      skinning: q.isSkinnedMesh === !0,
      morphTargets: ae.morphAttributes.position !== void 0,
      morphNormals: ae.morphAttributes.normal !== void 0,
      morphColors: ae.morphAttributes.color !== void 0,
      morphTargetsCount: ce,
      morphTextureStride: Ce,
      numDirLights: b.directional.length,
      numPointLights: b.point.length,
      numSpotLights: b.spot.length,
      numSpotLightMaps: b.spotLightMap.length,
      numRectAreaLights: b.rectArea.length,
      numHemiLights: b.hemi.length,
      numDirLightShadows: b.directionalShadowMap.length,
      numPointLightShadows: b.pointShadowMap.length,
      numSpotLightShadows: b.spotShadowMap.length,
      numSpotLightShadowsWithMaps: b.numSpotLightShadowsWithMaps,
      numLightProbes: b.numLightProbes,
      numClippingPlanes: l.numPlanes,
      numClipIntersection: l.numIntersection,
      dithering: C.dithering,
      shadowMapEnabled: r.shadowMap.enabled && D.length > 0,
      shadowMapType: r.shadowMap.type,
      toneMapping: kt,
      decodeVideoTexture: at && C.map.isVideoTexture === !0 && At.getTransfer(C.map.colorSpace) === Ut,
      decodeVideoTextureEmissive:
        tt && C.emissiveMap.isVideoTexture === !0 && At.getTransfer(C.emissiveMap.colorSpace) === Ut,
      premultipliedAlpha: C.premultipliedAlpha,
      doubleSided: C.side === Si,
      flipSided: C.side === Nn,
      useDepthPacking: C.depthPacking >= 0,
      depthPacking: C.depthPacking || 0,
      index0AttributeName: C.index0AttributeName,
      extensionClipCullDistance: lt && C.extensions.clipCullDistance === !0 && n.has("WEBGL_clip_cull_distance"),
      extensionMultiDraw: ((lt && C.extensions.multiDraw === !0) || Qe) && n.has("WEBGL_multi_draw"),
      rendererExtensionParallelShaderCompile: n.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: C.customProgramCacheKey(),
    };
    return (sn.vertexUv1s = h.has(1)), (sn.vertexUv2s = h.has(2)), (sn.vertexUv3s = h.has(3)), h.clear(), sn;
  }
  function _(C) {
    const b = [];
    if (
      (C.shaderID ? b.push(C.shaderID) : (b.push(C.customVertexShaderID), b.push(C.customFragmentShaderID)),
      C.defines !== void 0)
    )
      for (const D in C.defines) b.push(D), b.push(C.defines[D]);
    return (
      C.isRawShaderMaterial === !1 && (w(b, C), E(b, C), b.push(r.outputColorSpace)),
      b.push(C.customProgramCacheKey),
      b.join()
    );
  }
  function w(C, b) {
    C.push(b.precision),
      C.push(b.outputColorSpace),
      C.push(b.envMapMode),
      C.push(b.envMapCubeUVHeight),
      C.push(b.mapUv),
      C.push(b.alphaMapUv),
      C.push(b.lightMapUv),
      C.push(b.aoMapUv),
      C.push(b.bumpMapUv),
      C.push(b.normalMapUv),
      C.push(b.displacementMapUv),
      C.push(b.emissiveMapUv),
      C.push(b.metalnessMapUv),
      C.push(b.roughnessMapUv),
      C.push(b.anisotropyMapUv),
      C.push(b.clearcoatMapUv),
      C.push(b.clearcoatNormalMapUv),
      C.push(b.clearcoatRoughnessMapUv),
      C.push(b.iridescenceMapUv),
      C.push(b.iridescenceThicknessMapUv),
      C.push(b.sheenColorMapUv),
      C.push(b.sheenRoughnessMapUv),
      C.push(b.specularMapUv),
      C.push(b.specularColorMapUv),
      C.push(b.specularIntensityMapUv),
      C.push(b.transmissionMapUv),
      C.push(b.thicknessMapUv),
      C.push(b.combine),
      C.push(b.fogExp2),
      C.push(b.sizeAttenuation),
      C.push(b.morphTargetsCount),
      C.push(b.morphAttributeCount),
      C.push(b.numDirLights),
      C.push(b.numPointLights),
      C.push(b.numSpotLights),
      C.push(b.numSpotLightMaps),
      C.push(b.numHemiLights),
      C.push(b.numRectAreaLights),
      C.push(b.numDirLightShadows),
      C.push(b.numPointLightShadows),
      C.push(b.numSpotLightShadows),
      C.push(b.numSpotLightShadowsWithMaps),
      C.push(b.numLightProbes),
      C.push(b.shadowMapType),
      C.push(b.toneMapping),
      C.push(b.numClippingPlanes),
      C.push(b.numClipIntersection),
      C.push(b.depthPacking);
  }
  function E(C, b) {
    c.disableAll(),
      b.supportsVertexTextures && c.enable(0),
      b.instancing && c.enable(1),
      b.instancingColor && c.enable(2),
      b.instancingMorph && c.enable(3),
      b.matcap && c.enable(4),
      b.envMap && c.enable(5),
      b.normalMapObjectSpace && c.enable(6),
      b.normalMapTangentSpace && c.enable(7),
      b.clearcoat && c.enable(8),
      b.iridescence && c.enable(9),
      b.alphaTest && c.enable(10),
      b.vertexColors && c.enable(11),
      b.vertexAlphas && c.enable(12),
      b.vertexUv1s && c.enable(13),
      b.vertexUv2s && c.enable(14),
      b.vertexUv3s && c.enable(15),
      b.vertexTangents && c.enable(16),
      b.anisotropy && c.enable(17),
      b.alphaHash && c.enable(18),
      b.batching && c.enable(19),
      b.dispersion && c.enable(20),
      b.batchingColor && c.enable(21),
      C.push(c.mask),
      c.disableAll(),
      b.fog && c.enable(0),
      b.useFog && c.enable(1),
      b.flatShading && c.enable(2),
      b.logarithmicDepthBuffer && c.enable(3),
      b.reverseDepthBuffer && c.enable(4),
      b.skinning && c.enable(5),
      b.morphTargets && c.enable(6),
      b.morphNormals && c.enable(7),
      b.morphColors && c.enable(8),
      b.premultipliedAlpha && c.enable(9),
      b.shadowMapEnabled && c.enable(10),
      b.doubleSided && c.enable(11),
      b.flipSided && c.enable(12),
      b.useDepthPacking && c.enable(13),
      b.dithering && c.enable(14),
      b.transmission && c.enable(15),
      b.sheen && c.enable(16),
      b.opaque && c.enable(17),
      b.pointsUvs && c.enable(18),
      b.decodeVideoTexture && c.enable(19),
      b.decodeVideoTextureEmissive && c.enable(20),
      b.alphaToCoverage && c.enable(21),
      C.push(c.mask);
  }
  function A(C) {
    const b = x[C.type];
    let D;
    if (b) {
      const Y = yi[b];
      D = Yv.clone(Y.uniforms);
    } else D = C.uniforms;
    return D;
  }
  function O(C, b) {
    let D;
    for (let Y = 0, q = d.length; Y < q; Y++) {
      const K = d[Y];
      if (K.cacheKey === b) {
        (D = K), ++D.usedTimes;
        break;
      }
    }
    return D === void 0 && ((D = new WE(r, b, C, s)), d.push(D)), D;
  }
  function P(C) {
    if (--C.usedTimes === 0) {
      const b = d.indexOf(C);
      (d[b] = d[d.length - 1]), d.pop(), C.destroy();
    }
  }
  function L(C) {
    u.remove(C);
  }
  function F() {
    u.dispose();
  }
  return {
    getParameters: y,
    getProgramCacheKey: _,
    getUniforms: A,
    acquireProgram: O,
    releaseProgram: P,
    releaseShaderCache: L,
    programs: d,
    dispose: F,
  };
}
function JE() {
  let r = new WeakMap();
  function e(l) {
    return r.has(l);
  }
  function t(l) {
    let c = r.get(l);
    return c === void 0 && ((c = {}), r.set(l, c)), c;
  }
  function n(l) {
    r.delete(l);
  }
  function i(l, c, u) {
    r.get(l)[c] = u;
  }
  function s() {
    r = new WeakMap();
  }
  return { has: e, get: t, remove: n, update: i, dispose: s };
}
function KE(r, e) {
  return r.groupOrder !== e.groupOrder
    ? r.groupOrder - e.groupOrder
    : r.renderOrder !== e.renderOrder
      ? r.renderOrder - e.renderOrder
      : r.material.id !== e.material.id
        ? r.material.id - e.material.id
        : r.z !== e.z
          ? r.z - e.z
          : r.id - e.id;
}
function Gg(r, e) {
  return r.groupOrder !== e.groupOrder
    ? r.groupOrder - e.groupOrder
    : r.renderOrder !== e.renderOrder
      ? r.renderOrder - e.renderOrder
      : r.z !== e.z
        ? e.z - r.z
        : r.id - e.id;
}
function Wg() {
  const r = [];
  let e = 0;
  const t = [],
    n = [],
    i = [];
  function s() {
    (e = 0), (t.length = 0), (n.length = 0), (i.length = 0);
  }
  function l(p, m, v, x, M, y) {
    let _ = r[e];
    return (
      _ === void 0
        ? ((_ = {
            id: p.id,
            object: p,
            geometry: m,
            material: v,
            groupOrder: x,
            renderOrder: p.renderOrder,
            z: M,
            group: y,
          }),
          (r[e] = _))
        : ((_.id = p.id),
          (_.object = p),
          (_.geometry = m),
          (_.material = v),
          (_.groupOrder = x),
          (_.renderOrder = p.renderOrder),
          (_.z = M),
          (_.group = y)),
      e++,
      _
    );
  }
  function c(p, m, v, x, M, y) {
    const _ = l(p, m, v, x, M, y);
    v.transmission > 0 ? n.push(_) : v.transparent === !0 ? i.push(_) : t.push(_);
  }
  function u(p, m, v, x, M, y) {
    const _ = l(p, m, v, x, M, y);
    v.transmission > 0 ? n.unshift(_) : v.transparent === !0 ? i.unshift(_) : t.unshift(_);
  }
  function h(p, m) {
    t.length > 1 && t.sort(p || KE), n.length > 1 && n.sort(m || Gg), i.length > 1 && i.sort(m || Gg);
  }
  function d() {
    for (let p = e, m = r.length; p < m; p++) {
      const v = r[p];
      if (v.id === null) break;
      (v.id = null), (v.object = null), (v.geometry = null), (v.material = null), (v.group = null);
    }
  }
  return { opaque: t, transmissive: n, transparent: i, init: s, push: c, unshift: u, finish: d, sort: h };
}
function jE() {
  let r = new WeakMap();
  function e(n, i) {
    const s = r.get(n);
    let l;
    return s === void 0 ? ((l = new Wg()), r.set(n, [l])) : i >= s.length ? ((l = new Wg()), s.push(l)) : (l = s[i]), l;
  }
  function t() {
    r = new WeakMap();
  }
  return { get: e, dispose: t };
}
function QE() {
  const r = {};
  return {
    get: function (e) {
      if (r[e.id] !== void 0) return r[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = { direction: new N(), color: new Ne() };
          break;
        case "SpotLight":
          t = {
            position: new N(),
            direction: new N(),
            color: new Ne(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0,
          };
          break;
        case "PointLight":
          t = { position: new N(), color: new Ne(), distance: 0, decay: 0 };
          break;
        case "HemisphereLight":
          t = { direction: new N(), skyColor: new Ne(), groundColor: new Ne() };
          break;
        case "RectAreaLight":
          t = { color: new Ne(), position: new N(), halfWidth: new N(), halfHeight: new N() };
          break;
      }
      return (r[e.id] = t), t;
    },
  };
}
function $E() {
  const r = {};
  return {
    get: function (e) {
      if (r[e.id] !== void 0) return r[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = { shadowIntensity: 1, shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new fe() };
          break;
        case "SpotLight":
          t = { shadowIntensity: 1, shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new fe() };
          break;
        case "PointLight":
          t = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new fe(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3,
          };
          break;
      }
      return (r[e.id] = t), t;
    },
  };
}
let eT = 0;
function tT(r, e) {
  return (e.castShadow ? 2 : 0) - (r.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (r.map ? 1 : 0);
}
function nT(r) {
  const e = new QE(),
    t = $E(),
    n = {
      version: 0,
      hash: {
        directionalLength: -1,
        pointLength: -1,
        spotLength: -1,
        rectAreaLength: -1,
        hemiLength: -1,
        numDirectionalShadows: -1,
        numPointShadows: -1,
        numSpotShadows: -1,
        numSpotMaps: -1,
        numLightProbes: -1,
      },
      ambient: [0, 0, 0],
      probe: [],
      directional: [],
      directionalShadow: [],
      directionalShadowMap: [],
      directionalShadowMatrix: [],
      spot: [],
      spotLightMap: [],
      spotShadow: [],
      spotShadowMap: [],
      spotLightMatrix: [],
      rectArea: [],
      rectAreaLTC1: null,
      rectAreaLTC2: null,
      point: [],
      pointShadow: [],
      pointShadowMap: [],
      pointShadowMatrix: [],
      hemi: [],
      numSpotLightShadowsWithMaps: 0,
      numLightProbes: 0,
    };
  for (let h = 0; h < 9; h++) n.probe.push(new N());
  const i = new N(),
    s = new st(),
    l = new st();
  function c(h) {
    let d = 0,
      p = 0,
      m = 0;
    for (let C = 0; C < 9; C++) n.probe[C].set(0, 0, 0);
    let v = 0,
      x = 0,
      M = 0,
      y = 0,
      _ = 0,
      w = 0,
      E = 0,
      A = 0,
      O = 0,
      P = 0,
      L = 0;
    h.sort(tT);
    for (let C = 0, b = h.length; C < b; C++) {
      const D = h[C],
        Y = D.color,
        q = D.intensity,
        K = D.distance,
        ae = D.shadow && D.shadow.map ? D.shadow.map.texture : null;
      if (D.isAmbientLight) (d += Y.r * q), (p += Y.g * q), (m += Y.b * q);
      else if (D.isLightProbe) {
        for (let j = 0; j < 9; j++) n.probe[j].addScaledVector(D.sh.coefficients[j], q);
        L++;
      } else if (D.isDirectionalLight) {
        const j = e.get(D);
        if ((j.color.copy(D.color).multiplyScalar(D.intensity), D.castShadow)) {
          const me = D.shadow,
            k = t.get(D);
          (k.shadowIntensity = me.intensity),
            (k.shadowBias = me.bias),
            (k.shadowNormalBias = me.normalBias),
            (k.shadowRadius = me.radius),
            (k.shadowMapSize = me.mapSize),
            (n.directionalShadow[v] = k),
            (n.directionalShadowMap[v] = ae),
            (n.directionalShadowMatrix[v] = D.shadow.matrix),
            w++;
        }
        (n.directional[v] = j), v++;
      } else if (D.isSpotLight) {
        const j = e.get(D);
        j.position.setFromMatrixPosition(D.matrixWorld),
          j.color.copy(Y).multiplyScalar(q),
          (j.distance = K),
          (j.coneCos = Math.cos(D.angle)),
          (j.penumbraCos = Math.cos(D.angle * (1 - D.penumbra))),
          (j.decay = D.decay),
          (n.spot[M] = j);
        const me = D.shadow;
        if (
          (D.map && ((n.spotLightMap[O] = D.map), O++, me.updateMatrices(D), D.castShadow && P++),
          (n.spotLightMatrix[M] = me.matrix),
          D.castShadow)
        ) {
          const k = t.get(D);
          (k.shadowIntensity = me.intensity),
            (k.shadowBias = me.bias),
            (k.shadowNormalBias = me.normalBias),
            (k.shadowRadius = me.radius),
            (k.shadowMapSize = me.mapSize),
            (n.spotShadow[M] = k),
            (n.spotShadowMap[M] = ae),
            A++;
        }
        M++;
      } else if (D.isRectAreaLight) {
        const j = e.get(D);
        j.color.copy(Y).multiplyScalar(q),
          j.halfWidth.set(D.width * 0.5, 0, 0),
          j.halfHeight.set(0, D.height * 0.5, 0),
          (n.rectArea[y] = j),
          y++;
      } else if (D.isPointLight) {
        const j = e.get(D);
        if (
          (j.color.copy(D.color).multiplyScalar(D.intensity),
          (j.distance = D.distance),
          (j.decay = D.decay),
          D.castShadow)
        ) {
          const me = D.shadow,
            k = t.get(D);
          (k.shadowIntensity = me.intensity),
            (k.shadowBias = me.bias),
            (k.shadowNormalBias = me.normalBias),
            (k.shadowRadius = me.radius),
            (k.shadowMapSize = me.mapSize),
            (k.shadowCameraNear = me.camera.near),
            (k.shadowCameraFar = me.camera.far),
            (n.pointShadow[x] = k),
            (n.pointShadowMap[x] = ae),
            (n.pointShadowMatrix[x] = D.shadow.matrix),
            E++;
        }
        (n.point[x] = j), x++;
      } else if (D.isHemisphereLight) {
        const j = e.get(D);
        j.skyColor.copy(D.color).multiplyScalar(q),
          j.groundColor.copy(D.groundColor).multiplyScalar(q),
          (n.hemi[_] = j),
          _++;
      }
    }
    y > 0 &&
      (r.has("OES_texture_float_linear") === !0
        ? ((n.rectAreaLTC1 = we.LTC_FLOAT_1), (n.rectAreaLTC2 = we.LTC_FLOAT_2))
        : ((n.rectAreaLTC1 = we.LTC_HALF_1), (n.rectAreaLTC2 = we.LTC_HALF_2))),
      (n.ambient[0] = d),
      (n.ambient[1] = p),
      (n.ambient[2] = m);
    const F = n.hash;
    (F.directionalLength !== v ||
      F.pointLength !== x ||
      F.spotLength !== M ||
      F.rectAreaLength !== y ||
      F.hemiLength !== _ ||
      F.numDirectionalShadows !== w ||
      F.numPointShadows !== E ||
      F.numSpotShadows !== A ||
      F.numSpotMaps !== O ||
      F.numLightProbes !== L) &&
      ((n.directional.length = v),
      (n.spot.length = M),
      (n.rectArea.length = y),
      (n.point.length = x),
      (n.hemi.length = _),
      (n.directionalShadow.length = w),
      (n.directionalShadowMap.length = w),
      (n.pointShadow.length = E),
      (n.pointShadowMap.length = E),
      (n.spotShadow.length = A),
      (n.spotShadowMap.length = A),
      (n.directionalShadowMatrix.length = w),
      (n.pointShadowMatrix.length = E),
      (n.spotLightMatrix.length = A + O - P),
      (n.spotLightMap.length = O),
      (n.numSpotLightShadowsWithMaps = P),
      (n.numLightProbes = L),
      (F.directionalLength = v),
      (F.pointLength = x),
      (F.spotLength = M),
      (F.rectAreaLength = y),
      (F.hemiLength = _),
      (F.numDirectionalShadows = w),
      (F.numPointShadows = E),
      (F.numSpotShadows = A),
      (F.numSpotMaps = O),
      (F.numLightProbes = L),
      (n.version = eT++));
  }
  function u(h, d) {
    let p = 0,
      m = 0,
      v = 0,
      x = 0,
      M = 0;
    const y = d.matrixWorldInverse;
    for (let _ = 0, w = h.length; _ < w; _++) {
      const E = h[_];
      if (E.isDirectionalLight) {
        const A = n.directional[p];
        A.direction.setFromMatrixPosition(E.matrixWorld),
          i.setFromMatrixPosition(E.target.matrixWorld),
          A.direction.sub(i),
          A.direction.transformDirection(y),
          p++;
      } else if (E.isSpotLight) {
        const A = n.spot[v];
        A.position.setFromMatrixPosition(E.matrixWorld),
          A.position.applyMatrix4(y),
          A.direction.setFromMatrixPosition(E.matrixWorld),
          i.setFromMatrixPosition(E.target.matrixWorld),
          A.direction.sub(i),
          A.direction.transformDirection(y),
          v++;
      } else if (E.isRectAreaLight) {
        const A = n.rectArea[x];
        A.position.setFromMatrixPosition(E.matrixWorld),
          A.position.applyMatrix4(y),
          l.identity(),
          s.copy(E.matrixWorld),
          s.premultiply(y),
          l.extractRotation(s),
          A.halfWidth.set(E.width * 0.5, 0, 0),
          A.halfHeight.set(0, E.height * 0.5, 0),
          A.halfWidth.applyMatrix4(l),
          A.halfHeight.applyMatrix4(l),
          x++;
      } else if (E.isPointLight) {
        const A = n.point[m];
        A.position.setFromMatrixPosition(E.matrixWorld), A.position.applyMatrix4(y), m++;
      } else if (E.isHemisphereLight) {
        const A = n.hemi[M];
        A.direction.setFromMatrixPosition(E.matrixWorld), A.direction.transformDirection(y), M++;
      }
    }
  }
  return { setup: c, setupView: u, state: n };
}
function Xg(r) {
  const e = new nT(r),
    t = [],
    n = [];
  function i(d) {
    (h.camera = d), (t.length = 0), (n.length = 0);
  }
  function s(d) {
    t.push(d);
  }
  function l(d) {
    n.push(d);
  }
  function c() {
    e.setup(t);
  }
  function u(d) {
    e.setupView(t, d);
  }
  const h = { lightsArray: t, shadowsArray: n, camera: null, lights: e, transmissionRenderTarget: {} };
  return { init: i, state: h, setupLights: c, setupLightsView: u, pushLight: s, pushShadow: l };
}
function iT(r) {
  let e = new WeakMap();
  function t(i, s = 0) {
    const l = e.get(i);
    let c;
    return (
      l === void 0 ? ((c = new Xg(r)), e.set(i, [c])) : s >= l.length ? ((c = new Xg(r)), l.push(c)) : (c = l[s]), c
    );
  }
  function n() {
    e = new WeakMap();
  }
  return { get: t, dispose: n };
}
class Qd extends Cn {
  static get type() {
    return "MeshDepthMaterial";
  }
  constructor(e) {
    super(),
      (this.isMeshDepthMaterial = !0),
      (this.depthPacking = Pv),
      (this.map = null),
      (this.alphaMap = null),
      (this.displacementMap = null),
      (this.displacementScale = 1),
      (this.displacementBias = 0),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      (this.depthPacking = e.depthPacking),
      (this.map = e.map),
      (this.alphaMap = e.alphaMap),
      (this.displacementMap = e.displacementMap),
      (this.displacementScale = e.displacementScale),
      (this.displacementBias = e.displacementBias),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      this
    );
  }
}
class $d extends Cn {
  static get type() {
    return "MeshDistanceMaterial";
  }
  constructor(e) {
    super(),
      (this.isMeshDistanceMaterial = !0),
      (this.map = null),
      (this.alphaMap = null),
      (this.displacementMap = null),
      (this.displacementScale = 1),
      (this.displacementBias = 0),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      (this.map = e.map),
      (this.alphaMap = e.alphaMap),
      (this.displacementMap = e.displacementMap),
      (this.displacementScale = e.displacementScale),
      (this.displacementBias = e.displacementBias),
      this
    );
  }
}
const rT = `void main() {
	gl_Position = vec4( position, 1.0 );
}`,
  sT = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function oT(r, e, t) {
  let n = new Ga();
  const i = new fe(),
    s = new fe(),
    l = new Ct(),
    c = new Qd({ depthPacking: Iv }),
    u = new $d(),
    h = {},
    d = t.maxTextureSize,
    p = { [ar]: Nn, [Nn]: ar, [Si]: Si },
    m = new Ei({
      defines: { VSM_SAMPLES: 8 },
      uniforms: { shadow_pass: { value: null }, resolution: { value: new fe() }, radius: { value: 4 } },
      vertexShader: rT,
      fragmentShader: sT,
    }),
    v = m.clone();
  v.defines.HORIZONTAL_PASS = 1;
  const x = new vt();
  x.setAttribute("position", new Ot(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
  const M = new rn(x, m),
    y = this;
  (this.enabled = !1), (this.autoUpdate = !0), (this.needsUpdate = !1), (this.type = Uu);
  let _ = this.type;
  this.render = function (P, L, F) {
    if (y.enabled === !1 || (y.autoUpdate === !1 && y.needsUpdate === !1) || P.length === 0) return;
    const C = r.getRenderTarget(),
      b = r.getActiveCubeFace(),
      D = r.getActiveMipmapLevel(),
      Y = r.state;
    Y.setBlending(sr), Y.buffers.color.setClear(1, 1, 1, 1), Y.buffers.depth.setTest(!0), Y.setScissorTest(!1);
    const q = _ !== xi && this.type === xi,
      K = _ === xi && this.type !== xi;
    for (let ae = 0, j = P.length; ae < j; ae++) {
      const me = P[ae],
        k = me.shadow;
      if (k === void 0) {
        console.warn("THREE.WebGLShadowMap:", me, "has no shadow.");
        continue;
      }
      if (k.autoUpdate === !1 && k.needsUpdate === !1) continue;
      i.copy(k.mapSize);
      const ne = k.getFrameExtents();
      if (
        (i.multiply(ne),
        s.copy(k.mapSize),
        (i.x > d || i.y > d) &&
          (i.x > d && ((s.x = Math.floor(d / ne.x)), (i.x = s.x * ne.x), (k.mapSize.x = s.x)),
          i.y > d && ((s.y = Math.floor(d / ne.y)), (i.y = s.y * ne.y), (k.mapSize.y = s.y))),
        k.map === null || q === !0 || K === !0)
      ) {
        const ce = this.type !== xi ? { minFilter: _n, magFilter: _n } : {};
        k.map !== null && k.map.dispose(),
          (k.map = new wi(i.x, i.y, ce)),
          (k.map.texture.name = me.name + ".shadowMap"),
          k.camera.updateProjectionMatrix();
      }
      r.setRenderTarget(k.map), r.clear();
      const te = k.getViewportCount();
      for (let ce = 0; ce < te; ce++) {
        const Ce = k.getViewport(ce);
        l.set(s.x * Ce.x, s.y * Ce.y, s.x * Ce.z, s.y * Ce.w),
          Y.viewport(l),
          k.updateMatrices(me, ce),
          (n = k.getFrustum()),
          A(L, F, k.camera, me, this.type);
      }
      k.isPointLightShadow !== !0 && this.type === xi && w(k, F), (k.needsUpdate = !1);
    }
    (_ = this.type), (y.needsUpdate = !1), r.setRenderTarget(C, b, D);
  };
  function w(P, L) {
    const F = e.update(M);
    m.defines.VSM_SAMPLES !== P.blurSamples &&
      ((m.defines.VSM_SAMPLES = P.blurSamples),
      (v.defines.VSM_SAMPLES = P.blurSamples),
      (m.needsUpdate = !0),
      (v.needsUpdate = !0)),
      P.mapPass === null && (P.mapPass = new wi(i.x, i.y)),
      (m.uniforms.shadow_pass.value = P.map.texture),
      (m.uniforms.resolution.value = P.mapSize),
      (m.uniforms.radius.value = P.radius),
      r.setRenderTarget(P.mapPass),
      r.clear(),
      r.renderBufferDirect(L, null, F, m, M, null),
      (v.uniforms.shadow_pass.value = P.mapPass.texture),
      (v.uniforms.resolution.value = P.mapSize),
      (v.uniforms.radius.value = P.radius),
      r.setRenderTarget(P.map),
      r.clear(),
      r.renderBufferDirect(L, null, F, v, M, null);
  }
  function E(P, L, F, C) {
    let b = null;
    const D = F.isPointLight === !0 ? P.customDistanceMaterial : P.customDepthMaterial;
    if (D !== void 0) b = D;
    else if (
      ((b = F.isPointLight === !0 ? u : c),
      (r.localClippingEnabled &&
        L.clipShadows === !0 &&
        Array.isArray(L.clippingPlanes) &&
        L.clippingPlanes.length !== 0) ||
        (L.displacementMap && L.displacementScale !== 0) ||
        (L.alphaMap && L.alphaTest > 0) ||
        (L.map && L.alphaTest > 0))
    ) {
      const Y = b.uuid,
        q = L.uuid;
      let K = h[Y];
      K === void 0 && ((K = {}), (h[Y] = K));
      let ae = K[q];
      ae === void 0 && ((ae = b.clone()), (K[q] = ae), L.addEventListener("dispose", O)), (b = ae);
    }
    if (
      ((b.visible = L.visible),
      (b.wireframe = L.wireframe),
      C === xi
        ? (b.side = L.shadowSide !== null ? L.shadowSide : L.side)
        : (b.side = L.shadowSide !== null ? L.shadowSide : p[L.side]),
      (b.alphaMap = L.alphaMap),
      (b.alphaTest = L.alphaTest),
      (b.map = L.map),
      (b.clipShadows = L.clipShadows),
      (b.clippingPlanes = L.clippingPlanes),
      (b.clipIntersection = L.clipIntersection),
      (b.displacementMap = L.displacementMap),
      (b.displacementScale = L.displacementScale),
      (b.displacementBias = L.displacementBias),
      (b.wireframeLinewidth = L.wireframeLinewidth),
      (b.linewidth = L.linewidth),
      F.isPointLight === !0 && b.isMeshDistanceMaterial === !0)
    ) {
      const Y = r.properties.get(b);
      Y.light = F;
    }
    return b;
  }
  function A(P, L, F, C, b) {
    if (P.visible === !1) return;
    if (
      P.layers.test(L.layers) &&
      (P.isMesh || P.isLine || P.isPoints) &&
      (P.castShadow || (P.receiveShadow && b === xi)) &&
      (!P.frustumCulled || n.intersectsObject(P))
    ) {
      P.modelViewMatrix.multiplyMatrices(F.matrixWorldInverse, P.matrixWorld);
      const q = e.update(P),
        K = P.material;
      if (Array.isArray(K)) {
        const ae = q.groups;
        for (let j = 0, me = ae.length; j < me; j++) {
          const k = ae[j],
            ne = K[k.materialIndex];
          if (ne && ne.visible) {
            const te = E(P, ne, C, b);
            P.onBeforeShadow(r, P, L, F, q, te, k),
              r.renderBufferDirect(F, null, q, te, P, k),
              P.onAfterShadow(r, P, L, F, q, te, k);
          }
        }
      } else if (K.visible) {
        const ae = E(P, K, C, b);
        P.onBeforeShadow(r, P, L, F, q, ae, null),
          r.renderBufferDirect(F, null, q, ae, P, null),
          P.onAfterShadow(r, P, L, F, q, ae, null);
      }
    }
    const Y = P.children;
    for (let q = 0, K = Y.length; q < K; q++) A(Y[q], L, F, C, b);
  }
  function O(P) {
    P.target.removeEventListener("dispose", O);
    for (const F in h) {
      const C = h[F],
        b = P.target.uuid;
      b in C && (C[b].dispose(), delete C[b]);
    }
  }
}
const aT = { [Jc]: Kc, [jc]: eu, [Qc]: tu, [_s]: $c, [Kc]: Jc, [eu]: jc, [tu]: Qc, [$c]: _s };
function lT(r, e) {
  function t() {
    let H = !1;
    const Te = new Ct();
    let se = null;
    const he = new Ct(0, 0, 0, 0);
    return {
      setMask: function (Ue) {
        se !== Ue && !H && (r.colorMask(Ue, Ue, Ue, Ue), (se = Ue));
      },
      setLocked: function (Ue) {
        H = Ue;
      },
      setClear: function (Ue, Re, lt, kt, sn) {
        sn === !0 && ((Ue *= kt), (Re *= kt), (lt *= kt)),
          Te.set(Ue, Re, lt, kt),
          he.equals(Te) === !1 && (r.clearColor(Ue, Re, lt, kt), he.copy(Te));
      },
      reset: function () {
        (H = !1), (se = null), he.set(-1, 0, 0, 0);
      },
    };
  }
  function n() {
    let H = !1,
      Te = !1,
      se = null,
      he = null,
      Ue = null;
    return {
      setReversed: function (Re) {
        if (Te !== Re) {
          const lt = e.get("EXT_clip_control");
          Te
            ? lt.clipControlEXT(lt.LOWER_LEFT_EXT, lt.ZERO_TO_ONE_EXT)
            : lt.clipControlEXT(lt.LOWER_LEFT_EXT, lt.NEGATIVE_ONE_TO_ONE_EXT);
          const kt = Ue;
          (Ue = null), this.setClear(kt);
        }
        Te = Re;
      },
      getReversed: function () {
        return Te;
      },
      setTest: function (Re) {
        Re ? xe(r.DEPTH_TEST) : je(r.DEPTH_TEST);
      },
      setMask: function (Re) {
        se !== Re && !H && (r.depthMask(Re), (se = Re));
      },
      setFunc: function (Re) {
        if ((Te && (Re = aT[Re]), he !== Re)) {
          switch (Re) {
            case Jc:
              r.depthFunc(r.NEVER);
              break;
            case Kc:
              r.depthFunc(r.ALWAYS);
              break;
            case jc:
              r.depthFunc(r.LESS);
              break;
            case _s:
              r.depthFunc(r.LEQUAL);
              break;
            case Qc:
              r.depthFunc(r.EQUAL);
              break;
            case $c:
              r.depthFunc(r.GEQUAL);
              break;
            case eu:
              r.depthFunc(r.GREATER);
              break;
            case tu:
              r.depthFunc(r.NOTEQUAL);
              break;
            default:
              r.depthFunc(r.LEQUAL);
          }
          he = Re;
        }
      },
      setLocked: function (Re) {
        H = Re;
      },
      setClear: function (Re) {
        Ue !== Re && (Te && (Re = 1 - Re), r.clearDepth(Re), (Ue = Re));
      },
      reset: function () {
        (H = !1), (se = null), (he = null), (Ue = null), (Te = !1);
      },
    };
  }
  function i() {
    let H = !1,
      Te = null,
      se = null,
      he = null,
      Ue = null,
      Re = null,
      lt = null,
      kt = null,
      sn = null;
    return {
      setTest: function (Pt) {
        H || (Pt ? xe(r.STENCIL_TEST) : je(r.STENCIL_TEST));
      },
      setMask: function (Pt) {
        Te !== Pt && !H && (r.stencilMask(Pt), (Te = Pt));
      },
      setFunc: function (Pt, Bn, di) {
        (se !== Pt || he !== Bn || Ue !== di) && (r.stencilFunc(Pt, Bn, di), (se = Pt), (he = Bn), (Ue = di));
      },
      setOp: function (Pt, Bn, di) {
        (Re !== Pt || lt !== Bn || kt !== di) && (r.stencilOp(Pt, Bn, di), (Re = Pt), (lt = Bn), (kt = di));
      },
      setLocked: function (Pt) {
        H = Pt;
      },
      setClear: function (Pt) {
        sn !== Pt && (r.clearStencil(Pt), (sn = Pt));
      },
      reset: function () {
        (H = !1),
          (Te = null),
          (se = null),
          (he = null),
          (Ue = null),
          (Re = null),
          (lt = null),
          (kt = null),
          (sn = null);
      },
    };
  }
  const s = new t(),
    l = new n(),
    c = new i(),
    u = new WeakMap(),
    h = new WeakMap();
  let d = {},
    p = {},
    m = new WeakMap(),
    v = [],
    x = null,
    M = !1,
    y = null,
    _ = null,
    w = null,
    E = null,
    A = null,
    O = null,
    P = null,
    L = new Ne(0, 0, 0),
    F = 0,
    C = !1,
    b = null,
    D = null,
    Y = null,
    q = null,
    K = null;
  const ae = r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let j = !1,
    me = 0;
  const k = r.getParameter(r.VERSION);
  k.indexOf("WebGL") !== -1
    ? ((me = parseFloat(/^WebGL (\d)/.exec(k)[1])), (j = me >= 1))
    : k.indexOf("OpenGL ES") !== -1 && ((me = parseFloat(/^OpenGL ES (\d)/.exec(k)[1])), (j = me >= 2));
  let ne = null,
    te = {};
  const ce = r.getParameter(r.SCISSOR_BOX),
    Ce = r.getParameter(r.VIEWPORT),
    Ye = new Ct().fromArray(ce),
    re = new Ct().fromArray(Ce);
  function ge(H, Te, se, he) {
    const Ue = new Uint8Array(4),
      Re = r.createTexture();
    r.bindTexture(H, Re),
      r.texParameteri(H, r.TEXTURE_MIN_FILTER, r.NEAREST),
      r.texParameteri(H, r.TEXTURE_MAG_FILTER, r.NEAREST);
    for (let lt = 0; lt < se; lt++)
      H === r.TEXTURE_3D || H === r.TEXTURE_2D_ARRAY
        ? r.texImage3D(Te, 0, r.RGBA, 1, 1, he, 0, r.RGBA, r.UNSIGNED_BYTE, Ue)
        : r.texImage2D(Te + lt, 0, r.RGBA, 1, 1, 0, r.RGBA, r.UNSIGNED_BYTE, Ue);
    return Re;
  }
  const De = {};
  (De[r.TEXTURE_2D] = ge(r.TEXTURE_2D, r.TEXTURE_2D, 1)),
    (De[r.TEXTURE_CUBE_MAP] = ge(r.TEXTURE_CUBE_MAP, r.TEXTURE_CUBE_MAP_POSITIVE_X, 6)),
    (De[r.TEXTURE_2D_ARRAY] = ge(r.TEXTURE_2D_ARRAY, r.TEXTURE_2D_ARRAY, 1, 1)),
    (De[r.TEXTURE_3D] = ge(r.TEXTURE_3D, r.TEXTURE_3D, 1, 1)),
    s.setClear(0, 0, 0, 1),
    l.setClear(1),
    c.setClear(0),
    xe(r.DEPTH_TEST),
    l.setFunc(_s),
    ve(!1),
    Oe(pd),
    xe(r.CULL_FACE),
    z(sr);
  function xe(H) {
    d[H] !== !0 && (r.enable(H), (d[H] = !0));
  }
  function je(H) {
    d[H] !== !1 && (r.disable(H), (d[H] = !1));
  }
  function it(H, Te) {
    return p[H] !== Te
      ? (r.bindFramebuffer(H, Te),
        (p[H] = Te),
        H === r.DRAW_FRAMEBUFFER && (p[r.FRAMEBUFFER] = Te),
        H === r.FRAMEBUFFER && (p[r.DRAW_FRAMEBUFFER] = Te),
        !0)
      : !1;
  }
  function Qe(H, Te) {
    let se = v,
      he = !1;
    if (H) {
      (se = m.get(Te)), se === void 0 && ((se = []), m.set(Te, se));
      const Ue = H.textures;
      if (se.length !== Ue.length || se[0] !== r.COLOR_ATTACHMENT0) {
        for (let Re = 0, lt = Ue.length; Re < lt; Re++) se[Re] = r.COLOR_ATTACHMENT0 + Re;
        (se.length = Ue.length), (he = !0);
      }
    } else se[0] !== r.BACK && ((se[0] = r.BACK), (he = !0));
    he && r.drawBuffers(se);
  }
  function at(H) {
    return x !== H ? (r.useProgram(H), (x = H), !0) : !1;
  }
  const ue = { [Pr]: r.FUNC_ADD, [tv]: r.FUNC_SUBTRACT, [nv]: r.FUNC_REVERSE_SUBTRACT };
  (ue[iv] = r.MIN), (ue[rv] = r.MAX);
  const pe = {
    [sv]: r.ZERO,
    [ov]: r.ONE,
    [av]: r.SRC_COLOR,
    [qc]: r.SRC_ALPHA,
    [dv]: r.SRC_ALPHA_SATURATE,
    [hv]: r.DST_COLOR,
    [cv]: r.DST_ALPHA,
    [lv]: r.ONE_MINUS_SRC_COLOR,
    [Zc]: r.ONE_MINUS_SRC_ALPHA,
    [fv]: r.ONE_MINUS_DST_COLOR,
    [uv]: r.ONE_MINUS_DST_ALPHA,
    [pv]: r.CONSTANT_COLOR,
    [mv]: r.ONE_MINUS_CONSTANT_COLOR,
    [gv]: r.CONSTANT_ALPHA,
    [vv]: r.ONE_MINUS_CONSTANT_ALPHA,
  };
  function z(H, Te, se, he, Ue, Re, lt, kt, sn, Pt) {
    if (H === sr) {
      M === !0 && (je(r.BLEND), (M = !1));
      return;
    }
    if ((M === !1 && (xe(r.BLEND), (M = !0)), H !== ev)) {
      if (H !== y || Pt !== C) {
        if (((_ !== Pr || A !== Pr) && (r.blendEquation(r.FUNC_ADD), (_ = Pr), (A = Pr)), Pt))
          switch (H) {
            case ds:
              r.blendFuncSeparate(r.ONE, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA);
              break;
            case md:
              r.blendFunc(r.ONE, r.ONE);
              break;
            case gd:
              r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE);
              break;
            case vd:
              r.blendFuncSeparate(r.ZERO, r.SRC_COLOR, r.ZERO, r.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", H);
              break;
          }
        else
          switch (H) {
            case ds:
              r.blendFuncSeparate(r.SRC_ALPHA, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA);
              break;
            case md:
              r.blendFunc(r.SRC_ALPHA, r.ONE);
              break;
            case gd:
              r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE);
              break;
            case vd:
              r.blendFunc(r.ZERO, r.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", H);
              break;
          }
        (w = null), (E = null), (O = null), (P = null), L.set(0, 0, 0), (F = 0), (y = H), (C = Pt);
      }
      return;
    }
    (Ue = Ue || Te),
      (Re = Re || se),
      (lt = lt || he),
      (Te !== _ || Ue !== A) && (r.blendEquationSeparate(ue[Te], ue[Ue]), (_ = Te), (A = Ue)),
      (se !== w || he !== E || Re !== O || lt !== P) &&
        (r.blendFuncSeparate(pe[se], pe[he], pe[Re], pe[lt]), (w = se), (E = he), (O = Re), (P = lt)),
      (kt.equals(L) === !1 || sn !== F) && (r.blendColor(kt.r, kt.g, kt.b, sn), L.copy(kt), (F = sn)),
      (y = H),
      (C = !1);
  }
  function qe(H, Te) {
    H.side === Si ? je(r.CULL_FACE) : xe(r.CULL_FACE);
    let se = H.side === Nn;
    Te && (se = !se),
      ve(se),
      H.blending === ds && H.transparent === !1
        ? z(sr)
        : z(
            H.blending,
            H.blendEquation,
            H.blendSrc,
            H.blendDst,
            H.blendEquationAlpha,
            H.blendSrcAlpha,
            H.blendDstAlpha,
            H.blendColor,
            H.blendAlpha,
            H.premultipliedAlpha
          ),
      l.setFunc(H.depthFunc),
      l.setTest(H.depthTest),
      l.setMask(H.depthWrite),
      s.setMask(H.colorWrite);
    const he = H.stencilWrite;
    c.setTest(he),
      he &&
        (c.setMask(H.stencilWriteMask),
        c.setFunc(H.stencilFunc, H.stencilRef, H.stencilFuncMask),
        c.setOp(H.stencilFail, H.stencilZFail, H.stencilZPass)),
      tt(H.polygonOffset, H.polygonOffsetFactor, H.polygonOffsetUnits),
      H.alphaToCoverage === !0 ? xe(r.SAMPLE_ALPHA_TO_COVERAGE) : je(r.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function ve(H) {
    b !== H && (H ? r.frontFace(r.CW) : r.frontFace(r.CCW), (b = H));
  }
  function Oe(H) {
    H !== j0
      ? (xe(r.CULL_FACE),
        H !== D && (H === pd ? r.cullFace(r.BACK) : H === Q0 ? r.cullFace(r.FRONT) : r.cullFace(r.FRONT_AND_BACK)))
      : je(r.CULL_FACE),
      (D = H);
  }
  function Me(H) {
    H !== Y && (j && r.lineWidth(H), (Y = H));
  }
  function tt(H, Te, se) {
    H
      ? (xe(r.POLYGON_OFFSET_FILL), (q !== Te || K !== se) && (r.polygonOffset(Te, se), (q = Te), (K = se)))
      : je(r.POLYGON_OFFSET_FILL);
  }
  function Ie(H) {
    H ? xe(r.SCISSOR_TEST) : je(r.SCISSOR_TEST);
  }
  function U(H) {
    H === void 0 && (H = r.TEXTURE0 + ae - 1), ne !== H && (r.activeTexture(H), (ne = H));
  }
  function R(H, Te, se) {
    se === void 0 && (ne === null ? (se = r.TEXTURE0 + ae - 1) : (se = ne));
    let he = te[se];
    he === void 0 && ((he = { type: void 0, texture: void 0 }), (te[se] = he)),
      (he.type !== H || he.texture !== Te) &&
        (ne !== se && (r.activeTexture(se), (ne = se)),
        r.bindTexture(H, Te || De[H]),
        (he.type = H),
        (he.texture = Te));
  }
  function Z() {
    const H = te[ne];
    H !== void 0 && H.type !== void 0 && (r.bindTexture(H.type, null), (H.type = void 0), (H.texture = void 0));
  }
  function oe() {
    try {
      r.compressedTexImage2D.apply(r, arguments);
    } catch (H) {
      console.error("THREE.WebGLState:", H);
    }
  }
  function de() {
    try {
      r.compressedTexImage3D.apply(r, arguments);
    } catch (H) {
      console.error("THREE.WebGLState:", H);
    }
  }
  function le() {
    try {
      r.texSubImage2D.apply(r, arguments);
    } catch (H) {
      console.error("THREE.WebGLState:", H);
    }
  }
  function We() {
    try {
      r.texSubImage3D.apply(r, arguments);
    } catch (H) {
      console.error("THREE.WebGLState:", H);
    }
  }
  function Ee() {
    try {
      r.compressedTexSubImage2D.apply(r, arguments);
    } catch (H) {
      console.error("THREE.WebGLState:", H);
    }
  }
  function Fe() {
    try {
      r.compressedTexSubImage3D.apply(r, arguments);
    } catch (H) {
      console.error("THREE.WebGLState:", H);
    }
  }
  function Mt() {
    try {
      r.texStorage2D.apply(r, arguments);
    } catch (H) {
      console.error("THREE.WebGLState:", H);
    }
  }
  function _e() {
    try {
      r.texStorage3D.apply(r, arguments);
    } catch (H) {
      console.error("THREE.WebGLState:", H);
    }
  }
  function Be() {
    try {
      r.texImage2D.apply(r, arguments);
    } catch (H) {
      console.error("THREE.WebGLState:", H);
    }
  }
  function nt() {
    try {
      r.texImage3D.apply(r, arguments);
    } catch (H) {
      console.error("THREE.WebGLState:", H);
    }
  }
  function ot(H) {
    Ye.equals(H) === !1 && (r.scissor(H.x, H.y, H.z, H.w), Ye.copy(H));
  }
  function ze(H) {
    re.equals(H) === !1 && (r.viewport(H.x, H.y, H.z, H.w), re.copy(H));
  }
  function Et(H, Te) {
    let se = h.get(Te);
    se === void 0 && ((se = new WeakMap()), h.set(Te, se));
    let he = se.get(H);
    he === void 0 && ((he = r.getUniformBlockIndex(Te, H.name)), se.set(H, he));
  }
  function ct(H, Te) {
    const he = h.get(Te).get(H);
    u.get(Te) !== he && (r.uniformBlockBinding(Te, he, H.__bindingPointIndex), u.set(Te, he));
  }
  function Nt() {
    r.disable(r.BLEND),
      r.disable(r.CULL_FACE),
      r.disable(r.DEPTH_TEST),
      r.disable(r.POLYGON_OFFSET_FILL),
      r.disable(r.SCISSOR_TEST),
      r.disable(r.STENCIL_TEST),
      r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),
      r.blendEquation(r.FUNC_ADD),
      r.blendFunc(r.ONE, r.ZERO),
      r.blendFuncSeparate(r.ONE, r.ZERO, r.ONE, r.ZERO),
      r.blendColor(0, 0, 0, 0),
      r.colorMask(!0, !0, !0, !0),
      r.clearColor(0, 0, 0, 0),
      r.depthMask(!0),
      r.depthFunc(r.LESS),
      l.setReversed(!1),
      r.clearDepth(1),
      r.stencilMask(4294967295),
      r.stencilFunc(r.ALWAYS, 0, 4294967295),
      r.stencilOp(r.KEEP, r.KEEP, r.KEEP),
      r.clearStencil(0),
      r.cullFace(r.BACK),
      r.frontFace(r.CCW),
      r.polygonOffset(0, 0),
      r.activeTexture(r.TEXTURE0),
      r.bindFramebuffer(r.FRAMEBUFFER, null),
      r.bindFramebuffer(r.DRAW_FRAMEBUFFER, null),
      r.bindFramebuffer(r.READ_FRAMEBUFFER, null),
      r.useProgram(null),
      r.lineWidth(1),
      r.scissor(0, 0, r.canvas.width, r.canvas.height),
      r.viewport(0, 0, r.canvas.width, r.canvas.height),
      (d = {}),
      (ne = null),
      (te = {}),
      (p = {}),
      (m = new WeakMap()),
      (v = []),
      (x = null),
      (M = !1),
      (y = null),
      (_ = null),
      (w = null),
      (E = null),
      (A = null),
      (O = null),
      (P = null),
      (L = new Ne(0, 0, 0)),
      (F = 0),
      (C = !1),
      (b = null),
      (D = null),
      (Y = null),
      (q = null),
      (K = null),
      Ye.set(0, 0, r.canvas.width, r.canvas.height),
      re.set(0, 0, r.canvas.width, r.canvas.height),
      s.reset(),
      l.reset(),
      c.reset();
  }
  return {
    buffers: { color: s, depth: l, stencil: c },
    enable: xe,
    disable: je,
    bindFramebuffer: it,
    drawBuffers: Qe,
    useProgram: at,
    setBlending: z,
    setMaterial: qe,
    setFlipSided: ve,
    setCullFace: Oe,
    setLineWidth: Me,
    setPolygonOffset: tt,
    setScissorTest: Ie,
    activeTexture: U,
    bindTexture: R,
    unbindTexture: Z,
    compressedTexImage2D: oe,
    compressedTexImage3D: de,
    texImage2D: Be,
    texImage3D: nt,
    updateUBOMapping: Et,
    uniformBlockBinding: ct,
    texStorage2D: Mt,
    texStorage3D: _e,
    texSubImage2D: le,
    texSubImage3D: We,
    compressedTexSubImage2D: Ee,
    compressedTexSubImage3D: Fe,
    scissor: ot,
    viewport: ze,
    reset: Nt,
  };
}
function cT(r, e) {
  const t = r.image && r.image.width ? r.image.width / r.image.height : 1;
  return (
    t > e
      ? ((r.repeat.x = 1), (r.repeat.y = t / e), (r.offset.x = 0), (r.offset.y = (1 - r.repeat.y) / 2))
      : ((r.repeat.x = e / t), (r.repeat.y = 1), (r.offset.x = (1 - r.repeat.x) / 2), (r.offset.y = 0)),
    r
  );
}
function uT(r, e) {
  const t = r.image && r.image.width ? r.image.width / r.image.height : 1;
  return (
    t > e
      ? ((r.repeat.x = e / t), (r.repeat.y = 1), (r.offset.x = (1 - r.repeat.x) / 2), (r.offset.y = 0))
      : ((r.repeat.x = 1), (r.repeat.y = t / e), (r.offset.x = 0), (r.offset.y = (1 - r.repeat.y) / 2)),
    r
  );
}
function hT(r) {
  return (r.repeat.x = 1), (r.repeat.y = 1), (r.offset.x = 0), (r.offset.y = 0), r;
}
function wd(r, e, t, n) {
  const i = fT(n);
  switch (t) {
    case Bd:
      return r * e;
    case kd:
      return r * e;
    case Vd:
      return r * e * 2;
    case zu:
      return ((r * e) / i.components) * i.byteLength;
    case za:
      return ((r * e) / i.components) * i.byteLength;
    case Hd:
      return ((r * e * 2) / i.components) * i.byteLength;
    case ku:
      return ((r * e * 2) / i.components) * i.byteLength;
    case zd:
      return ((r * e * 3) / i.components) * i.byteLength;
    case An:
      return ((r * e * 4) / i.components) * i.byteLength;
    case Vu:
      return ((r * e * 4) / i.components) * i.byteLength;
    case da:
    case pa:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 8;
    case ma:
    case ga:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    case iu:
    case su:
      return (Math.max(r, 16) * Math.max(e, 8)) / 4;
    case nu:
    case ru:
      return (Math.max(r, 8) * Math.max(e, 8)) / 2;
    case ou:
    case au:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 8;
    case lu:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    case cu:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    case uu:
      return Math.floor((r + 4) / 5) * Math.floor((e + 3) / 4) * 16;
    case hu:
      return Math.floor((r + 4) / 5) * Math.floor((e + 4) / 5) * 16;
    case fu:
      return Math.floor((r + 5) / 6) * Math.floor((e + 4) / 5) * 16;
    case du:
      return Math.floor((r + 5) / 6) * Math.floor((e + 5) / 6) * 16;
    case pu:
      return Math.floor((r + 7) / 8) * Math.floor((e + 4) / 5) * 16;
    case mu:
      return Math.floor((r + 7) / 8) * Math.floor((e + 5) / 6) * 16;
    case gu:
      return Math.floor((r + 7) / 8) * Math.floor((e + 7) / 8) * 16;
    case vu:
      return Math.floor((r + 9) / 10) * Math.floor((e + 4) / 5) * 16;
    case _u:
      return Math.floor((r + 9) / 10) * Math.floor((e + 5) / 6) * 16;
    case xu:
      return Math.floor((r + 9) / 10) * Math.floor((e + 7) / 8) * 16;
    case yu:
      return Math.floor((r + 9) / 10) * Math.floor((e + 9) / 10) * 16;
    case Su:
      return Math.floor((r + 11) / 12) * Math.floor((e + 9) / 10) * 16;
    case Mu:
      return Math.floor((r + 11) / 12) * Math.floor((e + 11) / 12) * 16;
    case va:
    case wu:
    case Eu:
      return Math.ceil(r / 4) * Math.ceil(e / 4) * 16;
    case Gd:
    case Tu:
      return Math.ceil(r / 4) * Math.ceil(e / 4) * 8;
    case Au:
    case bu:
      return Math.ceil(r / 4) * Math.ceil(e / 4) * 16;
  }
  throw new Error(`Unable to determine texture byte length for ${t} format.`);
}
function fT(r) {
  switch (r) {
    case Mi:
    case Nd:
      return { byteLength: 1, components: 1 };
    case _o:
    case Fd:
    case Eo:
      return { byteLength: 2, components: 1 };
    case Ou:
    case Bu:
      return { byteLength: 2, components: 4 };
    case cr:
    case Fu:
    case Yn:
      return { byteLength: 4, components: 1 };
    case Od:
      return { byteLength: 4, components: 3 };
  }
  throw new Error(`Unknown texture type ${r}.`);
}
const dT = { contain: cT, cover: uT, fill: hT, getByteLength: wd };
function pT(r, e, t, n, i, s, l) {
  const c = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null,
    u = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent),
    h = new fe(),
    d = new WeakMap();
  let p;
  const m = new WeakMap();
  let v = !1;
  try {
    v = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {}
  function x(U, R) {
    return v ? new OffscreenCanvas(U, R) : Ra("canvas");
  }
  function M(U, R, Z) {
    let oe = 1;
    const de = Ie(U);
    if (((de.width > Z || de.height > Z) && (oe = Z / Math.max(de.width, de.height)), oe < 1))
      if (
        (typeof HTMLImageElement < "u" && U instanceof HTMLImageElement) ||
        (typeof HTMLCanvasElement < "u" && U instanceof HTMLCanvasElement) ||
        (typeof ImageBitmap < "u" && U instanceof ImageBitmap) ||
        (typeof VideoFrame < "u" && U instanceof VideoFrame)
      ) {
        const le = Math.floor(oe * de.width),
          We = Math.floor(oe * de.height);
        p === void 0 && (p = x(le, We));
        const Ee = R ? x(le, We) : p;
        return (
          (Ee.width = le),
          (Ee.height = We),
          Ee.getContext("2d").drawImage(U, 0, 0, le, We),
          console.warn(
            "THREE.WebGLRenderer: Texture has been resized from (" +
              de.width +
              "x" +
              de.height +
              ") to (" +
              le +
              "x" +
              We +
              ")."
          ),
          Ee
        );
      } else
        return (
          "data" in U &&
            console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + de.width + "x" + de.height + ")."),
          U
        );
    return U;
  }
  function y(U) {
    return U.generateMipmaps;
  }
  function _(U) {
    r.generateMipmap(U);
  }
  function w(U) {
    return U.isWebGLCubeRenderTarget
      ? r.TEXTURE_CUBE_MAP
      : U.isWebGL3DRenderTarget
        ? r.TEXTURE_3D
        : U.isWebGLArrayRenderTarget || U.isCompressedArrayTexture
          ? r.TEXTURE_2D_ARRAY
          : r.TEXTURE_2D;
  }
  function E(U, R, Z, oe, de = !1) {
    if (U !== null) {
      if (r[U] !== void 0) return r[U];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + U + "'");
    }
    let le = R;
    if (
      (R === r.RED &&
        (Z === r.FLOAT && (le = r.R32F), Z === r.HALF_FLOAT && (le = r.R16F), Z === r.UNSIGNED_BYTE && (le = r.R8)),
      R === r.RED_INTEGER &&
        (Z === r.UNSIGNED_BYTE && (le = r.R8UI),
        Z === r.UNSIGNED_SHORT && (le = r.R16UI),
        Z === r.UNSIGNED_INT && (le = r.R32UI),
        Z === r.BYTE && (le = r.R8I),
        Z === r.SHORT && (le = r.R16I),
        Z === r.INT && (le = r.R32I)),
      R === r.RG &&
        (Z === r.FLOAT && (le = r.RG32F), Z === r.HALF_FLOAT && (le = r.RG16F), Z === r.UNSIGNED_BYTE && (le = r.RG8)),
      R === r.RG_INTEGER &&
        (Z === r.UNSIGNED_BYTE && (le = r.RG8UI),
        Z === r.UNSIGNED_SHORT && (le = r.RG16UI),
        Z === r.UNSIGNED_INT && (le = r.RG32UI),
        Z === r.BYTE && (le = r.RG8I),
        Z === r.SHORT && (le = r.RG16I),
        Z === r.INT && (le = r.RG32I)),
      R === r.RGB_INTEGER &&
        (Z === r.UNSIGNED_BYTE && (le = r.RGB8UI),
        Z === r.UNSIGNED_SHORT && (le = r.RGB16UI),
        Z === r.UNSIGNED_INT && (le = r.RGB32UI),
        Z === r.BYTE && (le = r.RGB8I),
        Z === r.SHORT && (le = r.RGB16I),
        Z === r.INT && (le = r.RGB32I)),
      R === r.RGBA_INTEGER &&
        (Z === r.UNSIGNED_BYTE && (le = r.RGBA8UI),
        Z === r.UNSIGNED_SHORT && (le = r.RGBA16UI),
        Z === r.UNSIGNED_INT && (le = r.RGBA32UI),
        Z === r.BYTE && (le = r.RGBA8I),
        Z === r.SHORT && (le = r.RGBA16I),
        Z === r.INT && (le = r.RGBA32I)),
      R === r.RGB && Z === r.UNSIGNED_INT_5_9_9_9_REV && (le = r.RGB9_E5),
      R === r.RGBA)
    ) {
      const We = de ? ka : At.getTransfer(oe);
      Z === r.FLOAT && (le = r.RGBA32F),
        Z === r.HALF_FLOAT && (le = r.RGBA16F),
        Z === r.UNSIGNED_BYTE && (le = We === Ut ? r.SRGB8_ALPHA8 : r.RGBA8),
        Z === r.UNSIGNED_SHORT_4_4_4_4 && (le = r.RGBA4),
        Z === r.UNSIGNED_SHORT_5_5_5_1 && (le = r.RGB5_A1);
    }
    return (
      (le === r.R16F || le === r.R32F || le === r.RG16F || le === r.RG32F || le === r.RGBA16F || le === r.RGBA32F) &&
        e.get("EXT_color_buffer_float"),
      le
    );
  }
  function A(U, R) {
    let Z;
    return (
      U
        ? R === null || R === cr || R === xs
          ? (Z = r.DEPTH24_STENCIL8)
          : R === Yn
            ? (Z = r.DEPTH32F_STENCIL8)
            : R === _o &&
              ((Z = r.DEPTH24_STENCIL8),
              console.warn(
                "DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment."
              ))
        : R === null || R === cr || R === xs
          ? (Z = r.DEPTH_COMPONENT24)
          : R === Yn
            ? (Z = r.DEPTH_COMPONENT32F)
            : R === _o && (Z = r.DEPTH_COMPONENT16),
      Z
    );
  }
  function O(U, R) {
    return y(U) === !0 || (U.isFramebufferTexture && U.minFilter !== _n && U.minFilter !== an)
      ? Math.log2(Math.max(R.width, R.height)) + 1
      : U.mipmaps !== void 0 && U.mipmaps.length > 0
        ? U.mipmaps.length
        : U.isCompressedTexture && Array.isArray(U.image)
          ? R.mipmaps.length
          : 1;
  }
  function P(U) {
    const R = U.target;
    R.removeEventListener("dispose", P), F(R), R.isVideoTexture && d.delete(R);
  }
  function L(U) {
    const R = U.target;
    R.removeEventListener("dispose", L), b(R);
  }
  function F(U) {
    const R = n.get(U);
    if (R.__webglInit === void 0) return;
    const Z = U.source,
      oe = m.get(Z);
    if (oe) {
      const de = oe[R.__cacheKey];
      de.usedTimes--, de.usedTimes === 0 && C(U), Object.keys(oe).length === 0 && m.delete(Z);
    }
    n.remove(U);
  }
  function C(U) {
    const R = n.get(U);
    r.deleteTexture(R.__webglTexture);
    const Z = U.source,
      oe = m.get(Z);
    delete oe[R.__cacheKey], l.memory.textures--;
  }
  function b(U) {
    const R = n.get(U);
    if ((U.depthTexture && (U.depthTexture.dispose(), n.remove(U.depthTexture)), U.isWebGLCubeRenderTarget))
      for (let oe = 0; oe < 6; oe++) {
        if (Array.isArray(R.__webglFramebuffer[oe]))
          for (let de = 0; de < R.__webglFramebuffer[oe].length; de++)
            r.deleteFramebuffer(R.__webglFramebuffer[oe][de]);
        else r.deleteFramebuffer(R.__webglFramebuffer[oe]);
        R.__webglDepthbuffer && r.deleteRenderbuffer(R.__webglDepthbuffer[oe]);
      }
    else {
      if (Array.isArray(R.__webglFramebuffer))
        for (let oe = 0; oe < R.__webglFramebuffer.length; oe++) r.deleteFramebuffer(R.__webglFramebuffer[oe]);
      else r.deleteFramebuffer(R.__webglFramebuffer);
      if (
        (R.__webglDepthbuffer && r.deleteRenderbuffer(R.__webglDepthbuffer),
        R.__webglMultisampledFramebuffer && r.deleteFramebuffer(R.__webglMultisampledFramebuffer),
        R.__webglColorRenderbuffer)
      )
        for (let oe = 0; oe < R.__webglColorRenderbuffer.length; oe++)
          R.__webglColorRenderbuffer[oe] && r.deleteRenderbuffer(R.__webglColorRenderbuffer[oe]);
      R.__webglDepthRenderbuffer && r.deleteRenderbuffer(R.__webglDepthRenderbuffer);
    }
    const Z = U.textures;
    for (let oe = 0, de = Z.length; oe < de; oe++) {
      const le = n.get(Z[oe]);
      le.__webglTexture && (r.deleteTexture(le.__webglTexture), l.memory.textures--), n.remove(Z[oe]);
    }
    n.remove(U);
  }
  let D = 0;
  function Y() {
    D = 0;
  }
  function q() {
    const U = D;
    return (
      U >= i.maxTextures &&
        console.warn(
          "THREE.WebGLTextures: Trying to use " + U + " texture units while this GPU supports only " + i.maxTextures
        ),
      (D += 1),
      U
    );
  }
  function K(U) {
    const R = [];
    return (
      R.push(U.wrapS),
      R.push(U.wrapT),
      R.push(U.wrapR || 0),
      R.push(U.magFilter),
      R.push(U.minFilter),
      R.push(U.anisotropy),
      R.push(U.internalFormat),
      R.push(U.format),
      R.push(U.type),
      R.push(U.generateMipmaps),
      R.push(U.premultiplyAlpha),
      R.push(U.flipY),
      R.push(U.unpackAlignment),
      R.push(U.colorSpace),
      R.join()
    );
  }
  function ae(U, R) {
    const Z = n.get(U);
    if ((U.isVideoTexture && Me(U), U.isRenderTargetTexture === !1 && U.version > 0 && Z.__version !== U.version)) {
      const oe = U.image;
      if (oe === null) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (oe.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        re(Z, U, R);
        return;
      }
    }
    t.bindTexture(r.TEXTURE_2D, Z.__webglTexture, r.TEXTURE0 + R);
  }
  function j(U, R) {
    const Z = n.get(U);
    if (U.version > 0 && Z.__version !== U.version) {
      re(Z, U, R);
      return;
    }
    t.bindTexture(r.TEXTURE_2D_ARRAY, Z.__webglTexture, r.TEXTURE0 + R);
  }
  function me(U, R) {
    const Z = n.get(U);
    if (U.version > 0 && Z.__version !== U.version) {
      re(Z, U, R);
      return;
    }
    t.bindTexture(r.TEXTURE_3D, Z.__webglTexture, r.TEXTURE0 + R);
  }
  function k(U, R) {
    const Z = n.get(U);
    if (U.version > 0 && Z.__version !== U.version) {
      ge(Z, U, R);
      return;
    }
    t.bindTexture(r.TEXTURE_CUBE_MAP, Z.__webglTexture, r.TEXTURE0 + R);
  }
  const ne = { [wa]: r.REPEAT, [fi]: r.CLAMP_TO_EDGE, [Ea]: r.MIRRORED_REPEAT },
    te = {
      [_n]: r.NEAREST,
      [Ud]: r.NEAREST_MIPMAP_NEAREST,
      [uo]: r.NEAREST_MIPMAP_LINEAR,
      [an]: r.LINEAR,
      [fa]: r.LINEAR_MIPMAP_NEAREST,
      [Oi]: r.LINEAR_MIPMAP_LINEAR,
    },
    ce = {
      [Dv]: r.NEVER,
      [zv]: r.ALWAYS,
      [Uv]: r.LESS,
      [Xd]: r.LEQUAL,
      [Nv]: r.EQUAL,
      [Bv]: r.GEQUAL,
      [Fv]: r.GREATER,
      [Ov]: r.NOTEQUAL,
    };
  function Ce(U, R) {
    if (
      (R.type === Yn &&
        e.has("OES_texture_float_linear") === !1 &&
        (R.magFilter === an ||
          R.magFilter === fa ||
          R.magFilter === uo ||
          R.magFilter === Oi ||
          R.minFilter === an ||
          R.minFilter === fa ||
          R.minFilter === uo ||
          R.minFilter === Oi) &&
        console.warn(
          "THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."
        ),
      r.texParameteri(U, r.TEXTURE_WRAP_S, ne[R.wrapS]),
      r.texParameteri(U, r.TEXTURE_WRAP_T, ne[R.wrapT]),
      (U === r.TEXTURE_3D || U === r.TEXTURE_2D_ARRAY) && r.texParameteri(U, r.TEXTURE_WRAP_R, ne[R.wrapR]),
      r.texParameteri(U, r.TEXTURE_MAG_FILTER, te[R.magFilter]),
      r.texParameteri(U, r.TEXTURE_MIN_FILTER, te[R.minFilter]),
      R.compareFunction &&
        (r.texParameteri(U, r.TEXTURE_COMPARE_MODE, r.COMPARE_REF_TO_TEXTURE),
        r.texParameteri(U, r.TEXTURE_COMPARE_FUNC, ce[R.compareFunction])),
      e.has("EXT_texture_filter_anisotropic") === !0)
    ) {
      if (
        R.magFilter === _n ||
        (R.minFilter !== uo && R.minFilter !== Oi) ||
        (R.type === Yn && e.has("OES_texture_float_linear") === !1)
      )
        return;
      if (R.anisotropy > 1 || n.get(R).__currentAnisotropy) {
        const Z = e.get("EXT_texture_filter_anisotropic");
        r.texParameterf(U, Z.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(R.anisotropy, i.getMaxAnisotropy())),
          (n.get(R).__currentAnisotropy = R.anisotropy);
      }
    }
  }
  function Ye(U, R) {
    let Z = !1;
    U.__webglInit === void 0 && ((U.__webglInit = !0), R.addEventListener("dispose", P));
    const oe = R.source;
    let de = m.get(oe);
    de === void 0 && ((de = {}), m.set(oe, de));
    const le = K(R);
    if (le !== U.__cacheKey) {
      de[le] === void 0 && ((de[le] = { texture: r.createTexture(), usedTimes: 0 }), l.memory.textures++, (Z = !0)),
        de[le].usedTimes++;
      const We = de[U.__cacheKey];
      We !== void 0 && (de[U.__cacheKey].usedTimes--, We.usedTimes === 0 && C(R)),
        (U.__cacheKey = le),
        (U.__webglTexture = de[le].texture);
    }
    return Z;
  }
  function re(U, R, Z) {
    let oe = r.TEXTURE_2D;
    (R.isDataArrayTexture || R.isCompressedArrayTexture) && (oe = r.TEXTURE_2D_ARRAY),
      R.isData3DTexture && (oe = r.TEXTURE_3D);
    const de = Ye(U, R),
      le = R.source;
    t.bindTexture(oe, U.__webglTexture, r.TEXTURE0 + Z);
    const We = n.get(le);
    if (le.version !== We.__version || de === !0) {
      t.activeTexture(r.TEXTURE0 + Z);
      const Ee = At.getPrimaries(At.workingColorSpace),
        Fe = R.colorSpace === nr ? null : At.getPrimaries(R.colorSpace),
        Mt = R.colorSpace === nr || Ee === Fe ? r.NONE : r.BROWSER_DEFAULT_WEBGL;
      r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, R.flipY),
        r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, R.premultiplyAlpha),
        r.pixelStorei(r.UNPACK_ALIGNMENT, R.unpackAlignment),
        r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, Mt);
      let _e = M(R.image, !1, i.maxTextureSize);
      _e = tt(R, _e);
      const Be = s.convert(R.format, R.colorSpace),
        nt = s.convert(R.type);
      let ot = E(R.internalFormat, Be, nt, R.colorSpace, R.isVideoTexture);
      Ce(oe, R);
      let ze;
      const Et = R.mipmaps,
        ct = R.isVideoTexture !== !0,
        Nt = We.__version === void 0 || de === !0,
        H = le.dataReady,
        Te = O(R, _e);
      if (R.isDepthTexture)
        (ot = A(R.format === ys, R.type)),
          Nt &&
            (ct
              ? t.texStorage2D(r.TEXTURE_2D, 1, ot, _e.width, _e.height)
              : t.texImage2D(r.TEXTURE_2D, 0, ot, _e.width, _e.height, 0, Be, nt, null));
      else if (R.isDataTexture)
        if (Et.length > 0) {
          ct && Nt && t.texStorage2D(r.TEXTURE_2D, Te, ot, Et[0].width, Et[0].height);
          for (let se = 0, he = Et.length; se < he; se++)
            (ze = Et[se]),
              ct
                ? H && t.texSubImage2D(r.TEXTURE_2D, se, 0, 0, ze.width, ze.height, Be, nt, ze.data)
                : t.texImage2D(r.TEXTURE_2D, se, ot, ze.width, ze.height, 0, Be, nt, ze.data);
          R.generateMipmaps = !1;
        } else
          ct
            ? (Nt && t.texStorage2D(r.TEXTURE_2D, Te, ot, _e.width, _e.height),
              H && t.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, _e.width, _e.height, Be, nt, _e.data))
            : t.texImage2D(r.TEXTURE_2D, 0, ot, _e.width, _e.height, 0, Be, nt, _e.data);
      else if (R.isCompressedTexture)
        if (R.isCompressedArrayTexture) {
          ct && Nt && t.texStorage3D(r.TEXTURE_2D_ARRAY, Te, ot, Et[0].width, Et[0].height, _e.depth);
          for (let se = 0, he = Et.length; se < he; se++)
            if (((ze = Et[se]), R.format !== An))
              if (Be !== null)
                if (ct) {
                  if (H)
                    if (R.layerUpdates.size > 0) {
                      const Ue = wd(ze.width, ze.height, R.format, R.type);
                      for (const Re of R.layerUpdates) {
                        const lt = ze.data.subarray(
                          (Re * Ue) / ze.data.BYTES_PER_ELEMENT,
                          ((Re + 1) * Ue) / ze.data.BYTES_PER_ELEMENT
                        );
                        t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY, se, 0, 0, Re, ze.width, ze.height, 1, Be, lt);
                      }
                      R.clearLayerUpdates();
                    } else
                      t.compressedTexSubImage3D(
                        r.TEXTURE_2D_ARRAY,
                        se,
                        0,
                        0,
                        0,
                        ze.width,
                        ze.height,
                        _e.depth,
                        Be,
                        ze.data
                      );
                } else
                  t.compressedTexImage3D(r.TEXTURE_2D_ARRAY, se, ot, ze.width, ze.height, _e.depth, 0, ze.data, 0, 0);
              else
                console.warn(
                  "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"
                );
            else
              ct
                ? H && t.texSubImage3D(r.TEXTURE_2D_ARRAY, se, 0, 0, 0, ze.width, ze.height, _e.depth, Be, nt, ze.data)
                : t.texImage3D(r.TEXTURE_2D_ARRAY, se, ot, ze.width, ze.height, _e.depth, 0, Be, nt, ze.data);
        } else {
          ct && Nt && t.texStorage2D(r.TEXTURE_2D, Te, ot, Et[0].width, Et[0].height);
          for (let se = 0, he = Et.length; se < he; se++)
            (ze = Et[se]),
              R.format !== An
                ? Be !== null
                  ? ct
                    ? H && t.compressedTexSubImage2D(r.TEXTURE_2D, se, 0, 0, ze.width, ze.height, Be, ze.data)
                    : t.compressedTexImage2D(r.TEXTURE_2D, se, ot, ze.width, ze.height, 0, ze.data)
                  : console.warn(
                      "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"
                    )
                : ct
                  ? H && t.texSubImage2D(r.TEXTURE_2D, se, 0, 0, ze.width, ze.height, Be, nt, ze.data)
                  : t.texImage2D(r.TEXTURE_2D, se, ot, ze.width, ze.height, 0, Be, nt, ze.data);
        }
      else if (R.isDataArrayTexture)
        if (ct) {
          if ((Nt && t.texStorage3D(r.TEXTURE_2D_ARRAY, Te, ot, _e.width, _e.height, _e.depth), H))
            if (R.layerUpdates.size > 0) {
              const se = wd(_e.width, _e.height, R.format, R.type);
              for (const he of R.layerUpdates) {
                const Ue = _e.data.subarray(
                  (he * se) / _e.data.BYTES_PER_ELEMENT,
                  ((he + 1) * se) / _e.data.BYTES_PER_ELEMENT
                );
                t.texSubImage3D(r.TEXTURE_2D_ARRAY, 0, 0, 0, he, _e.width, _e.height, 1, Be, nt, Ue);
              }
              R.clearLayerUpdates();
            } else t.texSubImage3D(r.TEXTURE_2D_ARRAY, 0, 0, 0, 0, _e.width, _e.height, _e.depth, Be, nt, _e.data);
        } else t.texImage3D(r.TEXTURE_2D_ARRAY, 0, ot, _e.width, _e.height, _e.depth, 0, Be, nt, _e.data);
      else if (R.isData3DTexture)
        ct
          ? (Nt && t.texStorage3D(r.TEXTURE_3D, Te, ot, _e.width, _e.height, _e.depth),
            H && t.texSubImage3D(r.TEXTURE_3D, 0, 0, 0, 0, _e.width, _e.height, _e.depth, Be, nt, _e.data))
          : t.texImage3D(r.TEXTURE_3D, 0, ot, _e.width, _e.height, _e.depth, 0, Be, nt, _e.data);
      else if (R.isFramebufferTexture) {
        if (Nt)
          if (ct) t.texStorage2D(r.TEXTURE_2D, Te, ot, _e.width, _e.height);
          else {
            let se = _e.width,
              he = _e.height;
            for (let Ue = 0; Ue < Te; Ue++)
              t.texImage2D(r.TEXTURE_2D, Ue, ot, se, he, 0, Be, nt, null), (se >>= 1), (he >>= 1);
          }
      } else if (Et.length > 0) {
        if (ct && Nt) {
          const se = Ie(Et[0]);
          t.texStorage2D(r.TEXTURE_2D, Te, ot, se.width, se.height);
        }
        for (let se = 0, he = Et.length; se < he; se++)
          (ze = Et[se]),
            ct
              ? H && t.texSubImage2D(r.TEXTURE_2D, se, 0, 0, Be, nt, ze)
              : t.texImage2D(r.TEXTURE_2D, se, ot, Be, nt, ze);
        R.generateMipmaps = !1;
      } else if (ct) {
        if (Nt) {
          const se = Ie(_e);
          t.texStorage2D(r.TEXTURE_2D, Te, ot, se.width, se.height);
        }
        H && t.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, Be, nt, _e);
      } else t.texImage2D(r.TEXTURE_2D, 0, ot, Be, nt, _e);
      y(R) && _(oe), (We.__version = le.version), R.onUpdate && R.onUpdate(R);
    }
    U.__version = R.version;
  }
  function ge(U, R, Z) {
    if (R.image.length !== 6) return;
    const oe = Ye(U, R),
      de = R.source;
    t.bindTexture(r.TEXTURE_CUBE_MAP, U.__webglTexture, r.TEXTURE0 + Z);
    const le = n.get(de);
    if (de.version !== le.__version || oe === !0) {
      t.activeTexture(r.TEXTURE0 + Z);
      const We = At.getPrimaries(At.workingColorSpace),
        Ee = R.colorSpace === nr ? null : At.getPrimaries(R.colorSpace),
        Fe = R.colorSpace === nr || We === Ee ? r.NONE : r.BROWSER_DEFAULT_WEBGL;
      r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, R.flipY),
        r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, R.premultiplyAlpha),
        r.pixelStorei(r.UNPACK_ALIGNMENT, R.unpackAlignment),
        r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, Fe);
      const Mt = R.isCompressedTexture || R.image[0].isCompressedTexture,
        _e = R.image[0] && R.image[0].isDataTexture,
        Be = [];
      for (let he = 0; he < 6; he++)
        !Mt && !_e ? (Be[he] = M(R.image[he], !0, i.maxCubemapSize)) : (Be[he] = _e ? R.image[he].image : R.image[he]),
          (Be[he] = tt(R, Be[he]));
      const nt = Be[0],
        ot = s.convert(R.format, R.colorSpace),
        ze = s.convert(R.type),
        Et = E(R.internalFormat, ot, ze, R.colorSpace),
        ct = R.isVideoTexture !== !0,
        Nt = le.__version === void 0 || oe === !0,
        H = de.dataReady;
      let Te = O(R, nt);
      Ce(r.TEXTURE_CUBE_MAP, R);
      let se;
      if (Mt) {
        ct && Nt && t.texStorage2D(r.TEXTURE_CUBE_MAP, Te, Et, nt.width, nt.height);
        for (let he = 0; he < 6; he++) {
          se = Be[he].mipmaps;
          for (let Ue = 0; Ue < se.length; Ue++) {
            const Re = se[Ue];
            R.format !== An
              ? ot !== null
                ? ct
                  ? H &&
                    t.compressedTexSubImage2D(
                      r.TEXTURE_CUBE_MAP_POSITIVE_X + he,
                      Ue,
                      0,
                      0,
                      Re.width,
                      Re.height,
                      ot,
                      Re.data
                    )
                  : t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + he, Ue, Et, Re.width, Re.height, 0, Re.data)
                : console.warn(
                    "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"
                  )
              : ct
                ? H &&
                  t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + he, Ue, 0, 0, Re.width, Re.height, ot, ze, Re.data)
                : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + he, Ue, Et, Re.width, Re.height, 0, ot, ze, Re.data);
          }
        }
      } else {
        if (((se = R.mipmaps), ct && Nt)) {
          se.length > 0 && Te++;
          const he = Ie(Be[0]);
          t.texStorage2D(r.TEXTURE_CUBE_MAP, Te, Et, he.width, he.height);
        }
        for (let he = 0; he < 6; he++)
          if (_e) {
            ct
              ? H &&
                t.texSubImage2D(
                  r.TEXTURE_CUBE_MAP_POSITIVE_X + he,
                  0,
                  0,
                  0,
                  Be[he].width,
                  Be[he].height,
                  ot,
                  ze,
                  Be[he].data
                )
              : t.texImage2D(
                  r.TEXTURE_CUBE_MAP_POSITIVE_X + he,
                  0,
                  Et,
                  Be[he].width,
                  Be[he].height,
                  0,
                  ot,
                  ze,
                  Be[he].data
                );
            for (let Ue = 0; Ue < se.length; Ue++) {
              const lt = se[Ue].image[he].image;
              ct
                ? H &&
                  t.texSubImage2D(
                    r.TEXTURE_CUBE_MAP_POSITIVE_X + he,
                    Ue + 1,
                    0,
                    0,
                    lt.width,
                    lt.height,
                    ot,
                    ze,
                    lt.data
                  )
                : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + he, Ue + 1, Et, lt.width, lt.height, 0, ot, ze, lt.data);
            }
          } else {
            ct
              ? H && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + he, 0, 0, 0, ot, ze, Be[he])
              : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + he, 0, Et, ot, ze, Be[he]);
            for (let Ue = 0; Ue < se.length; Ue++) {
              const Re = se[Ue];
              ct
                ? H && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + he, Ue + 1, 0, 0, ot, ze, Re.image[he])
                : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + he, Ue + 1, Et, ot, ze, Re.image[he]);
            }
          }
      }
      y(R) && _(r.TEXTURE_CUBE_MAP), (le.__version = de.version), R.onUpdate && R.onUpdate(R);
    }
    U.__version = R.version;
  }
  function De(U, R, Z, oe, de, le) {
    const We = s.convert(Z.format, Z.colorSpace),
      Ee = s.convert(Z.type),
      Fe = E(Z.internalFormat, We, Ee, Z.colorSpace),
      Mt = n.get(R),
      _e = n.get(Z);
    if (((_e.__renderTarget = R), !Mt.__hasExternalTextures)) {
      const Be = Math.max(1, R.width >> le),
        nt = Math.max(1, R.height >> le);
      de === r.TEXTURE_3D || de === r.TEXTURE_2D_ARRAY
        ? t.texImage3D(de, le, Fe, Be, nt, R.depth, 0, We, Ee, null)
        : t.texImage2D(de, le, Fe, Be, nt, 0, We, Ee, null);
    }
    t.bindFramebuffer(r.FRAMEBUFFER, U),
      Oe(R)
        ? c.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, oe, de, _e.__webglTexture, 0, ve(R))
        : (de === r.TEXTURE_2D || (de >= r.TEXTURE_CUBE_MAP_POSITIVE_X && de <= r.TEXTURE_CUBE_MAP_NEGATIVE_Z)) &&
          r.framebufferTexture2D(r.FRAMEBUFFER, oe, de, _e.__webglTexture, le),
      t.bindFramebuffer(r.FRAMEBUFFER, null);
  }
  function xe(U, R, Z) {
    if ((r.bindRenderbuffer(r.RENDERBUFFER, U), R.depthBuffer)) {
      const oe = R.depthTexture,
        de = oe && oe.isDepthTexture ? oe.type : null,
        le = A(R.stencilBuffer, de),
        We = R.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT,
        Ee = ve(R);
      Oe(R)
        ? c.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, Ee, le, R.width, R.height)
        : Z
          ? r.renderbufferStorageMultisample(r.RENDERBUFFER, Ee, le, R.width, R.height)
          : r.renderbufferStorage(r.RENDERBUFFER, le, R.width, R.height),
        r.framebufferRenderbuffer(r.FRAMEBUFFER, We, r.RENDERBUFFER, U);
    } else {
      const oe = R.textures;
      for (let de = 0; de < oe.length; de++) {
        const le = oe[de],
          We = s.convert(le.format, le.colorSpace),
          Ee = s.convert(le.type),
          Fe = E(le.internalFormat, We, Ee, le.colorSpace),
          Mt = ve(R);
        Z && Oe(R) === !1
          ? r.renderbufferStorageMultisample(r.RENDERBUFFER, Mt, Fe, R.width, R.height)
          : Oe(R)
            ? c.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, Mt, Fe, R.width, R.height)
            : r.renderbufferStorage(r.RENDERBUFFER, Fe, R.width, R.height);
      }
    }
    r.bindRenderbuffer(r.RENDERBUFFER, null);
  }
  function je(U, R) {
    if (R && R.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
    if ((t.bindFramebuffer(r.FRAMEBUFFER, U), !(R.depthTexture && R.depthTexture.isDepthTexture)))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    const oe = n.get(R.depthTexture);
    (oe.__renderTarget = R),
      (!oe.__webglTexture || R.depthTexture.image.width !== R.width || R.depthTexture.image.height !== R.height) &&
        ((R.depthTexture.image.width = R.width),
        (R.depthTexture.image.height = R.height),
        (R.depthTexture.needsUpdate = !0)),
      ae(R.depthTexture, 0);
    const de = oe.__webglTexture,
      le = ve(R);
    if (R.depthTexture.format === ps)
      Oe(R)
        ? c.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, de, 0, le)
        : r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, de, 0);
    else if (R.depthTexture.format === ys)
      Oe(R)
        ? c.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, de, 0, le)
        : r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, de, 0);
    else throw new Error("Unknown depthTexture format");
  }
  function it(U) {
    const R = n.get(U),
      Z = U.isWebGLCubeRenderTarget === !0;
    if (R.__boundDepthTexture !== U.depthTexture) {
      const oe = U.depthTexture;
      if ((R.__depthDisposeCallback && R.__depthDisposeCallback(), oe)) {
        const de = () => {
          delete R.__boundDepthTexture, delete R.__depthDisposeCallback, oe.removeEventListener("dispose", de);
        };
        oe.addEventListener("dispose", de), (R.__depthDisposeCallback = de);
      }
      R.__boundDepthTexture = oe;
    }
    if (U.depthTexture && !R.__autoAllocateDepthBuffer) {
      if (Z) throw new Error("target.depthTexture not supported in Cube render targets");
      je(R.__webglFramebuffer, U);
    } else if (Z) {
      R.__webglDepthbuffer = [];
      for (let oe = 0; oe < 6; oe++)
        if ((t.bindFramebuffer(r.FRAMEBUFFER, R.__webglFramebuffer[oe]), R.__webglDepthbuffer[oe] === void 0))
          (R.__webglDepthbuffer[oe] = r.createRenderbuffer()), xe(R.__webglDepthbuffer[oe], U, !1);
        else {
          const de = U.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT,
            le = R.__webglDepthbuffer[oe];
          r.bindRenderbuffer(r.RENDERBUFFER, le), r.framebufferRenderbuffer(r.FRAMEBUFFER, de, r.RENDERBUFFER, le);
        }
    } else if ((t.bindFramebuffer(r.FRAMEBUFFER, R.__webglFramebuffer), R.__webglDepthbuffer === void 0))
      (R.__webglDepthbuffer = r.createRenderbuffer()), xe(R.__webglDepthbuffer, U, !1);
    else {
      const oe = U.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT,
        de = R.__webglDepthbuffer;
      r.bindRenderbuffer(r.RENDERBUFFER, de), r.framebufferRenderbuffer(r.FRAMEBUFFER, oe, r.RENDERBUFFER, de);
    }
    t.bindFramebuffer(r.FRAMEBUFFER, null);
  }
  function Qe(U, R, Z) {
    const oe = n.get(U);
    R !== void 0 && De(oe.__webglFramebuffer, U, U.texture, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, 0),
      Z !== void 0 && it(U);
  }
  function at(U) {
    const R = U.texture,
      Z = n.get(U),
      oe = n.get(R);
    U.addEventListener("dispose", L);
    const de = U.textures,
      le = U.isWebGLCubeRenderTarget === !0,
      We = de.length > 1;
    if (
      (We ||
        (oe.__webglTexture === void 0 && (oe.__webglTexture = r.createTexture()),
        (oe.__version = R.version),
        l.memory.textures++),
      le)
    ) {
      Z.__webglFramebuffer = [];
      for (let Ee = 0; Ee < 6; Ee++)
        if (R.mipmaps && R.mipmaps.length > 0) {
          Z.__webglFramebuffer[Ee] = [];
          for (let Fe = 0; Fe < R.mipmaps.length; Fe++) Z.__webglFramebuffer[Ee][Fe] = r.createFramebuffer();
        } else Z.__webglFramebuffer[Ee] = r.createFramebuffer();
    } else {
      if (R.mipmaps && R.mipmaps.length > 0) {
        Z.__webglFramebuffer = [];
        for (let Ee = 0; Ee < R.mipmaps.length; Ee++) Z.__webglFramebuffer[Ee] = r.createFramebuffer();
      } else Z.__webglFramebuffer = r.createFramebuffer();
      if (We)
        for (let Ee = 0, Fe = de.length; Ee < Fe; Ee++) {
          const Mt = n.get(de[Ee]);
          Mt.__webglTexture === void 0 && ((Mt.__webglTexture = r.createTexture()), l.memory.textures++);
        }
      if (U.samples > 0 && Oe(U) === !1) {
        (Z.__webglMultisampledFramebuffer = r.createFramebuffer()),
          (Z.__webglColorRenderbuffer = []),
          t.bindFramebuffer(r.FRAMEBUFFER, Z.__webglMultisampledFramebuffer);
        for (let Ee = 0; Ee < de.length; Ee++) {
          const Fe = de[Ee];
          (Z.__webglColorRenderbuffer[Ee] = r.createRenderbuffer()),
            r.bindRenderbuffer(r.RENDERBUFFER, Z.__webglColorRenderbuffer[Ee]);
          const Mt = s.convert(Fe.format, Fe.colorSpace),
            _e = s.convert(Fe.type),
            Be = E(Fe.internalFormat, Mt, _e, Fe.colorSpace, U.isXRRenderTarget === !0),
            nt = ve(U);
          r.renderbufferStorageMultisample(r.RENDERBUFFER, nt, Be, U.width, U.height),
            r.framebufferRenderbuffer(
              r.FRAMEBUFFER,
              r.COLOR_ATTACHMENT0 + Ee,
              r.RENDERBUFFER,
              Z.__webglColorRenderbuffer[Ee]
            );
        }
        r.bindRenderbuffer(r.RENDERBUFFER, null),
          U.depthBuffer &&
            ((Z.__webglDepthRenderbuffer = r.createRenderbuffer()), xe(Z.__webglDepthRenderbuffer, U, !0)),
          t.bindFramebuffer(r.FRAMEBUFFER, null);
      }
    }
    if (le) {
      t.bindTexture(r.TEXTURE_CUBE_MAP, oe.__webglTexture), Ce(r.TEXTURE_CUBE_MAP, R);
      for (let Ee = 0; Ee < 6; Ee++)
        if (R.mipmaps && R.mipmaps.length > 0)
          for (let Fe = 0; Fe < R.mipmaps.length; Fe++)
            De(Z.__webglFramebuffer[Ee][Fe], U, R, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, Fe);
        else De(Z.__webglFramebuffer[Ee], U, R, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + Ee, 0);
      y(R) && _(r.TEXTURE_CUBE_MAP), t.unbindTexture();
    } else if (We) {
      for (let Ee = 0, Fe = de.length; Ee < Fe; Ee++) {
        const Mt = de[Ee],
          _e = n.get(Mt);
        t.bindTexture(r.TEXTURE_2D, _e.__webglTexture),
          Ce(r.TEXTURE_2D, Mt),
          De(Z.__webglFramebuffer, U, Mt, r.COLOR_ATTACHMENT0 + Ee, r.TEXTURE_2D, 0),
          y(Mt) && _(r.TEXTURE_2D);
      }
      t.unbindTexture();
    } else {
      let Ee = r.TEXTURE_2D;
      if (
        ((U.isWebGL3DRenderTarget || U.isWebGLArrayRenderTarget) &&
          (Ee = U.isWebGL3DRenderTarget ? r.TEXTURE_3D : r.TEXTURE_2D_ARRAY),
        t.bindTexture(Ee, oe.__webglTexture),
        Ce(Ee, R),
        R.mipmaps && R.mipmaps.length > 0)
      )
        for (let Fe = 0; Fe < R.mipmaps.length; Fe++) De(Z.__webglFramebuffer[Fe], U, R, r.COLOR_ATTACHMENT0, Ee, Fe);
      else De(Z.__webglFramebuffer, U, R, r.COLOR_ATTACHMENT0, Ee, 0);
      y(R) && _(Ee), t.unbindTexture();
    }
    U.depthBuffer && it(U);
  }
  function ue(U) {
    const R = U.textures;
    for (let Z = 0, oe = R.length; Z < oe; Z++) {
      const de = R[Z];
      if (y(de)) {
        const le = w(U),
          We = n.get(de).__webglTexture;
        t.bindTexture(le, We), _(le), t.unbindTexture();
      }
    }
  }
  const pe = [],
    z = [];
  function qe(U) {
    if (U.samples > 0) {
      if (Oe(U) === !1) {
        const R = U.textures,
          Z = U.width,
          oe = U.height;
        let de = r.COLOR_BUFFER_BIT;
        const le = U.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT,
          We = n.get(U),
          Ee = R.length > 1;
        if (Ee)
          for (let Fe = 0; Fe < R.length; Fe++)
            t.bindFramebuffer(r.FRAMEBUFFER, We.__webglMultisampledFramebuffer),
              r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + Fe, r.RENDERBUFFER, null),
              t.bindFramebuffer(r.FRAMEBUFFER, We.__webglFramebuffer),
              r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + Fe, r.TEXTURE_2D, null, 0);
        t.bindFramebuffer(r.READ_FRAMEBUFFER, We.__webglMultisampledFramebuffer),
          t.bindFramebuffer(r.DRAW_FRAMEBUFFER, We.__webglFramebuffer);
        for (let Fe = 0; Fe < R.length; Fe++) {
          if (
            (U.resolveDepthBuffer &&
              (U.depthBuffer && (de |= r.DEPTH_BUFFER_BIT),
              U.stencilBuffer && U.resolveStencilBuffer && (de |= r.STENCIL_BUFFER_BIT)),
            Ee)
          ) {
            r.framebufferRenderbuffer(
              r.READ_FRAMEBUFFER,
              r.COLOR_ATTACHMENT0,
              r.RENDERBUFFER,
              We.__webglColorRenderbuffer[Fe]
            );
            const Mt = n.get(R[Fe]).__webglTexture;
            r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, Mt, 0);
          }
          r.blitFramebuffer(0, 0, Z, oe, 0, 0, Z, oe, de, r.NEAREST),
            u === !0 &&
              ((pe.length = 0),
              (z.length = 0),
              pe.push(r.COLOR_ATTACHMENT0 + Fe),
              U.depthBuffer &&
                U.resolveDepthBuffer === !1 &&
                (pe.push(le), z.push(le), r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER, z)),
              r.invalidateFramebuffer(r.READ_FRAMEBUFFER, pe));
        }
        if ((t.bindFramebuffer(r.READ_FRAMEBUFFER, null), t.bindFramebuffer(r.DRAW_FRAMEBUFFER, null), Ee))
          for (let Fe = 0; Fe < R.length; Fe++) {
            t.bindFramebuffer(r.FRAMEBUFFER, We.__webglMultisampledFramebuffer),
              r.framebufferRenderbuffer(
                r.FRAMEBUFFER,
                r.COLOR_ATTACHMENT0 + Fe,
                r.RENDERBUFFER,
                We.__webglColorRenderbuffer[Fe]
              );
            const Mt = n.get(R[Fe]).__webglTexture;
            t.bindFramebuffer(r.FRAMEBUFFER, We.__webglFramebuffer),
              r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + Fe, r.TEXTURE_2D, Mt, 0);
          }
        t.bindFramebuffer(r.DRAW_FRAMEBUFFER, We.__webglMultisampledFramebuffer);
      } else if (U.depthBuffer && U.resolveDepthBuffer === !1 && u) {
        const R = U.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT;
        r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER, [R]);
      }
    }
  }
  function ve(U) {
    return Math.min(i.maxSamples, U.samples);
  }
  function Oe(U) {
    const R = n.get(U);
    return U.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && R.__useRenderToTexture !== !1;
  }
  function Me(U) {
    const R = l.render.frame;
    d.get(U) !== R && (d.set(U, R), U.update());
  }
  function tt(U, R) {
    const Z = U.colorSpace,
      oe = U.format,
      de = U.type;
    return (
      U.isCompressedTexture === !0 ||
        U.isVideoTexture === !0 ||
        (Z !== ws &&
          Z !== nr &&
          (At.getTransfer(Z) === Ut
            ? (oe !== An || de !== Mi) &&
              console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.")
            : console.error("THREE.WebGLTextures: Unsupported texture color space:", Z))),
      R
    );
  }
  function Ie(U) {
    return (
      typeof HTMLImageElement < "u" && U instanceof HTMLImageElement
        ? ((h.width = U.naturalWidth || U.width), (h.height = U.naturalHeight || U.height))
        : typeof VideoFrame < "u" && U instanceof VideoFrame
          ? ((h.width = U.displayWidth), (h.height = U.displayHeight))
          : ((h.width = U.width), (h.height = U.height)),
      h
    );
  }
  (this.allocateTextureUnit = q),
    (this.resetTextureUnits = Y),
    (this.setTexture2D = ae),
    (this.setTexture2DArray = j),
    (this.setTexture3D = me),
    (this.setTextureCube = k),
    (this.rebindTextures = Qe),
    (this.setupRenderTarget = at),
    (this.updateRenderTargetMipmap = ue),
    (this.updateMultisampleRenderTarget = qe),
    (this.setupDepthRenderbuffer = it),
    (this.setupFrameBufferTexture = De),
    (this.useMultisampledRTT = Oe);
}
function e_(r, e) {
  function t(n, i = nr) {
    let s;
    const l = At.getTransfer(i);
    if (n === Mi) return r.UNSIGNED_BYTE;
    if (n === Ou) return r.UNSIGNED_SHORT_4_4_4_4;
    if (n === Bu) return r.UNSIGNED_SHORT_5_5_5_1;
    if (n === Od) return r.UNSIGNED_INT_5_9_9_9_REV;
    if (n === Nd) return r.BYTE;
    if (n === Fd) return r.SHORT;
    if (n === _o) return r.UNSIGNED_SHORT;
    if (n === Fu) return r.INT;
    if (n === cr) return r.UNSIGNED_INT;
    if (n === Yn) return r.FLOAT;
    if (n === Eo) return r.HALF_FLOAT;
    if (n === Bd) return r.ALPHA;
    if (n === zd) return r.RGB;
    if (n === An) return r.RGBA;
    if (n === kd) return r.LUMINANCE;
    if (n === Vd) return r.LUMINANCE_ALPHA;
    if (n === ps) return r.DEPTH_COMPONENT;
    if (n === ys) return r.DEPTH_STENCIL;
    if (n === zu) return r.RED;
    if (n === za) return r.RED_INTEGER;
    if (n === Hd) return r.RG;
    if (n === ku) return r.RG_INTEGER;
    if (n === Vu) return r.RGBA_INTEGER;
    if (n === da || n === pa || n === ma || n === ga)
      if (l === Ut)
        if (((s = e.get("WEBGL_compressed_texture_s3tc_srgb")), s !== null)) {
          if (n === da) return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (n === pa) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (n === ma) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (n === ga) return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else return null;
      else if (((s = e.get("WEBGL_compressed_texture_s3tc")), s !== null)) {
        if (n === da) return s.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (n === pa) return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (n === ma) return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (n === ga) return s.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else return null;
    if (n === nu || n === iu || n === ru || n === su)
      if (((s = e.get("WEBGL_compressed_texture_pvrtc")), s !== null)) {
        if (n === nu) return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (n === iu) return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (n === ru) return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (n === su) return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else return null;
    if (n === ou || n === au || n === lu)
      if (((s = e.get("WEBGL_compressed_texture_etc")), s !== null)) {
        if (n === ou || n === au) return l === Ut ? s.COMPRESSED_SRGB8_ETC2 : s.COMPRESSED_RGB8_ETC2;
        if (n === lu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : s.COMPRESSED_RGBA8_ETC2_EAC;
      } else return null;
    if (
      n === cu ||
      n === uu ||
      n === hu ||
      n === fu ||
      n === du ||
      n === pu ||
      n === mu ||
      n === gu ||
      n === vu ||
      n === _u ||
      n === xu ||
      n === yu ||
      n === Su ||
      n === Mu
    )
      if (((s = e.get("WEBGL_compressed_texture_astc")), s !== null)) {
        if (n === cu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : s.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (n === uu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : s.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (n === hu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : s.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (n === fu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : s.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (n === du) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : s.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (n === pu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : s.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (n === mu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : s.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (n === gu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : s.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (n === vu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : s.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (n === _u) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : s.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (n === xu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : s.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (n === yu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : s.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (n === Su) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : s.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (n === Mu) return l === Ut ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : s.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else return null;
    if (n === va || n === wu || n === Eu)
      if (((s = e.get("EXT_texture_compression_bptc")), s !== null)) {
        if (n === va) return l === Ut ? s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : s.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (n === wu) return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (n === Eu) return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else return null;
    if (n === Gd || n === Tu || n === Au || n === bu)
      if (((s = e.get("EXT_texture_compression_rgtc")), s !== null)) {
        if (n === va) return s.COMPRESSED_RED_RGTC1_EXT;
        if (n === Tu) return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (n === Au) return s.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (n === bu) return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else return null;
    return n === xs ? r.UNSIGNED_INT_24_8 : r[n] !== void 0 ? r[n] : null;
  }
  return { convert: t };
}
class t_ extends gn {
  constructor(e = []) {
    super(), (this.isArrayCamera = !0), (this.cameras = e);
  }
}
class po extends Rt {
  constructor() {
    super(), (this.isGroup = !0), (this.type = "Group");
  }
}
const mT = { type: "move" };
class Wf {
  constructor() {
    (this._targetRay = null), (this._grip = null), (this._hand = null);
  }
  getHandSpace() {
    return (
      this._hand === null &&
        ((this._hand = new po()),
        (this._hand.matrixAutoUpdate = !1),
        (this._hand.visible = !1),
        (this._hand.joints = {}),
        (this._hand.inputState = { pinching: !1 })),
      this._hand
    );
  }
  getTargetRaySpace() {
    return (
      this._targetRay === null &&
        ((this._targetRay = new po()),
        (this._targetRay.matrixAutoUpdate = !1),
        (this._targetRay.visible = !1),
        (this._targetRay.hasLinearVelocity = !1),
        (this._targetRay.linearVelocity = new N()),
        (this._targetRay.hasAngularVelocity = !1),
        (this._targetRay.angularVelocity = new N())),
      this._targetRay
    );
  }
  getGripSpace() {
    return (
      this._grip === null &&
        ((this._grip = new po()),
        (this._grip.matrixAutoUpdate = !1),
        (this._grip.visible = !1),
        (this._grip.hasLinearVelocity = !1),
        (this._grip.linearVelocity = new N()),
        (this._grip.hasAngularVelocity = !1),
        (this._grip.angularVelocity = new N())),
      this._grip
    );
  }
  dispatchEvent(e) {
    return (
      this._targetRay !== null && this._targetRay.dispatchEvent(e),
      this._grip !== null && this._grip.dispatchEvent(e),
      this._hand !== null && this._hand.dispatchEvent(e),
      this
    );
  }
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t) for (const n of e.hand.values()) this._getHandJoint(t, n);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  disconnect(e) {
    return (
      this.dispatchEvent({ type: "disconnected", data: e }),
      this._targetRay !== null && (this._targetRay.visible = !1),
      this._grip !== null && (this._grip.visible = !1),
      this._hand !== null && (this._hand.visible = !1),
      this
    );
  }
  update(e, t, n) {
    let i = null,
      s = null,
      l = null;
    const c = this._targetRay,
      u = this._grip,
      h = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (h && e.hand) {
        l = !0;
        for (const M of e.hand.values()) {
          const y = t.getJointPose(M, n),
            _ = this._getHandJoint(h, M);
          y !== null &&
            (_.matrix.fromArray(y.transform.matrix),
            _.matrix.decompose(_.position, _.rotation, _.scale),
            (_.matrixWorldNeedsUpdate = !0),
            (_.jointRadius = y.radius)),
            (_.visible = y !== null);
        }
        const d = h.joints["index-finger-tip"],
          p = h.joints["thumb-tip"],
          m = d.position.distanceTo(p.position),
          v = 0.02,
          x = 0.005;
        h.inputState.pinching && m > v + x
          ? ((h.inputState.pinching = !1),
            this.dispatchEvent({ type: "pinchend", handedness: e.handedness, target: this }))
          : !h.inputState.pinching &&
            m <= v - x &&
            ((h.inputState.pinching = !0),
            this.dispatchEvent({ type: "pinchstart", handedness: e.handedness, target: this }));
      } else
        u !== null &&
          e.gripSpace &&
          ((s = t.getPose(e.gripSpace, n)),
          s !== null &&
            (u.matrix.fromArray(s.transform.matrix),
            u.matrix.decompose(u.position, u.rotation, u.scale),
            (u.matrixWorldNeedsUpdate = !0),
            s.linearVelocity
              ? ((u.hasLinearVelocity = !0), u.linearVelocity.copy(s.linearVelocity))
              : (u.hasLinearVelocity = !1),
            s.angularVelocity
              ? ((u.hasAngularVelocity = !0), u.angularVelocity.copy(s.angularVelocity))
              : (u.hasAngularVelocity = !1)));
      c !== null &&
        ((i = t.getPose(e.targetRaySpace, n)),
        i === null && s !== null && (i = s),
        i !== null &&
          (c.matrix.fromArray(i.transform.matrix),
          c.matrix.decompose(c.position, c.rotation, c.scale),
          (c.matrixWorldNeedsUpdate = !0),
          i.linearVelocity
            ? ((c.hasLinearVelocity = !0), c.linearVelocity.copy(i.linearVelocity))
            : (c.hasLinearVelocity = !1),
          i.angularVelocity
            ? ((c.hasAngularVelocity = !0), c.angularVelocity.copy(i.angularVelocity))
            : (c.hasAngularVelocity = !1),
          this.dispatchEvent(mT)));
    }
    return (
      c !== null && (c.visible = i !== null),
      u !== null && (u.visible = s !== null),
      h !== null && (h.visible = l !== null),
      this
    );
  }
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const n = new po();
      (n.matrixAutoUpdate = !1), (n.visible = !1), (e.joints[t.jointName] = n), e.add(n);
    }
    return e.joints[t.jointName];
  }
}
const gT = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`,
  vT = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
class _T {
  constructor() {
    (this.texture = null), (this.mesh = null), (this.depthNear = 0), (this.depthFar = 0);
  }
  init(e, t, n) {
    if (this.texture === null) {
      const i = new Kt(),
        s = e.properties.get(i);
      (s.__webglTexture = t.texture),
        (t.depthNear != n.depthNear || t.depthFar != n.depthFar) &&
          ((this.depthNear = t.depthNear), (this.depthFar = t.depthFar)),
        (this.texture = i);
    }
  }
  getMesh(e) {
    if (this.texture !== null && this.mesh === null) {
      const t = e.cameras[0].viewport,
        n = new Ei({
          vertexShader: gT,
          fragmentShader: vT,
          uniforms: { depthColor: { value: this.texture }, depthWidth: { value: t.z }, depthHeight: { value: t.w } },
        });
      this.mesh = new rn(new Ao(20, 20), n);
    }
    return this.mesh;
  }
  reset() {
    (this.texture = null), (this.mesh = null);
  }
  getDepthTexture() {
    return this.texture;
  }
}
class xT extends Hi {
  constructor(e, t) {
    super();
    const n = this;
    let i = null,
      s = 1,
      l = null,
      c = "local-floor",
      u = 1,
      h = null,
      d = null,
      p = null,
      m = null,
      v = null,
      x = null;
    const M = new _T(),
      y = t.getContextAttributes();
    let _ = null,
      w = null;
    const E = [],
      A = [],
      O = new fe();
    let P = null;
    const L = new gn();
    L.viewport = new Ct();
    const F = new gn();
    F.viewport = new Ct();
    const C = [L, F],
      b = new t_();
    let D = null,
      Y = null;
    (this.cameraAutoUpdate = !0),
      (this.enabled = !1),
      (this.isPresenting = !1),
      (this.getController = function (re) {
        let ge = E[re];
        return ge === void 0 && ((ge = new Wf()), (E[re] = ge)), ge.getTargetRaySpace();
      }),
      (this.getControllerGrip = function (re) {
        let ge = E[re];
        return ge === void 0 && ((ge = new Wf()), (E[re] = ge)), ge.getGripSpace();
      }),
      (this.getHand = function (re) {
        let ge = E[re];
        return ge === void 0 && ((ge = new Wf()), (E[re] = ge)), ge.getHandSpace();
      });
    function q(re) {
      const ge = A.indexOf(re.inputSource);
      if (ge === -1) return;
      const De = E[ge];
      De !== void 0 &&
        (De.update(re.inputSource, re.frame, h || l), De.dispatchEvent({ type: re.type, data: re.inputSource }));
    }
    function K() {
      i.removeEventListener("select", q),
        i.removeEventListener("selectstart", q),
        i.removeEventListener("selectend", q),
        i.removeEventListener("squeeze", q),
        i.removeEventListener("squeezestart", q),
        i.removeEventListener("squeezeend", q),
        i.removeEventListener("end", K),
        i.removeEventListener("inputsourceschange", ae);
      for (let re = 0; re < E.length; re++) {
        const ge = A[re];
        ge !== null && ((A[re] = null), E[re].disconnect(ge));
      }
      (D = null),
        (Y = null),
        M.reset(),
        e.setRenderTarget(_),
        (v = null),
        (m = null),
        (p = null),
        (i = null),
        (w = null),
        Ye.stop(),
        (n.isPresenting = !1),
        e.setPixelRatio(P),
        e.setSize(O.width, O.height, !1),
        n.dispatchEvent({ type: "sessionend" });
    }
    (this.setFramebufferScaleFactor = function (re) {
      (s = re),
        n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }),
      (this.setReferenceSpaceType = function (re) {
        (c = re),
          n.isPresenting === !0 &&
            console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
      }),
      (this.getReferenceSpace = function () {
        return h || l;
      }),
      (this.setReferenceSpace = function (re) {
        h = re;
      }),
      (this.getBaseLayer = function () {
        return m !== null ? m : v;
      }),
      (this.getBinding = function () {
        return p;
      }),
      (this.getFrame = function () {
        return x;
      }),
      (this.getSession = function () {
        return i;
      }),
      (this.setSession = async function (re) {
        if (((i = re), i !== null)) {
          if (
            ((_ = e.getRenderTarget()),
            i.addEventListener("select", q),
            i.addEventListener("selectstart", q),
            i.addEventListener("selectend", q),
            i.addEventListener("squeeze", q),
            i.addEventListener("squeezestart", q),
            i.addEventListener("squeezeend", q),
            i.addEventListener("end", K),
            i.addEventListener("inputsourceschange", ae),
            y.xrCompatible !== !0 && (await t.makeXRCompatible()),
            (P = e.getPixelRatio()),
            e.getSize(O),
            i.renderState.layers === void 0)
          ) {
            const ge = {
              antialias: y.antialias,
              alpha: !0,
              depth: y.depth,
              stencil: y.stencil,
              framebufferScaleFactor: s,
            };
            (v = new XRWebGLLayer(i, t, ge)),
              i.updateRenderState({ baseLayer: v }),
              e.setPixelRatio(1),
              e.setSize(v.framebufferWidth, v.framebufferHeight, !1),
              (w = new wi(v.framebufferWidth, v.framebufferHeight, {
                format: An,
                type: Mi,
                colorSpace: e.outputColorSpace,
                stencilBuffer: y.stencil,
              }));
          } else {
            let ge = null,
              De = null,
              xe = null;
            y.depth &&
              ((xe = y.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24),
              (ge = y.stencil ? ys : ps),
              (De = y.stencil ? xs : cr));
            const je = { colorFormat: t.RGBA8, depthFormat: xe, scaleFactor: s };
            (p = new XRWebGLBinding(i, t)),
              (m = p.createProjectionLayer(je)),
              i.updateRenderState({ layers: [m] }),
              e.setPixelRatio(1),
              e.setSize(m.textureWidth, m.textureHeight, !1),
              (w = new wi(m.textureWidth, m.textureHeight, {
                format: An,
                type: Mi,
                depthTexture: new jd(
                  m.textureWidth,
                  m.textureHeight,
                  De,
                  void 0,
                  void 0,
                  void 0,
                  void 0,
                  void 0,
                  void 0,
                  ge
                ),
                stencilBuffer: y.stencil,
                colorSpace: e.outputColorSpace,
                samples: y.antialias ? 4 : 0,
                resolveDepthBuffer: m.ignoreDepthValues === !1,
              }));
          }
          (w.isXRRenderTarget = !0),
            this.setFoveation(u),
            (h = null),
            (l = await i.requestReferenceSpace(c)),
            Ye.setContext(i),
            Ye.start(),
            (n.isPresenting = !0),
            n.dispatchEvent({ type: "sessionstart" });
        }
      }),
      (this.getEnvironmentBlendMode = function () {
        if (i !== null) return i.environmentBlendMode;
      }),
      (this.getDepthTexture = function () {
        return M.getDepthTexture();
      });
    function ae(re) {
      for (let ge = 0; ge < re.removed.length; ge++) {
        const De = re.removed[ge],
          xe = A.indexOf(De);
        xe >= 0 && ((A[xe] = null), E[xe].disconnect(De));
      }
      for (let ge = 0; ge < re.added.length; ge++) {
        const De = re.added[ge];
        let xe = A.indexOf(De);
        if (xe === -1) {
          for (let it = 0; it < E.length; it++)
            if (it >= A.length) {
              A.push(De), (xe = it);
              break;
            } else if (A[it] === null) {
              (A[it] = De), (xe = it);
              break;
            }
          if (xe === -1) break;
        }
        const je = E[xe];
        je && je.connect(De);
      }
    }
    const j = new N(),
      me = new N();
    function k(re, ge, De) {
      j.setFromMatrixPosition(ge.matrixWorld), me.setFromMatrixPosition(De.matrixWorld);
      const xe = j.distanceTo(me),
        je = ge.projectionMatrix.elements,
        it = De.projectionMatrix.elements,
        Qe = je[14] / (je[10] - 1),
        at = je[14] / (je[10] + 1),
        ue = (je[9] + 1) / je[5],
        pe = (je[9] - 1) / je[5],
        z = (je[8] - 1) / je[0],
        qe = (it[8] + 1) / it[0],
        ve = Qe * z,
        Oe = Qe * qe,
        Me = xe / (-z + qe),
        tt = Me * -z;
      if (
        (ge.matrixWorld.decompose(re.position, re.quaternion, re.scale),
        re.translateX(tt),
        re.translateZ(Me),
        re.matrixWorld.compose(re.position, re.quaternion, re.scale),
        re.matrixWorldInverse.copy(re.matrixWorld).invert(),
        je[10] === -1)
      )
        re.projectionMatrix.copy(ge.projectionMatrix), re.projectionMatrixInverse.copy(ge.projectionMatrixInverse);
      else {
        const Ie = Qe + Me,
          U = at + Me,
          R = ve - tt,
          Z = Oe + (xe - tt),
          oe = ((ue * at) / U) * Ie,
          de = ((pe * at) / U) * Ie;
        re.projectionMatrix.makePerspective(R, Z, oe, de, Ie, U),
          re.projectionMatrixInverse.copy(re.projectionMatrix).invert();
      }
    }
    function ne(re, ge) {
      ge === null ? re.matrixWorld.copy(re.matrix) : re.matrixWorld.multiplyMatrices(ge.matrixWorld, re.matrix),
        re.matrixWorldInverse.copy(re.matrixWorld).invert();
    }
    this.updateCamera = function (re) {
      if (i === null) return;
      let ge = re.near,
        De = re.far;
      M.texture !== null && (M.depthNear > 0 && (ge = M.depthNear), M.depthFar > 0 && (De = M.depthFar)),
        (b.near = F.near = L.near = ge),
        (b.far = F.far = L.far = De),
        (D !== b.near || Y !== b.far) &&
          (i.updateRenderState({ depthNear: b.near, depthFar: b.far }), (D = b.near), (Y = b.far)),
        (L.layers.mask = re.layers.mask | 2),
        (F.layers.mask = re.layers.mask | 4),
        (b.layers.mask = L.layers.mask | F.layers.mask);
      const xe = re.parent,
        je = b.cameras;
      ne(b, xe);
      for (let it = 0; it < je.length; it++) ne(je[it], xe);
      je.length === 2 ? k(b, L, F) : b.projectionMatrix.copy(L.projectionMatrix), te(re, b, xe);
    };
    function te(re, ge, De) {
      De === null
        ? re.matrix.copy(ge.matrixWorld)
        : (re.matrix.copy(De.matrixWorld), re.matrix.invert(), re.matrix.multiply(ge.matrixWorld)),
        re.matrix.decompose(re.position, re.quaternion, re.scale),
        re.updateMatrixWorld(!0),
        re.projectionMatrix.copy(ge.projectionMatrix),
        re.projectionMatrixInverse.copy(ge.projectionMatrixInverse),
        re.isPerspectiveCamera && ((re.fov = xo * 2 * Math.atan(1 / re.projectionMatrix.elements[5])), (re.zoom = 1));
    }
    (this.getCamera = function () {
      return b;
    }),
      (this.getFoveation = function () {
        if (!(m === null && v === null)) return u;
      }),
      (this.setFoveation = function (re) {
        (u = re),
          m !== null && (m.fixedFoveation = re),
          v !== null && v.fixedFoveation !== void 0 && (v.fixedFoveation = re);
      }),
      (this.hasDepthSensing = function () {
        return M.texture !== null;
      }),
      (this.getDepthSensingMesh = function () {
        return M.getMesh(b);
      });
    let ce = null;
    function Ce(re, ge) {
      if (((d = ge.getViewerPose(h || l)), (x = ge), d !== null)) {
        const De = d.views;
        v !== null && (e.setRenderTargetFramebuffer(w, v.framebuffer), e.setRenderTarget(w));
        let xe = !1;
        De.length !== b.cameras.length && ((b.cameras.length = 0), (xe = !0));
        for (let it = 0; it < De.length; it++) {
          const Qe = De[it];
          let at = null;
          if (v !== null) at = v.getViewport(Qe);
          else {
            const pe = p.getViewSubImage(m, Qe);
            (at = pe.viewport),
              it === 0 &&
                (e.setRenderTargetTextures(w, pe.colorTexture, m.ignoreDepthValues ? void 0 : pe.depthStencilTexture),
                e.setRenderTarget(w));
          }
          let ue = C[it];
          ue === void 0 && ((ue = new gn()), ue.layers.enable(it), (ue.viewport = new Ct()), (C[it] = ue)),
            ue.matrix.fromArray(Qe.transform.matrix),
            ue.matrix.decompose(ue.position, ue.quaternion, ue.scale),
            ue.projectionMatrix.fromArray(Qe.projectionMatrix),
            ue.projectionMatrixInverse.copy(ue.projectionMatrix).invert(),
            ue.viewport.set(at.x, at.y, at.width, at.height),
            it === 0 && (b.matrix.copy(ue.matrix), b.matrix.decompose(b.position, b.quaternion, b.scale)),
            xe === !0 && b.cameras.push(ue);
        }
        const je = i.enabledFeatures;
        if (je && je.includes("depth-sensing")) {
          const it = p.getDepthInformation(De[0]);
          it && it.isValid && it.texture && M.init(e, it, i.renderState);
        }
      }
      for (let De = 0; De < E.length; De++) {
        const xe = A[De],
          je = E[De];
        xe !== null && je !== void 0 && je.update(xe, ge, h || l);
      }
      ce && ce(re, ge), ge.detectedPlanes && n.dispatchEvent({ type: "planesdetected", data: ge }), (x = null);
    }
    const Ye = new Jv();
    Ye.setAnimationLoop(Ce),
      (this.setAnimationLoop = function (re) {
        ce = re;
      }),
      (this.dispose = function () {});
  }
}
const Qr = new ni(),
  yT = new st();
function ST(r, e) {
  function t(y, _) {
    y.matrixAutoUpdate === !0 && y.updateMatrix(), _.value.copy(y.matrix);
  }
  function n(y, _) {
    _.color.getRGB(y.fogColor.value, Xv(r)),
      _.isFog
        ? ((y.fogNear.value = _.near), (y.fogFar.value = _.far))
        : _.isFogExp2 && (y.fogDensity.value = _.density);
  }
  function i(y, _, w, E, A) {
    _.isMeshBasicMaterial || _.isMeshLambertMaterial
      ? s(y, _)
      : _.isMeshToonMaterial
        ? (s(y, _), p(y, _))
        : _.isMeshPhongMaterial
          ? (s(y, _), d(y, _))
          : _.isMeshStandardMaterial
            ? (s(y, _), m(y, _), _.isMeshPhysicalMaterial && v(y, _, A))
            : _.isMeshMatcapMaterial
              ? (s(y, _), x(y, _))
              : _.isMeshDepthMaterial
                ? s(y, _)
                : _.isMeshDistanceMaterial
                  ? (s(y, _), M(y, _))
                  : _.isMeshNormalMaterial
                    ? s(y, _)
                    : _.isLineBasicMaterial
                      ? (l(y, _), _.isLineDashedMaterial && c(y, _))
                      : _.isPointsMaterial
                        ? u(y, _, w, E)
                        : _.isSpriteMaterial
                          ? h(y, _)
                          : _.isShadowMaterial
                            ? (y.color.value.copy(_.color), (y.opacity.value = _.opacity))
                            : _.isShaderMaterial && (_.uniformsNeedUpdate = !1);
  }
  function s(y, _) {
    (y.opacity.value = _.opacity),
      _.color && y.diffuse.value.copy(_.color),
      _.emissive && y.emissive.value.copy(_.emissive).multiplyScalar(_.emissiveIntensity),
      _.map && ((y.map.value = _.map), t(_.map, y.mapTransform)),
      _.alphaMap && ((y.alphaMap.value = _.alphaMap), t(_.alphaMap, y.alphaMapTransform)),
      _.bumpMap &&
        ((y.bumpMap.value = _.bumpMap),
        t(_.bumpMap, y.bumpMapTransform),
        (y.bumpScale.value = _.bumpScale),
        _.side === Nn && (y.bumpScale.value *= -1)),
      _.normalMap &&
        ((y.normalMap.value = _.normalMap),
        t(_.normalMap, y.normalMapTransform),
        y.normalScale.value.copy(_.normalScale),
        _.side === Nn && y.normalScale.value.negate()),
      _.displacementMap &&
        ((y.displacementMap.value = _.displacementMap),
        t(_.displacementMap, y.displacementMapTransform),
        (y.displacementScale.value = _.displacementScale),
        (y.displacementBias.value = _.displacementBias)),
      _.emissiveMap && ((y.emissiveMap.value = _.emissiveMap), t(_.emissiveMap, y.emissiveMapTransform)),
      _.specularMap && ((y.specularMap.value = _.specularMap), t(_.specularMap, y.specularMapTransform)),
      _.alphaTest > 0 && (y.alphaTest.value = _.alphaTest);
    const w = e.get(_),
      E = w.envMap,
      A = w.envMapRotation;
    E &&
      ((y.envMap.value = E),
      Qr.copy(A),
      (Qr.x *= -1),
      (Qr.y *= -1),
      (Qr.z *= -1),
      E.isCubeTexture && E.isRenderTargetTexture === !1 && ((Qr.y *= -1), (Qr.z *= -1)),
      y.envMapRotation.value.setFromMatrix4(yT.makeRotationFromEuler(Qr)),
      (y.flipEnvMap.value = E.isCubeTexture && E.isRenderTargetTexture === !1 ? -1 : 1),
      (y.reflectivity.value = _.reflectivity),
      (y.ior.value = _.ior),
      (y.refractionRatio.value = _.refractionRatio)),
      _.lightMap &&
        ((y.lightMap.value = _.lightMap),
        (y.lightMapIntensity.value = _.lightMapIntensity),
        t(_.lightMap, y.lightMapTransform)),
      _.aoMap && ((y.aoMap.value = _.aoMap), (y.aoMapIntensity.value = _.aoMapIntensity), t(_.aoMap, y.aoMapTransform));
  }
  function l(y, _) {
    y.diffuse.value.copy(_.color),
      (y.opacity.value = _.opacity),
      _.map && ((y.map.value = _.map), t(_.map, y.mapTransform));
  }
  function c(y, _) {
    (y.dashSize.value = _.dashSize), (y.totalSize.value = _.dashSize + _.gapSize), (y.scale.value = _.scale);
  }
  function u(y, _, w, E) {
    y.diffuse.value.copy(_.color),
      (y.opacity.value = _.opacity),
      (y.size.value = _.size * w),
      (y.scale.value = E * 0.5),
      _.map && ((y.map.value = _.map), t(_.map, y.uvTransform)),
      _.alphaMap && ((y.alphaMap.value = _.alphaMap), t(_.alphaMap, y.alphaMapTransform)),
      _.alphaTest > 0 && (y.alphaTest.value = _.alphaTest);
  }
  function h(y, _) {
    y.diffuse.value.copy(_.color),
      (y.opacity.value = _.opacity),
      (y.rotation.value = _.rotation),
      _.map && ((y.map.value = _.map), t(_.map, y.mapTransform)),
      _.alphaMap && ((y.alphaMap.value = _.alphaMap), t(_.alphaMap, y.alphaMapTransform)),
      _.alphaTest > 0 && (y.alphaTest.value = _.alphaTest);
  }
  function d(y, _) {
    y.specular.value.copy(_.specular), (y.shininess.value = Math.max(_.shininess, 1e-4));
  }
  function p(y, _) {
    _.gradientMap && (y.gradientMap.value = _.gradientMap);
  }
  function m(y, _) {
    (y.metalness.value = _.metalness),
      _.metalnessMap && ((y.metalnessMap.value = _.metalnessMap), t(_.metalnessMap, y.metalnessMapTransform)),
      (y.roughness.value = _.roughness),
      _.roughnessMap && ((y.roughnessMap.value = _.roughnessMap), t(_.roughnessMap, y.roughnessMapTransform)),
      _.envMap && (y.envMapIntensity.value = _.envMapIntensity);
  }
  function v(y, _, w) {
    (y.ior.value = _.ior),
      _.sheen > 0 &&
        (y.sheenColor.value.copy(_.sheenColor).multiplyScalar(_.sheen),
        (y.sheenRoughness.value = _.sheenRoughness),
        _.sheenColorMap && ((y.sheenColorMap.value = _.sheenColorMap), t(_.sheenColorMap, y.sheenColorMapTransform)),
        _.sheenRoughnessMap &&
          ((y.sheenRoughnessMap.value = _.sheenRoughnessMap), t(_.sheenRoughnessMap, y.sheenRoughnessMapTransform))),
      _.clearcoat > 0 &&
        ((y.clearcoat.value = _.clearcoat),
        (y.clearcoatRoughness.value = _.clearcoatRoughness),
        _.clearcoatMap && ((y.clearcoatMap.value = _.clearcoatMap), t(_.clearcoatMap, y.clearcoatMapTransform)),
        _.clearcoatRoughnessMap &&
          ((y.clearcoatRoughnessMap.value = _.clearcoatRoughnessMap),
          t(_.clearcoatRoughnessMap, y.clearcoatRoughnessMapTransform)),
        _.clearcoatNormalMap &&
          ((y.clearcoatNormalMap.value = _.clearcoatNormalMap),
          t(_.clearcoatNormalMap, y.clearcoatNormalMapTransform),
          y.clearcoatNormalScale.value.copy(_.clearcoatNormalScale),
          _.side === Nn && y.clearcoatNormalScale.value.negate())),
      _.dispersion > 0 && (y.dispersion.value = _.dispersion),
      _.iridescence > 0 &&
        ((y.iridescence.value = _.iridescence),
        (y.iridescenceIOR.value = _.iridescenceIOR),
        (y.iridescenceThicknessMinimum.value = _.iridescenceThicknessRange[0]),
        (y.iridescenceThicknessMaximum.value = _.iridescenceThicknessRange[1]),
        _.iridescenceMap &&
          ((y.iridescenceMap.value = _.iridescenceMap), t(_.iridescenceMap, y.iridescenceMapTransform)),
        _.iridescenceThicknessMap &&
          ((y.iridescenceThicknessMap.value = _.iridescenceThicknessMap),
          t(_.iridescenceThicknessMap, y.iridescenceThicknessMapTransform))),
      _.transmission > 0 &&
        ((y.transmission.value = _.transmission),
        (y.transmissionSamplerMap.value = w.texture),
        y.transmissionSamplerSize.value.set(w.width, w.height),
        _.transmissionMap &&
          ((y.transmissionMap.value = _.transmissionMap), t(_.transmissionMap, y.transmissionMapTransform)),
        (y.thickness.value = _.thickness),
        _.thicknessMap && ((y.thicknessMap.value = _.thicknessMap), t(_.thicknessMap, y.thicknessMapTransform)),
        (y.attenuationDistance.value = _.attenuationDistance),
        y.attenuationColor.value.copy(_.attenuationColor)),
      _.anisotropy > 0 &&
        (y.anisotropyVector.value.set(
          _.anisotropy * Math.cos(_.anisotropyRotation),
          _.anisotropy * Math.sin(_.anisotropyRotation)
        ),
        _.anisotropyMap && ((y.anisotropyMap.value = _.anisotropyMap), t(_.anisotropyMap, y.anisotropyMapTransform))),
      (y.specularIntensity.value = _.specularIntensity),
      y.specularColor.value.copy(_.specularColor),
      _.specularColorMap &&
        ((y.specularColorMap.value = _.specularColorMap), t(_.specularColorMap, y.specularColorMapTransform)),
      _.specularIntensityMap &&
        ((y.specularIntensityMap.value = _.specularIntensityMap),
        t(_.specularIntensityMap, y.specularIntensityMapTransform));
  }
  function x(y, _) {
    _.matcap && (y.matcap.value = _.matcap);
  }
  function M(y, _) {
    const w = e.get(_).light;
    y.referencePosition.value.setFromMatrixPosition(w.matrixWorld),
      (y.nearDistance.value = w.shadow.camera.near),
      (y.farDistance.value = w.shadow.camera.far);
  }
  return { refreshFogUniforms: n, refreshMaterialUniforms: i };
}
function MT(r, e, t, n) {
  let i = {},
    s = {},
    l = [];
  const c = r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);
  function u(w, E) {
    const A = E.program;
    n.uniformBlockBinding(w, A);
  }
  function h(w, E) {
    let A = i[w.id];
    A === void 0 && (x(w), (A = d(w)), (i[w.id] = A), w.addEventListener("dispose", y));
    const O = E.program;
    n.updateUBOMapping(w, O);
    const P = e.render.frame;
    s[w.id] !== P && (m(w), (s[w.id] = P));
  }
  function d(w) {
    const E = p();
    w.__bindingPointIndex = E;
    const A = r.createBuffer(),
      O = w.__size,
      P = w.usage;
    return (
      r.bindBuffer(r.UNIFORM_BUFFER, A),
      r.bufferData(r.UNIFORM_BUFFER, O, P),
      r.bindBuffer(r.UNIFORM_BUFFER, null),
      r.bindBufferBase(r.UNIFORM_BUFFER, E, A),
      A
    );
  }
  function p() {
    for (let w = 0; w < c; w++) if (l.indexOf(w) === -1) return l.push(w), w;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function m(w) {
    const E = i[w.id],
      A = w.uniforms,
      O = w.__cache;
    r.bindBuffer(r.UNIFORM_BUFFER, E);
    for (let P = 0, L = A.length; P < L; P++) {
      const F = Array.isArray(A[P]) ? A[P] : [A[P]];
      for (let C = 0, b = F.length; C < b; C++) {
        const D = F[C];
        if (v(D, P, C, O) === !0) {
          const Y = D.__offset,
            q = Array.isArray(D.value) ? D.value : [D.value];
          let K = 0;
          for (let ae = 0; ae < q.length; ae++) {
            const j = q[ae],
              me = M(j);
            typeof j == "number" || typeof j == "boolean"
              ? ((D.__data[0] = j), r.bufferSubData(r.UNIFORM_BUFFER, Y + K, D.__data))
              : j.isMatrix3
                ? ((D.__data[0] = j.elements[0]),
                  (D.__data[1] = j.elements[1]),
                  (D.__data[2] = j.elements[2]),
                  (D.__data[3] = 0),
                  (D.__data[4] = j.elements[3]),
                  (D.__data[5] = j.elements[4]),
                  (D.__data[6] = j.elements[5]),
                  (D.__data[7] = 0),
                  (D.__data[8] = j.elements[6]),
                  (D.__data[9] = j.elements[7]),
                  (D.__data[10] = j.elements[8]),
                  (D.__data[11] = 0))
                : (j.toArray(D.__data, K), (K += me.storage / Float32Array.BYTES_PER_ELEMENT));
          }
          r.bufferSubData(r.UNIFORM_BUFFER, Y, D.__data);
        }
      }
    }
    r.bindBuffer(r.UNIFORM_BUFFER, null);
  }
  function v(w, E, A, O) {
    const P = w.value,
      L = E + "_" + A;
    if (O[L] === void 0) return typeof P == "number" || typeof P == "boolean" ? (O[L] = P) : (O[L] = P.clone()), !0;
    {
      const F = O[L];
      if (typeof P == "number" || typeof P == "boolean") {
        if (F !== P) return (O[L] = P), !0;
      } else if (F.equals(P) === !1) return F.copy(P), !0;
    }
    return !1;
  }
  function x(w) {
    const E = w.uniforms;
    let A = 0;
    const O = 16;
    for (let L = 0, F = E.length; L < F; L++) {
      const C = Array.isArray(E[L]) ? E[L] : [E[L]];
      for (let b = 0, D = C.length; b < D; b++) {
        const Y = C[b],
          q = Array.isArray(Y.value) ? Y.value : [Y.value];
        for (let K = 0, ae = q.length; K < ae; K++) {
          const j = q[K],
            me = M(j),
            k = A % O,
            ne = k % me.boundary,
            te = k + ne;
          (A += ne),
            te !== 0 && O - te < me.storage && (A += O - te),
            (Y.__data = new Float32Array(me.storage / Float32Array.BYTES_PER_ELEMENT)),
            (Y.__offset = A),
            (A += me.storage);
        }
      }
    }
    const P = A % O;
    return P > 0 && (A += O - P), (w.__size = A), (w.__cache = {}), this;
  }
  function M(w) {
    const E = { boundary: 0, storage: 0 };
    return (
      typeof w == "number" || typeof w == "boolean"
        ? ((E.boundary = 4), (E.storage = 4))
        : w.isVector2
          ? ((E.boundary = 8), (E.storage = 8))
          : w.isVector3 || w.isColor
            ? ((E.boundary = 16), (E.storage = 12))
            : w.isVector4
              ? ((E.boundary = 16), (E.storage = 16))
              : w.isMatrix3
                ? ((E.boundary = 48), (E.storage = 48))
                : w.isMatrix4
                  ? ((E.boundary = 64), (E.storage = 64))
                  : w.isTexture
                    ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.")
                    : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", w),
      E
    );
  }
  function y(w) {
    const E = w.target;
    E.removeEventListener("dispose", y);
    const A = l.indexOf(E.__bindingPointIndex);
    l.splice(A, 1), r.deleteBuffer(i[E.id]), delete i[E.id], delete s[E.id];
  }
  function _() {
    for (const w in i) r.deleteBuffer(i[w]);
    (l = []), (i = {}), (s = {});
  }
  return { bind: u, update: h, dispose: _ };
}
class n_ {
  constructor(e = {}) {
    const {
      canvas: t = Vv(),
      context: n = null,
      depth: i = !0,
      stencil: s = !1,
      alpha: l = !1,
      antialias: c = !1,
      premultipliedAlpha: u = !0,
      preserveDrawingBuffer: h = !1,
      powerPreference: d = "default",
      failIfMajorPerformanceCaveat: p = !1,
      reverseDepthBuffer: m = !1,
    } = e;
    this.isWebGLRenderer = !0;
    let v;
    if (n !== null) {
      if (typeof WebGLRenderingContext < "u" && n instanceof WebGLRenderingContext)
        throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
      v = n.getContextAttributes().alpha;
    } else v = l;
    const x = new Uint32Array(4),
      M = new Int32Array(4);
    let y = null,
      _ = null;
    const w = [],
      E = [];
    (this.domElement = t),
      (this.debug = { checkShaderErrors: !0, onShaderError: null }),
      (this.autoClear = !0),
      (this.autoClearColor = !0),
      (this.autoClearDepth = !0),
      (this.autoClearStencil = !0),
      (this.sortObjects = !0),
      (this.clippingPlanes = []),
      (this.localClippingEnabled = !1),
      (this._outputColorSpace = Wn),
      (this.toneMapping = zi),
      (this.toneMappingExposure = 1);
    const A = this;
    let O = !1,
      P = 0,
      L = 0,
      F = null,
      C = -1,
      b = null;
    const D = new Ct(),
      Y = new Ct();
    let q = null;
    const K = new Ne(0);
    let ae = 0,
      j = t.width,
      me = t.height,
      k = 1,
      ne = null,
      te = null;
    const ce = new Ct(0, 0, j, me),
      Ce = new Ct(0, 0, j, me);
    let Ye = !1;
    const re = new Ga();
    let ge = !1,
      De = !1;
    const xe = new st(),
      je = new st(),
      it = new N(),
      Qe = new Ct(),
      at = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    let ue = !1;
    function pe() {
      return F === null ? k : 1;
    }
    let z = n;
    function qe(I, G) {
      return t.getContext(I, G);
    }
    try {
      const I = {
        alpha: !0,
        depth: i,
        stencil: s,
        antialias: c,
        premultipliedAlpha: u,
        preserveDrawingBuffer: h,
        powerPreference: d,
        failIfMajorPerformanceCaveat: p,
      };
      if (
        ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${Du}`),
        t.addEventListener("webglcontextlost", he, !1),
        t.addEventListener("webglcontextrestored", Ue, !1),
        t.addEventListener("webglcontextcreationerror", Re, !1),
        z === null)
      ) {
        const G = "webgl2";
        if (((z = qe(G, I)), z === null))
          throw qe(G)
            ? new Error("Error creating WebGL context with your selected attributes.")
            : new Error("Error creating WebGL context.");
      }
    } catch (I) {
      throw (console.error("THREE.WebGLRenderer: " + I.message), I);
    }
    let ve, Oe, Me, tt, Ie, U, R, Z, oe, de, le, We, Ee, Fe, Mt, _e, Be, nt, ot, ze, Et, ct, Nt, H;
    function Te() {
      (ve = new Cw(z)),
        ve.init(),
        (ct = new e_(z, ve)),
        (Oe = new Mw(z, ve, e, ct)),
        (Me = new lT(z, ve)),
        Oe.reverseDepthBuffer && m && Me.buffers.depth.setReversed(!0),
        (tt = new Iw(z)),
        (Ie = new JE()),
        (U = new pT(z, ve, Me, Ie, Oe, ct, tt)),
        (R = new Ew(A)),
        (Z = new bw(A)),
        (oe = new BS(z)),
        (Nt = new yw(z, oe)),
        (de = new Rw(z, oe, tt, Nt)),
        (le = new Dw(z, de, oe, tt)),
        (ot = new Lw(z, Oe, U)),
        (_e = new ww(Ie)),
        (We = new ZE(A, R, Z, ve, Oe, Nt, _e)),
        (Ee = new ST(A, Ie)),
        (Fe = new jE()),
        (Mt = new iT(ve)),
        (nt = new xw(A, R, Z, Me, le, v, u)),
        (Be = new oT(A, le, Oe)),
        (H = new MT(z, tt, Oe, Me)),
        (ze = new Sw(z, ve, tt)),
        (Et = new Pw(z, ve, tt)),
        (tt.programs = We.programs),
        (A.capabilities = Oe),
        (A.extensions = ve),
        (A.properties = Ie),
        (A.renderLists = Fe),
        (A.shadowMap = Be),
        (A.state = Me),
        (A.info = tt);
    }
    Te();
    const se = new xT(A, z);
    (this.xr = se),
      (this.getContext = function () {
        return z;
      }),
      (this.getContextAttributes = function () {
        return z.getContextAttributes();
      }),
      (this.forceContextLoss = function () {
        const I = ve.get("WEBGL_lose_context");
        I && I.loseContext();
      }),
      (this.forceContextRestore = function () {
        const I = ve.get("WEBGL_lose_context");
        I && I.restoreContext();
      }),
      (this.getPixelRatio = function () {
        return k;
      }),
      (this.setPixelRatio = function (I) {
        I !== void 0 && ((k = I), this.setSize(j, me, !1));
      }),
      (this.getSize = function (I) {
        return I.set(j, me);
      }),
      (this.setSize = function (I, G, Q = !0) {
        if (se.isPresenting) {
          console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
          return;
        }
        (j = I),
          (me = G),
          (t.width = Math.floor(I * k)),
          (t.height = Math.floor(G * k)),
          Q === !0 && ((t.style.width = I + "px"), (t.style.height = G + "px")),
          this.setViewport(0, 0, I, G);
      }),
      (this.getDrawingBufferSize = function (I) {
        return I.set(j * k, me * k).floor();
      }),
      (this.setDrawingBufferSize = function (I, G, Q) {
        (j = I),
          (me = G),
          (k = Q),
          (t.width = Math.floor(I * Q)),
          (t.height = Math.floor(G * Q)),
          this.setViewport(0, 0, I, G);
      }),
      (this.getCurrentViewport = function (I) {
        return I.copy(D);
      }),
      (this.getViewport = function (I) {
        return I.copy(ce);
      }),
      (this.setViewport = function (I, G, Q, $) {
        I.isVector4 ? ce.set(I.x, I.y, I.z, I.w) : ce.set(I, G, Q, $),
          Me.viewport(D.copy(ce).multiplyScalar(k).round());
      }),
      (this.getScissor = function (I) {
        return I.copy(Ce);
      }),
      (this.setScissor = function (I, G, Q, $) {
        I.isVector4 ? Ce.set(I.x, I.y, I.z, I.w) : Ce.set(I, G, Q, $), Me.scissor(Y.copy(Ce).multiplyScalar(k).round());
      }),
      (this.getScissorTest = function () {
        return Ye;
      }),
      (this.setScissorTest = function (I) {
        Me.setScissorTest((Ye = I));
      }),
      (this.setOpaqueSort = function (I) {
        ne = I;
      }),
      (this.setTransparentSort = function (I) {
        te = I;
      }),
      (this.getClearColor = function (I) {
        return I.copy(nt.getClearColor());
      }),
      (this.setClearColor = function () {
        nt.setClearColor.apply(nt, arguments);
      }),
      (this.getClearAlpha = function () {
        return nt.getClearAlpha();
      }),
      (this.setClearAlpha = function () {
        nt.setClearAlpha.apply(nt, arguments);
      }),
      (this.clear = function (I = !0, G = !0, Q = !0) {
        let $ = 0;
        if (I) {
          let X = !1;
          if (F !== null) {
            const Se = F.texture.format;
            X = Se === Vu || Se === ku || Se === za;
          }
          if (X) {
            const Se = F.texture.type,
              Ae = Se === Mi || Se === cr || Se === _o || Se === xs || Se === Ou || Se === Bu,
              Ve = nt.getClearColor(),
              He = nt.getClearAlpha(),
              rt = Ve.r,
              ut = Ve.g,
              Ge = Ve.b;
            Ae
              ? ((x[0] = rt), (x[1] = ut), (x[2] = Ge), (x[3] = He), z.clearBufferuiv(z.COLOR, 0, x))
              : ((M[0] = rt), (M[1] = ut), (M[2] = Ge), (M[3] = He), z.clearBufferiv(z.COLOR, 0, M));
          } else $ |= z.COLOR_BUFFER_BIT;
        }
        G && ($ |= z.DEPTH_BUFFER_BIT),
          Q && (($ |= z.STENCIL_BUFFER_BIT), this.state.buffers.stencil.setMask(4294967295)),
          z.clear($);
      }),
      (this.clearColor = function () {
        this.clear(!0, !1, !1);
      }),
      (this.clearDepth = function () {
        this.clear(!1, !0, !1);
      }),
      (this.clearStencil = function () {
        this.clear(!1, !1, !0);
      }),
      (this.dispose = function () {
        t.removeEventListener("webglcontextlost", he, !1),
          t.removeEventListener("webglcontextrestored", Ue, !1),
          t.removeEventListener("webglcontextcreationerror", Re, !1),
          Fe.dispose(),
          Mt.dispose(),
          Ie.dispose(),
          R.dispose(),
          Z.dispose(),
          le.dispose(),
          Nt.dispose(),
          H.dispose(),
          We.dispose(),
          se.dispose(),
          se.removeEventListener("sessionstart", ja),
          se.removeEventListener("sessionend", Qa),
          bi.stop();
      });
    function he(I) {
      I.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), (O = !0);
    }
    function Ue() {
      console.log("THREE.WebGLRenderer: Context Restored."), (O = !1);
      const I = tt.autoReset,
        G = Be.enabled,
        Q = Be.autoUpdate,
        $ = Be.needsUpdate,
        X = Be.type;
      Te(), (tt.autoReset = I), (Be.enabled = G), (Be.autoUpdate = Q), (Be.needsUpdate = $), (Be.type = X);
    }
    function Re(I) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", I.statusMessage);
    }
    function lt(I) {
      const G = I.target;
      G.removeEventListener("dispose", lt), kt(G);
    }
    function kt(I) {
      sn(I), Ie.remove(I);
    }
    function sn(I) {
      const G = Ie.get(I).programs;
      G !== void 0 &&
        (G.forEach(function (Q) {
          We.releaseProgram(Q);
        }),
        I.isShaderMaterial && We.releaseShaderCache(I));
    }
    this.renderBufferDirect = function (I, G, Q, $, X, Se) {
      G === null && (G = at);
      const Ae = X.isMesh && X.matrixWorld.determinant() < 0,
        Ve = hh(I, G, Q, $, X);
      Me.setMaterial($, Ae);
      let He = Q.index,
        rt = 1;
      if ($.wireframe === !0) {
        if (((He = de.getWireframeAttribute(Q)), He === void 0)) return;
        rt = 2;
      }
      const ut = Q.drawRange,
        Ge = Q.attributes.position;
      let xt = ut.start * rt,
        Tt = (ut.start + ut.count) * rt;
      Se !== null && ((xt = Math.max(xt, Se.start * rt)), (Tt = Math.min(Tt, (Se.start + Se.count) * rt))),
        He !== null
          ? ((xt = Math.max(xt, 0)), (Tt = Math.min(Tt, He.count)))
          : Ge != null && ((xt = Math.max(xt, 0)), (Tt = Math.min(Tt, Ge.count)));
      const et = Tt - xt;
      if (et < 0 || et === 1 / 0) return;
      Nt.setup(X, $, Ve, Q, He);
      let mt,
        yt = ze;
      if ((He !== null && ((mt = oe.get(He)), (yt = Et), yt.setIndex(mt)), X.isMesh))
        $.wireframe === !0
          ? (Me.setLineWidth($.wireframeLinewidth * pe()), yt.setMode(z.LINES))
          : yt.setMode(z.TRIANGLES);
      else if (X.isLine) {
        let Pe = $.linewidth;
        Pe === void 0 && (Pe = 1),
          Me.setLineWidth(Pe * pe()),
          X.isLineSegments ? yt.setMode(z.LINES) : X.isLineLoop ? yt.setMode(z.LINE_LOOP) : yt.setMode(z.LINE_STRIP);
      } else X.isPoints ? yt.setMode(z.POINTS) : X.isSprite && yt.setMode(z.TRIANGLES);
      if (X.isBatchedMesh)
        if (X._multiDrawInstances !== null)
          yt.renderMultiDrawInstances(X._multiDrawStarts, X._multiDrawCounts, X._multiDrawCount, X._multiDrawInstances);
        else if (ve.get("WEBGL_multi_draw"))
          yt.renderMultiDraw(X._multiDrawStarts, X._multiDrawCounts, X._multiDrawCount);
        else {
          const Pe = X._multiDrawStarts,
            Vt = X._multiDrawCounts,
            wt = X._multiDrawCount,
            un = He ? oe.get(He).bytesPerElement : 1,
            jt = Ie.get($).currentProgram.getUniforms();
          for (let hn = 0; hn < wt; hn++) jt.setValue(z, "_gl_DrawID", hn), yt.render(Pe[hn] / un, Vt[hn]);
        }
      else if (X.isInstancedMesh) yt.renderInstances(xt, et, X.count);
      else if (Q.isInstancedBufferGeometry) {
        const Pe = Q._maxInstanceCount !== void 0 ? Q._maxInstanceCount : 1 / 0,
          Vt = Math.min(Q.instanceCount, Pe);
        yt.renderInstances(xt, et, Vt);
      } else yt.render(xt, et);
    };
    function Pt(I, G, Q) {
      I.transparent === !0 && I.side === Si && I.forceSinglePass === !1
        ? ((I.side = Nn),
          (I.needsUpdate = !0),
          Rs(I, G, Q),
          (I.side = ar),
          (I.needsUpdate = !0),
          Rs(I, G, Q),
          (I.side = Si))
        : Rs(I, G, Q);
    }
    (this.compile = function (I, G, Q = null) {
      Q === null && (Q = I),
        (_ = Mt.get(Q)),
        _.init(G),
        E.push(_),
        Q.traverseVisible(function (X) {
          X.isLight && X.layers.test(G.layers) && (_.pushLight(X), X.castShadow && _.pushShadow(X));
        }),
        I !== Q &&
          I.traverseVisible(function (X) {
            X.isLight && X.layers.test(G.layers) && (_.pushLight(X), X.castShadow && _.pushShadow(X));
          }),
        _.setupLights();
      const $ = new Set();
      return (
        I.traverse(function (X) {
          if (!(X.isMesh || X.isPoints || X.isLine || X.isSprite)) return;
          const Se = X.material;
          if (Se)
            if (Array.isArray(Se))
              for (let Ae = 0; Ae < Se.length; Ae++) {
                const Ve = Se[Ae];
                Pt(Ve, Q, X), $.add(Ve);
              }
            else Pt(Se, Q, X), $.add(Se);
        }),
        E.pop(),
        (_ = null),
        $
      );
    }),
      (this.compileAsync = function (I, G, Q = null) {
        const $ = this.compile(I, G, Q);
        return new Promise((X) => {
          function Se() {
            if (
              ($.forEach(function (Ae) {
                Ie.get(Ae).currentProgram.isReady() && $.delete(Ae);
              }),
              $.size === 0)
            ) {
              X(I);
              return;
            }
            setTimeout(Se, 10);
          }
          ve.get("KHR_parallel_shader_compile") !== null ? Se() : setTimeout(Se, 10);
        });
      });
    let Bn = null;
    function di(I) {
      Bn && Bn(I);
    }
    function ja() {
      bi.stop();
    }
    function Qa() {
      bi.start();
    }
    const bi = new Jv();
    bi.setAnimationLoop(di),
      typeof self < "u" && bi.setContext(self),
      (this.setAnimationLoop = function (I) {
        (Bn = I), se.setAnimationLoop(I), I === null ? bi.stop() : bi.start();
      }),
      se.addEventListener("sessionstart", ja),
      se.addEventListener("sessionend", Qa),
      (this.render = function (I, G) {
        if (G !== void 0 && G.isCamera !== !0) {
          console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
          return;
        }
        if (O === !0) return;
        if (
          (I.matrixWorldAutoUpdate === !0 && I.updateMatrixWorld(),
          G.parent === null && G.matrixWorldAutoUpdate === !0 && G.updateMatrixWorld(),
          se.enabled === !0 &&
            se.isPresenting === !0 &&
            (se.cameraAutoUpdate === !0 && se.updateCamera(G), (G = se.getCamera())),
          I.isScene === !0 && I.onBeforeRender(A, I, G, F),
          (_ = Mt.get(I, E.length)),
          _.init(G),
          E.push(_),
          je.multiplyMatrices(G.projectionMatrix, G.matrixWorldInverse),
          re.setFromProjectionMatrix(je),
          (De = this.localClippingEnabled),
          (ge = _e.init(this.clippingPlanes, De)),
          (y = Fe.get(I, w.length)),
          y.init(),
          w.push(y),
          se.enabled === !0 && se.isPresenting === !0)
        ) {
          const Se = A.xr.getDepthSensingMesh();
          Se !== null && Or(Se, G, -1 / 0, A.sortObjects);
        }
        Or(I, G, 0, A.sortObjects),
          y.finish(),
          A.sortObjects === !0 && y.sort(ne, te),
          (ue = se.enabled === !1 || se.isPresenting === !1 || se.hasDepthSensing() === !1),
          ue && nt.addToRenderList(y, I),
          this.info.render.frame++,
          ge === !0 && _e.beginShadows();
        const Q = _.state.shadowsArray;
        Be.render(Q, I, G), ge === !0 && _e.endShadows(), this.info.autoReset === !0 && this.info.reset();
        const $ = y.opaque,
          X = y.transmissive;
        if ((_.setupLights(), G.isArrayCamera)) {
          const Se = G.cameras;
          if (X.length > 0)
            for (let Ae = 0, Ve = Se.length; Ae < Ve; Ae++) {
              const He = Se[Ae];
              hr($, X, I, He);
            }
          ue && nt.render(I);
          for (let Ae = 0, Ve = Se.length; Ae < Ve; Ae++) {
            const He = Se[Ae];
            $a(y, I, He, He.viewport);
          }
        } else X.length > 0 && hr($, X, I, G), ue && nt.render(I), $a(y, I, G);
        F !== null && (U.updateMultisampleRenderTarget(F), U.updateRenderTargetMipmap(F)),
          I.isScene === !0 && I.onAfterRender(A, I, G),
          Nt.resetDefaultState(),
          (C = -1),
          (b = null),
          E.pop(),
          E.length > 0
            ? ((_ = E[E.length - 1]), ge === !0 && _e.setGlobalState(A.clippingPlanes, _.state.camera))
            : (_ = null),
          w.pop(),
          w.length > 0 ? (y = w[w.length - 1]) : (y = null);
      });
    function Or(I, G, Q, $) {
      if (I.visible === !1) return;
      if (I.layers.test(G.layers)) {
        if (I.isGroup) Q = I.renderOrder;
        else if (I.isLOD) I.autoUpdate === !0 && I.update(G);
        else if (I.isLight) _.pushLight(I), I.castShadow && _.pushShadow(I);
        else if (I.isSprite) {
          if (!I.frustumCulled || re.intersectsSprite(I)) {
            $ && Qe.setFromMatrixPosition(I.matrixWorld).applyMatrix4(je);
            const Ae = le.update(I),
              Ve = I.material;
            Ve.visible && y.push(I, Ae, Ve, Q, Qe.z, null);
          }
        } else if ((I.isMesh || I.isLine || I.isPoints) && (!I.frustumCulled || re.intersectsObject(I))) {
          const Ae = le.update(I),
            Ve = I.material;
          if (
            ($ &&
              (I.boundingSphere !== void 0
                ? (I.boundingSphere === null && I.computeBoundingSphere(), Qe.copy(I.boundingSphere.center))
                : (Ae.boundingSphere === null && Ae.computeBoundingSphere(), Qe.copy(Ae.boundingSphere.center)),
              Qe.applyMatrix4(I.matrixWorld).applyMatrix4(je)),
            Array.isArray(Ve))
          ) {
            const He = Ae.groups;
            for (let rt = 0, ut = He.length; rt < ut; rt++) {
              const Ge = He[rt],
                xt = Ve[Ge.materialIndex];
              xt && xt.visible && y.push(I, Ae, xt, Q, Qe.z, Ge);
            }
          } else Ve.visible && y.push(I, Ae, Ve, Q, Qe.z, null);
        }
      }
      const Se = I.children;
      for (let Ae = 0, Ve = Se.length; Ae < Ve; Ae++) Or(Se[Ae], G, Q, $);
    }
    function $a(I, G, Q, $) {
      const X = I.opaque,
        Se = I.transmissive,
        Ae = I.transparent;
      _.setupLightsView(Q),
        ge === !0 && _e.setGlobalState(A.clippingPlanes, Q),
        $ && Me.viewport(D.copy($)),
        X.length > 0 && Cs(X, G, Q),
        Se.length > 0 && Cs(Se, G, Q),
        Ae.length > 0 && Cs(Ae, G, Q),
        Me.buffers.depth.setTest(!0),
        Me.buffers.depth.setMask(!0),
        Me.buffers.color.setMask(!0),
        Me.setPolygonOffset(!1);
    }
    function hr(I, G, Q, $) {
      if ((Q.isScene === !0 ? Q.overrideMaterial : null) !== null) return;
      _.state.transmissionRenderTarget[$.id] === void 0 &&
        (_.state.transmissionRenderTarget[$.id] = new wi(1, 1, {
          generateMipmaps: !0,
          type: ve.has("EXT_color_buffer_half_float") || ve.has("EXT_color_buffer_float") ? Eo : Mi,
          minFilter: Oi,
          samples: 4,
          stencilBuffer: s,
          resolveDepthBuffer: !1,
          resolveStencilBuffer: !1,
          colorSpace: At.workingColorSpace,
        }));
      const Se = _.state.transmissionRenderTarget[$.id],
        Ae = $.viewport || D;
      Se.setSize(Ae.z, Ae.w);
      const Ve = A.getRenderTarget();
      A.setRenderTarget(Se),
        A.getClearColor(K),
        (ae = A.getClearAlpha()),
        ae < 1 && A.setClearColor(16777215, 0.5),
        A.clear(),
        ue && nt.render(Q);
      const He = A.toneMapping;
      A.toneMapping = zi;
      const rt = $.viewport;
      if (
        ($.viewport !== void 0 && ($.viewport = void 0),
        _.setupLightsView($),
        ge === !0 && _e.setGlobalState(A.clippingPlanes, $),
        Cs(I, Q, $),
        U.updateMultisampleRenderTarget(Se),
        U.updateRenderTargetMipmap(Se),
        ve.has("WEBGL_multisampled_render_to_texture") === !1)
      ) {
        let ut = !1;
        for (let Ge = 0, xt = G.length; Ge < xt; Ge++) {
          const Tt = G[Ge],
            et = Tt.object,
            mt = Tt.geometry,
            yt = Tt.material,
            Pe = Tt.group;
          if (yt.side === Si && et.layers.test($.layers)) {
            const Vt = yt.side;
            (yt.side = Nn),
              (yt.needsUpdate = !0),
              el(et, Q, $, mt, yt, Pe),
              (yt.side = Vt),
              (yt.needsUpdate = !0),
              (ut = !0);
          }
        }
        ut === !0 && (U.updateMultisampleRenderTarget(Se), U.updateRenderTargetMipmap(Se));
      }
      A.setRenderTarget(Ve), A.setClearColor(K, ae), rt !== void 0 && ($.viewport = rt), (A.toneMapping = He);
    }
    function Cs(I, G, Q) {
      const $ = G.isScene === !0 ? G.overrideMaterial : null;
      for (let X = 0, Se = I.length; X < Se; X++) {
        const Ae = I[X],
          Ve = Ae.object,
          He = Ae.geometry,
          rt = $ === null ? Ae.material : $,
          ut = Ae.group;
        Ve.layers.test(Q.layers) && el(Ve, G, Q, He, rt, ut);
      }
    }
    function el(I, G, Q, $, X, Se) {
      I.onBeforeRender(A, G, Q, $, X, Se),
        I.modelViewMatrix.multiplyMatrices(Q.matrixWorldInverse, I.matrixWorld),
        I.normalMatrix.getNormalMatrix(I.modelViewMatrix),
        X.onBeforeRender(A, G, Q, $, I, Se),
        X.transparent === !0 && X.side === Si && X.forceSinglePass === !1
          ? ((X.side = Nn),
            (X.needsUpdate = !0),
            A.renderBufferDirect(Q, G, $, X, I, Se),
            (X.side = ar),
            (X.needsUpdate = !0),
            A.renderBufferDirect(Q, G, $, X, I, Se),
            (X.side = Si))
          : A.renderBufferDirect(Q, G, $, X, I, Se),
        I.onAfterRender(A, G, Q, $, X, Se);
    }
    function Rs(I, G, Q) {
      G.isScene !== !0 && (G = at);
      const $ = Ie.get(I),
        X = _.state.lights,
        Se = _.state.shadowsArray,
        Ae = X.state.version,
        Ve = We.getParameters(I, X.state, Se, G, Q),
        He = We.getProgramCacheKey(Ve);
      let rt = $.programs;
      ($.environment = I.isMeshStandardMaterial ? G.environment : null),
        ($.fog = G.fog),
        ($.envMap = (I.isMeshStandardMaterial ? Z : R).get(I.envMap || $.environment)),
        ($.envMapRotation = $.environment !== null && I.envMap === null ? G.environmentRotation : I.envMapRotation),
        rt === void 0 && (I.addEventListener("dispose", lt), (rt = new Map()), ($.programs = rt));
      let ut = rt.get(He);
      if (ut !== void 0) {
        if ($.currentProgram === ut && $.lightsStateVersion === Ae) return nl(I, Ve), ut;
      } else
        (Ve.uniforms = We.getUniforms(I)),
          I.onBeforeCompile(Ve, A),
          (ut = We.acquireProgram(Ve, He)),
          rt.set(He, ut),
          ($.uniforms = Ve.uniforms);
      const Ge = $.uniforms;
      return (
        ((!I.isShaderMaterial && !I.isRawShaderMaterial) || I.clipping === !0) && (Ge.clippingPlanes = _e.uniform),
        nl(I, Ve),
        ($.needsLights = il(I)),
        ($.lightsStateVersion = Ae),
        $.needsLights &&
          ((Ge.ambientLightColor.value = X.state.ambient),
          (Ge.lightProbe.value = X.state.probe),
          (Ge.directionalLights.value = X.state.directional),
          (Ge.directionalLightShadows.value = X.state.directionalShadow),
          (Ge.spotLights.value = X.state.spot),
          (Ge.spotLightShadows.value = X.state.spotShadow),
          (Ge.rectAreaLights.value = X.state.rectArea),
          (Ge.ltc_1.value = X.state.rectAreaLTC1),
          (Ge.ltc_2.value = X.state.rectAreaLTC2),
          (Ge.pointLights.value = X.state.point),
          (Ge.pointLightShadows.value = X.state.pointShadow),
          (Ge.hemisphereLights.value = X.state.hemi),
          (Ge.directionalShadowMap.value = X.state.directionalShadowMap),
          (Ge.directionalShadowMatrix.value = X.state.directionalShadowMatrix),
          (Ge.spotShadowMap.value = X.state.spotShadowMap),
          (Ge.spotLightMatrix.value = X.state.spotLightMatrix),
          (Ge.spotLightMap.value = X.state.spotLightMap),
          (Ge.pointShadowMap.value = X.state.pointShadowMap),
          (Ge.pointShadowMatrix.value = X.state.pointShadowMatrix)),
        ($.currentProgram = ut),
        ($.uniformsList = null),
        ut
      );
    }
    function tl(I) {
      if (I.uniformsList === null) {
        const G = I.currentProgram.getUniforms();
        I.uniformsList = Xc.seqWithValue(G.seq, I.uniforms);
      }
      return I.uniformsList;
    }
    function nl(I, G) {
      const Q = Ie.get(I);
      (Q.outputColorSpace = G.outputColorSpace),
        (Q.batching = G.batching),
        (Q.batchingColor = G.batchingColor),
        (Q.instancing = G.instancing),
        (Q.instancingColor = G.instancingColor),
        (Q.instancingMorph = G.instancingMorph),
        (Q.skinning = G.skinning),
        (Q.morphTargets = G.morphTargets),
        (Q.morphNormals = G.morphNormals),
        (Q.morphColors = G.morphColors),
        (Q.morphTargetsCount = G.morphTargetsCount),
        (Q.numClippingPlanes = G.numClippingPlanes),
        (Q.numIntersection = G.numClipIntersection),
        (Q.vertexAlphas = G.vertexAlphas),
        (Q.vertexTangents = G.vertexTangents),
        (Q.toneMapping = G.toneMapping);
    }
    function hh(I, G, Q, $, X) {
      G.isScene !== !0 && (G = at), U.resetTextureUnits();
      const Se = G.fog,
        Ae = $.isMeshStandardMaterial ? G.environment : null,
        Ve = F === null ? A.outputColorSpace : F.isXRRenderTarget === !0 ? F.texture.colorSpace : ws,
        He = ($.isMeshStandardMaterial ? Z : R).get($.envMap || Ae),
        rt = $.vertexColors === !0 && !!Q.attributes.color && Q.attributes.color.itemSize === 4,
        ut = !!Q.attributes.tangent && (!!$.normalMap || $.anisotropy > 0),
        Ge = !!Q.morphAttributes.position,
        xt = !!Q.morphAttributes.normal,
        Tt = !!Q.morphAttributes.color;
      let et = zi;
      $.toneMapped && (F === null || F.isXRRenderTarget === !0) && (et = A.toneMapping);
      const mt = Q.morphAttributes.position || Q.morphAttributes.normal || Q.morphAttributes.color,
        yt = mt !== void 0 ? mt.length : 0,
        Pe = Ie.get($),
        Vt = _.state.lights;
      if (ge === !0 && (De === !0 || I !== b)) {
        const Ht = I === b && $.id === C;
        _e.setState($, I, Ht);
      }
      let wt = !1;
      $.version === Pe.__version
        ? ((Pe.needsLights && Pe.lightsStateVersion !== Vt.state.version) ||
            Pe.outputColorSpace !== Ve ||
            (X.isBatchedMesh && Pe.batching === !1) ||
            (!X.isBatchedMesh && Pe.batching === !0) ||
            (X.isBatchedMesh && Pe.batchingColor === !0 && X.colorTexture === null) ||
            (X.isBatchedMesh && Pe.batchingColor === !1 && X.colorTexture !== null) ||
            (X.isInstancedMesh && Pe.instancing === !1) ||
            (!X.isInstancedMesh && Pe.instancing === !0) ||
            (X.isSkinnedMesh && Pe.skinning === !1) ||
            (!X.isSkinnedMesh && Pe.skinning === !0) ||
            (X.isInstancedMesh && Pe.instancingColor === !0 && X.instanceColor === null) ||
            (X.isInstancedMesh && Pe.instancingColor === !1 && X.instanceColor !== null) ||
            (X.isInstancedMesh && Pe.instancingMorph === !0 && X.morphTexture === null) ||
            (X.isInstancedMesh && Pe.instancingMorph === !1 && X.morphTexture !== null) ||
            Pe.envMap !== He ||
            ($.fog === !0 && Pe.fog !== Se) ||
            (Pe.numClippingPlanes !== void 0 &&
              (Pe.numClippingPlanes !== _e.numPlanes || Pe.numIntersection !== _e.numIntersection)) ||
            Pe.vertexAlphas !== rt ||
            Pe.vertexTangents !== ut ||
            Pe.morphTargets !== Ge ||
            Pe.morphNormals !== xt ||
            Pe.morphColors !== Tt ||
            Pe.toneMapping !== et ||
            Pe.morphTargetsCount !== yt) &&
          (wt = !0)
        : ((wt = !0), (Pe.__version = $.version));
      let un = Pe.currentProgram;
      wt === !0 && (un = Rs($, G, X));
      let jt = !1,
        hn = !1,
        fr = !1;
      const Ft = un.getUniforms(),
        Rn = Pe.uniforms;
      if (
        (Me.useProgram(un.program) && ((jt = !0), (hn = !0), (fr = !0)),
        $.id !== C && ((C = $.id), (hn = !0)),
        jt || b !== I)
      ) {
        Me.buffers.depth.getReversed()
          ? (xe.copy(I.projectionMatrix), cS(xe), uS(xe), Ft.setValue(z, "projectionMatrix", xe))
          : Ft.setValue(z, "projectionMatrix", I.projectionMatrix),
          Ft.setValue(z, "viewMatrix", I.matrixWorldInverse);
        const Ci = Ft.map.cameraPosition;
        Ci !== void 0 && Ci.setValue(z, it.setFromMatrixPosition(I.matrixWorld)),
          Oe.logarithmicDepthBuffer && Ft.setValue(z, "logDepthBufFC", 2 / (Math.log(I.far + 1) / Math.LN2)),
          ($.isMeshPhongMaterial ||
            $.isMeshToonMaterial ||
            $.isMeshLambertMaterial ||
            $.isMeshBasicMaterial ||
            $.isMeshStandardMaterial ||
            $.isShaderMaterial) &&
            Ft.setValue(z, "isOrthographic", I.isOrthographicCamera === !0),
          b !== I && ((b = I), (hn = !0), (fr = !0));
      }
      if (X.isSkinnedMesh) {
        Ft.setOptional(z, X, "bindMatrix"), Ft.setOptional(z, X, "bindMatrixInverse");
        const Ht = X.skeleton;
        Ht && (Ht.boneTexture === null && Ht.computeBoneTexture(), Ft.setValue(z, "boneTexture", Ht.boneTexture, U));
      }
      X.isBatchedMesh &&
        (Ft.setOptional(z, X, "batchingTexture"),
        Ft.setValue(z, "batchingTexture", X._matricesTexture, U),
        Ft.setOptional(z, X, "batchingIdTexture"),
        Ft.setValue(z, "batchingIdTexture", X._indirectTexture, U),
        Ft.setOptional(z, X, "batchingColorTexture"),
        X._colorsTexture !== null && Ft.setValue(z, "batchingColorTexture", X._colorsTexture, U));
      const dr = Q.morphAttributes;
      if (
        ((dr.position !== void 0 || dr.normal !== void 0 || dr.color !== void 0) && ot.update(X, Q, un),
        (hn || Pe.receiveShadow !== X.receiveShadow) &&
          ((Pe.receiveShadow = X.receiveShadow), Ft.setValue(z, "receiveShadow", X.receiveShadow)),
        $.isMeshGouraudMaterial &&
          $.envMap !== null &&
          ((Rn.envMap.value = He),
          (Rn.flipEnvMap.value = He.isCubeTexture && He.isRenderTargetTexture === !1 ? -1 : 1)),
        $.isMeshStandardMaterial &&
          $.envMap === null &&
          G.environment !== null &&
          (Rn.envMapIntensity.value = G.environmentIntensity),
        hn &&
          (Ft.setValue(z, "toneMappingExposure", A.toneMappingExposure),
          Pe.needsLights && fh(Rn, fr),
          Se && $.fog === !0 && Ee.refreshFogUniforms(Rn, Se),
          Ee.refreshMaterialUniforms(Rn, $, k, me, _.state.transmissionRenderTarget[I.id]),
          Xc.upload(z, tl(Pe), Rn, U)),
        $.isShaderMaterial && $.uniformsNeedUpdate === !0 && (Xc.upload(z, tl(Pe), Rn, U), ($.uniformsNeedUpdate = !1)),
        $.isSpriteMaterial && Ft.setValue(z, "center", X.center),
        Ft.setValue(z, "modelViewMatrix", X.modelViewMatrix),
        Ft.setValue(z, "normalMatrix", X.normalMatrix),
        Ft.setValue(z, "modelMatrix", X.matrixWorld),
        $.isShaderMaterial || $.isRawShaderMaterial)
      ) {
        const Ht = $.uniformsGroups;
        for (let Ci = 0, Ri = Ht.length; Ci < Ri; Ci++) {
          const rl = Ht[Ci];
          H.update(rl, un), H.bind(rl, un);
        }
      }
      return un;
    }
    function fh(I, G) {
      (I.ambientLightColor.needsUpdate = G),
        (I.lightProbe.needsUpdate = G),
        (I.directionalLights.needsUpdate = G),
        (I.directionalLightShadows.needsUpdate = G),
        (I.pointLights.needsUpdate = G),
        (I.pointLightShadows.needsUpdate = G),
        (I.spotLights.needsUpdate = G),
        (I.spotLightShadows.needsUpdate = G),
        (I.rectAreaLights.needsUpdate = G),
        (I.hemisphereLights.needsUpdate = G);
    }
    function il(I) {
      return (
        I.isMeshLambertMaterial ||
        I.isMeshToonMaterial ||
        I.isMeshPhongMaterial ||
        I.isMeshStandardMaterial ||
        I.isShadowMaterial ||
        (I.isShaderMaterial && I.lights === !0)
      );
    }
    (this.getActiveCubeFace = function () {
      return P;
    }),
      (this.getActiveMipmapLevel = function () {
        return L;
      }),
      (this.getRenderTarget = function () {
        return F;
      }),
      (this.setRenderTargetTextures = function (I, G, Q) {
        (Ie.get(I.texture).__webglTexture = G), (Ie.get(I.depthTexture).__webglTexture = Q);
        const $ = Ie.get(I);
        ($.__hasExternalTextures = !0),
          ($.__autoAllocateDepthBuffer = Q === void 0),
          $.__autoAllocateDepthBuffer ||
            (ve.has("WEBGL_multisampled_render_to_texture") === !0 &&
              (console.warn(
                "THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"
              ),
              ($.__useRenderToTexture = !1)));
      }),
      (this.setRenderTargetFramebuffer = function (I, G) {
        const Q = Ie.get(I);
        (Q.__webglFramebuffer = G), (Q.__useDefaultFramebuffer = G === void 0);
      }),
      (this.setRenderTarget = function (I, G = 0, Q = 0) {
        (F = I), (P = G), (L = Q);
        let $ = !0,
          X = null,
          Se = !1,
          Ae = !1;
        if (I) {
          const He = Ie.get(I);
          if (He.__useDefaultFramebuffer !== void 0) Me.bindFramebuffer(z.FRAMEBUFFER, null), ($ = !1);
          else if (He.__webglFramebuffer === void 0) U.setupRenderTarget(I);
          else if (He.__hasExternalTextures)
            U.rebindTextures(I, Ie.get(I.texture).__webglTexture, Ie.get(I.depthTexture).__webglTexture);
          else if (I.depthBuffer) {
            const Ge = I.depthTexture;
            if (He.__boundDepthTexture !== Ge) {
              if (Ge !== null && Ie.has(Ge) && (I.width !== Ge.image.width || I.height !== Ge.image.height))
                throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
              U.setupDepthRenderbuffer(I);
            }
          }
          const rt = I.texture;
          (rt.isData3DTexture || rt.isDataArrayTexture || rt.isCompressedArrayTexture) && (Ae = !0);
          const ut = Ie.get(I).__webglFramebuffer;
          I.isWebGLCubeRenderTarget
            ? (Array.isArray(ut[G]) ? (X = ut[G][Q]) : (X = ut[G]), (Se = !0))
            : I.samples > 0 && U.useMultisampledRTT(I) === !1
              ? (X = Ie.get(I).__webglMultisampledFramebuffer)
              : Array.isArray(ut)
                ? (X = ut[Q])
                : (X = ut),
            D.copy(I.viewport),
            Y.copy(I.scissor),
            (q = I.scissorTest);
        } else D.copy(ce).multiplyScalar(k).floor(), Y.copy(Ce).multiplyScalar(k).floor(), (q = Ye);
        if (
          (Me.bindFramebuffer(z.FRAMEBUFFER, X) && $ && Me.drawBuffers(I, X),
          Me.viewport(D),
          Me.scissor(Y),
          Me.setScissorTest(q),
          Se)
        ) {
          const He = Ie.get(I.texture);
          z.framebufferTexture2D(
            z.FRAMEBUFFER,
            z.COLOR_ATTACHMENT0,
            z.TEXTURE_CUBE_MAP_POSITIVE_X + G,
            He.__webglTexture,
            Q
          );
        } else if (Ae) {
          const He = Ie.get(I.texture),
            rt = G || 0;
          z.framebufferTextureLayer(z.FRAMEBUFFER, z.COLOR_ATTACHMENT0, He.__webglTexture, Q || 0, rt);
        }
        C = -1;
      }),
      (this.readRenderTargetPixels = function (I, G, Q, $, X, Se, Ae) {
        if (!(I && I.isWebGLRenderTarget)) {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
          return;
        }
        let Ve = Ie.get(I).__webglFramebuffer;
        if ((I.isWebGLCubeRenderTarget && Ae !== void 0 && (Ve = Ve[Ae]), Ve)) {
          Me.bindFramebuffer(z.FRAMEBUFFER, Ve);
          try {
            const He = I.texture,
              rt = He.format,
              ut = He.type;
            if (!Oe.textureFormatReadable(rt)) {
              console.error(
                "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."
              );
              return;
            }
            if (!Oe.textureTypeReadable(ut)) {
              console.error(
                "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type."
              );
              return;
            }
            G >= 0 &&
              G <= I.width - $ &&
              Q >= 0 &&
              Q <= I.height - X &&
              z.readPixels(G, Q, $, X, ct.convert(rt), ct.convert(ut), Se);
          } finally {
            const He = F !== null ? Ie.get(F).__webglFramebuffer : null;
            Me.bindFramebuffer(z.FRAMEBUFFER, He);
          }
        }
      }),
      (this.readRenderTargetPixelsAsync = async function (I, G, Q, $, X, Se, Ae) {
        if (!(I && I.isWebGLRenderTarget))
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        let Ve = Ie.get(I).__webglFramebuffer;
        if ((I.isWebGLCubeRenderTarget && Ae !== void 0 && (Ve = Ve[Ae]), Ve)) {
          const He = I.texture,
            rt = He.format,
            ut = He.type;
          if (!Oe.textureFormatReadable(rt))
            throw new Error(
              "THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format."
            );
          if (!Oe.textureTypeReadable(ut))
            throw new Error(
              "THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type."
            );
          if (G >= 0 && G <= I.width - $ && Q >= 0 && Q <= I.height - X) {
            Me.bindFramebuffer(z.FRAMEBUFFER, Ve);
            const Ge = z.createBuffer();
            z.bindBuffer(z.PIXEL_PACK_BUFFER, Ge),
              z.bufferData(z.PIXEL_PACK_BUFFER, Se.byteLength, z.STREAM_READ),
              z.readPixels(G, Q, $, X, ct.convert(rt), ct.convert(ut), 0);
            const xt = F !== null ? Ie.get(F).__webglFramebuffer : null;
            Me.bindFramebuffer(z.FRAMEBUFFER, xt);
            const Tt = z.fenceSync(z.SYNC_GPU_COMMANDS_COMPLETE, 0);
            return (
              z.flush(),
              await lS(z, Tt, 4),
              z.bindBuffer(z.PIXEL_PACK_BUFFER, Ge),
              z.getBufferSubData(z.PIXEL_PACK_BUFFER, 0, Se),
              z.deleteBuffer(Ge),
              z.deleteSync(Tt),
              Se
            );
          } else
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
        }
      }),
      (this.copyFramebufferToTexture = function (I, G = null, Q = 0) {
        I.isTexture !== !0 &&
          (la("WebGLRenderer: copyFramebufferToTexture function signature has changed."),
          (G = arguments[0] || null),
          (I = arguments[1]));
        const $ = Math.pow(2, -Q),
          X = Math.floor(I.image.width * $),
          Se = Math.floor(I.image.height * $),
          Ae = G !== null ? G.x : 0,
          Ve = G !== null ? G.y : 0;
        U.setTexture2D(I, 0), z.copyTexSubImage2D(z.TEXTURE_2D, Q, 0, 0, Ae, Ve, X, Se), Me.unbindTexture();
      }),
      (this.copyTextureToTexture = function (I, G, Q = null, $ = null, X = 0) {
        I.isTexture !== !0 &&
          (la("WebGLRenderer: copyTextureToTexture function signature has changed."),
          ($ = arguments[0] || null),
          (I = arguments[1]),
          (G = arguments[2]),
          (X = arguments[3] || 0),
          (Q = null));
        let Se, Ae, Ve, He, rt, ut, Ge, xt, Tt;
        const et = I.isCompressedTexture ? I.mipmaps[X] : I.image;
        Q !== null
          ? ((Se = Q.max.x - Q.min.x),
            (Ae = Q.max.y - Q.min.y),
            (Ve = Q.isBox3 ? Q.max.z - Q.min.z : 1),
            (He = Q.min.x),
            (rt = Q.min.y),
            (ut = Q.isBox3 ? Q.min.z : 0))
          : ((Se = et.width), (Ae = et.height), (Ve = et.depth || 1), (He = 0), (rt = 0), (ut = 0)),
          $ !== null ? ((Ge = $.x), (xt = $.y), (Tt = $.z)) : ((Ge = 0), (xt = 0), (Tt = 0));
        const mt = ct.convert(G.format),
          yt = ct.convert(G.type);
        let Pe;
        G.isData3DTexture
          ? (U.setTexture3D(G, 0), (Pe = z.TEXTURE_3D))
          : G.isDataArrayTexture || G.isCompressedArrayTexture
            ? (U.setTexture2DArray(G, 0), (Pe = z.TEXTURE_2D_ARRAY))
            : (U.setTexture2D(G, 0), (Pe = z.TEXTURE_2D)),
          z.pixelStorei(z.UNPACK_FLIP_Y_WEBGL, G.flipY),
          z.pixelStorei(z.UNPACK_PREMULTIPLY_ALPHA_WEBGL, G.premultiplyAlpha),
          z.pixelStorei(z.UNPACK_ALIGNMENT, G.unpackAlignment);
        const Vt = z.getParameter(z.UNPACK_ROW_LENGTH),
          wt = z.getParameter(z.UNPACK_IMAGE_HEIGHT),
          un = z.getParameter(z.UNPACK_SKIP_PIXELS),
          jt = z.getParameter(z.UNPACK_SKIP_ROWS),
          hn = z.getParameter(z.UNPACK_SKIP_IMAGES);
        z.pixelStorei(z.UNPACK_ROW_LENGTH, et.width),
          z.pixelStorei(z.UNPACK_IMAGE_HEIGHT, et.height),
          z.pixelStorei(z.UNPACK_SKIP_PIXELS, He),
          z.pixelStorei(z.UNPACK_SKIP_ROWS, rt),
          z.pixelStorei(z.UNPACK_SKIP_IMAGES, ut);
        const fr = I.isDataArrayTexture || I.isData3DTexture,
          Ft = G.isDataArrayTexture || G.isData3DTexture;
        if (I.isRenderTargetTexture || I.isDepthTexture) {
          const Rn = Ie.get(I),
            dr = Ie.get(G),
            Ht = Ie.get(Rn.__renderTarget),
            Ci = Ie.get(dr.__renderTarget);
          Me.bindFramebuffer(z.READ_FRAMEBUFFER, Ht.__webglFramebuffer),
            Me.bindFramebuffer(z.DRAW_FRAMEBUFFER, Ci.__webglFramebuffer);
          for (let Ri = 0; Ri < Ve; Ri++)
            fr &&
              z.framebufferTextureLayer(z.READ_FRAMEBUFFER, z.COLOR_ATTACHMENT0, Ie.get(I).__webglTexture, X, ut + Ri),
              I.isDepthTexture
                ? (Ft &&
                    z.framebufferTextureLayer(
                      z.DRAW_FRAMEBUFFER,
                      z.COLOR_ATTACHMENT0,
                      Ie.get(G).__webglTexture,
                      X,
                      Tt + Ri
                    ),
                  z.blitFramebuffer(He, rt, Se, Ae, Ge, xt, Se, Ae, z.DEPTH_BUFFER_BIT, z.NEAREST))
                : Ft
                  ? z.copyTexSubImage3D(Pe, X, Ge, xt, Tt + Ri, He, rt, Se, Ae)
                  : z.copyTexSubImage2D(Pe, X, Ge, xt, Tt + Ri, He, rt, Se, Ae);
          Me.bindFramebuffer(z.READ_FRAMEBUFFER, null), Me.bindFramebuffer(z.DRAW_FRAMEBUFFER, null);
        } else
          Ft
            ? I.isDataTexture || I.isData3DTexture
              ? z.texSubImage3D(Pe, X, Ge, xt, Tt, Se, Ae, Ve, mt, yt, et.data)
              : G.isCompressedArrayTexture
                ? z.compressedTexSubImage3D(Pe, X, Ge, xt, Tt, Se, Ae, Ve, mt, et.data)
                : z.texSubImage3D(Pe, X, Ge, xt, Tt, Se, Ae, Ve, mt, yt, et)
            : I.isDataTexture
              ? z.texSubImage2D(z.TEXTURE_2D, X, Ge, xt, Se, Ae, mt, yt, et.data)
              : I.isCompressedTexture
                ? z.compressedTexSubImage2D(z.TEXTURE_2D, X, Ge, xt, et.width, et.height, mt, et.data)
                : z.texSubImage2D(z.TEXTURE_2D, X, Ge, xt, Se, Ae, mt, yt, et);
        z.pixelStorei(z.UNPACK_ROW_LENGTH, Vt),
          z.pixelStorei(z.UNPACK_IMAGE_HEIGHT, wt),
          z.pixelStorei(z.UNPACK_SKIP_PIXELS, un),
          z.pixelStorei(z.UNPACK_SKIP_ROWS, jt),
          z.pixelStorei(z.UNPACK_SKIP_IMAGES, hn),
          X === 0 && G.generateMipmaps && z.generateMipmap(Pe),
          Me.unbindTexture();
      }),
      (this.copyTextureToTexture3D = function (I, G, Q = null, $ = null, X = 0) {
        return (
          I.isTexture !== !0 &&
            (la("WebGLRenderer: copyTextureToTexture3D function signature has changed."),
            (Q = arguments[0] || null),
            ($ = arguments[1] || null),
            (I = arguments[2]),
            (G = arguments[3]),
            (X = arguments[4] || 0)),
          la('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),
          this.copyTextureToTexture(I, G, Q, $, X)
        );
      }),
      (this.initRenderTarget = function (I) {
        Ie.get(I).__webglFramebuffer === void 0 && U.setupRenderTarget(I);
      }),
      (this.initTexture = function (I) {
        I.isCubeTexture
          ? U.setTextureCube(I, 0)
          : I.isData3DTexture
            ? U.setTexture3D(I, 0)
            : I.isDataArrayTexture || I.isCompressedArrayTexture
              ? U.setTexture2DArray(I, 0)
              : U.setTexture2D(I, 0),
          Me.unbindTexture();
      }),
      (this.resetState = function () {
        (P = 0), (L = 0), (F = null), Me.reset(), Nt.reset();
      }),
      typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  get coordinateSystem() {
    return Bi;
  }
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(e) {
    this._outputColorSpace = e;
    const t = this.getContext();
    (t.drawingBufferColorspace = At._getDrawingBufferColorSpace(e)), (t.unpackColorSpace = At._getUnpackColorSpace());
  }
}
class Xu {
  constructor(e, t = 25e-5) {
    (this.isFogExp2 = !0), (this.name = ""), (this.color = new Ne(e)), (this.density = t);
  }
  clone() {
    return new Xu(this.color, this.density);
  }
  toJSON() {
    return { type: "FogExp2", name: this.name, color: this.color.getHex(), density: this.density };
  }
}
class Yu {
  constructor(e, t = 1, n = 1e3) {
    (this.isFog = !0), (this.name = ""), (this.color = new Ne(e)), (this.near = t), (this.far = n);
  }
  clone() {
    return new Yu(this.color, this.near, this.far);
  }
  toJSON() {
    return { type: "Fog", name: this.name, color: this.color.getHex(), near: this.near, far: this.far };
  }
}
class ep extends Rt {
  constructor() {
    super(),
      (this.isScene = !0),
      (this.type = "Scene"),
      (this.background = null),
      (this.environment = null),
      (this.fog = null),
      (this.backgroundBlurriness = 0),
      (this.backgroundIntensity = 1),
      (this.backgroundRotation = new ni()),
      (this.environmentIntensity = 1),
      (this.environmentRotation = new ni()),
      (this.overrideMaterial = null),
      typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, t) {
    return (
      super.copy(e, t),
      e.background !== null && (this.background = e.background.clone()),
      e.environment !== null && (this.environment = e.environment.clone()),
      e.fog !== null && (this.fog = e.fog.clone()),
      (this.backgroundBlurriness = e.backgroundBlurriness),
      (this.backgroundIntensity = e.backgroundIntensity),
      this.backgroundRotation.copy(e.backgroundRotation),
      (this.environmentIntensity = e.environmentIntensity),
      this.environmentRotation.copy(e.environmentRotation),
      e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()),
      (this.matrixAutoUpdate = e.matrixAutoUpdate),
      this
    );
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return (
      this.fog !== null && (t.object.fog = this.fog.toJSON()),
      this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness),
      this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity),
      (t.object.backgroundRotation = this.backgroundRotation.toArray()),
      this.environmentIntensity !== 1 && (t.object.environmentIntensity = this.environmentIntensity),
      (t.object.environmentRotation = this.environmentRotation.toArray()),
      t
    );
  }
}
class qu {
  constructor(e, t) {
    (this.isInterleavedBuffer = !0),
      (this.array = e),
      (this.stride = t),
      (this.count = e !== void 0 ? e.length / t : 0),
      (this.usage = ba),
      (this.updateRanges = []),
      (this.version = 0),
      (this.uuid = ti());
  }
  onUploadCallback() {}
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return (this.usage = e), this;
  }
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(e) {
    return (
      (this.array = new e.array.constructor(e.array)),
      (this.count = e.count),
      (this.stride = e.stride),
      (this.usage = e.usage),
      this
    );
  }
  copyAt(e, t, n) {
    (e *= this.stride), (n *= t.stride);
    for (let i = 0, s = this.stride; i < s; i++) this.array[e + i] = t.array[n + i];
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  clone(e) {
    e.arrayBuffers === void 0 && (e.arrayBuffers = {}),
      this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = ti()),
      e.arrayBuffers[this.array.buffer._uuid] === void 0 &&
        (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),
      n = new this.constructor(t, this.stride);
    return n.setUsage(this.usage), n;
  }
  onUpload(e) {
    return (this.onUploadCallback = e), this;
  }
  toJSON(e) {
    return (
      e.arrayBuffers === void 0 && (e.arrayBuffers = {}),
      this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = ti()),
      e.arrayBuffers[this.array.buffer._uuid] === void 0 &&
        (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))),
      { uuid: this.uuid, buffer: this.array.buffer._uuid, type: this.array.constructor.name, stride: this.stride }
    );
  }
}
const Ln = new N();
class Ss {
  constructor(e, t, n, i = !1) {
    (this.isInterleavedBufferAttribute = !0),
      (this.name = ""),
      (this.data = e),
      (this.itemSize = t),
      (this.offset = n),
      (this.normalized = i);
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.data.count; t < n; t++)
      Ln.fromBufferAttribute(this, t), Ln.applyMatrix4(e), this.setXYZ(t, Ln.x, Ln.y, Ln.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Ln.fromBufferAttribute(this, t), Ln.applyNormalMatrix(e), this.setXYZ(t, Ln.x, Ln.y, Ln.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Ln.fromBufferAttribute(this, t), Ln.transformDirection(e), this.setXYZ(t, Ln.x, Ln.y, Ln.z);
    return this;
  }
  getComponent(e, t) {
    let n = this.array[e * this.data.stride + this.offset + t];
    return this.normalized && (n = Un(n, this.array)), n;
  }
  setComponent(e, t, n) {
    return (
      this.normalized && (n = pt(n, this.array)), (this.data.array[e * this.data.stride + this.offset + t] = n), this
    );
  }
  setX(e, t) {
    return this.normalized && (t = pt(t, this.array)), (this.data.array[e * this.data.stride + this.offset] = t), this;
  }
  setY(e, t) {
    return (
      this.normalized && (t = pt(t, this.array)), (this.data.array[e * this.data.stride + this.offset + 1] = t), this
    );
  }
  setZ(e, t) {
    return (
      this.normalized && (t = pt(t, this.array)), (this.data.array[e * this.data.stride + this.offset + 2] = t), this
    );
  }
  setW(e, t) {
    return (
      this.normalized && (t = pt(t, this.array)), (this.data.array[e * this.data.stride + this.offset + 3] = t), this
    );
  }
  getX(e) {
    let t = this.data.array[e * this.data.stride + this.offset];
    return this.normalized && (t = Un(t, this.array)), t;
  }
  getY(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 1];
    return this.normalized && (t = Un(t, this.array)), t;
  }
  getZ(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 2];
    return this.normalized && (t = Un(t, this.array)), t;
  }
  getW(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 3];
    return this.normalized && (t = Un(t, this.array)), t;
  }
  setXY(e, t, n) {
    return (
      (e = e * this.data.stride + this.offset),
      this.normalized && ((t = pt(t, this.array)), (n = pt(n, this.array))),
      (this.data.array[e + 0] = t),
      (this.data.array[e + 1] = n),
      this
    );
  }
  setXYZ(e, t, n, i) {
    return (
      (e = e * this.data.stride + this.offset),
      this.normalized && ((t = pt(t, this.array)), (n = pt(n, this.array)), (i = pt(i, this.array))),
      (this.data.array[e + 0] = t),
      (this.data.array[e + 1] = n),
      (this.data.array[e + 2] = i),
      this
    );
  }
  setXYZW(e, t, n, i, s) {
    return (
      (e = e * this.data.stride + this.offset),
      this.normalized &&
        ((t = pt(t, this.array)), (n = pt(n, this.array)), (i = pt(i, this.array)), (s = pt(s, this.array))),
      (this.data.array[e + 0] = t),
      (this.data.array[e + 1] = n),
      (this.data.array[e + 2] = i),
      (this.data.array[e + 3] = s),
      this
    );
  }
  clone(e) {
    if (e === void 0) {
      console.log(
        "THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data."
      );
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const i = n * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++) t.push(this.data.array[i + s]);
      }
      return new Ot(new this.array.constructor(t), this.itemSize, this.normalized);
    } else
      return (
        e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}),
        e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)),
        new Ss(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized)
      );
  }
  toJSON(e) {
    if (e === void 0) {
      console.log(
        "THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data."
      );
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const i = n * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++) t.push(this.data.array[i + s]);
      }
      return { itemSize: this.itemSize, type: this.array.constructor.name, array: t, normalized: this.normalized };
    } else
      return (
        e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}),
        e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)),
        {
          isInterleavedBufferAttribute: !0,
          itemSize: this.itemSize,
          data: this.data.uuid,
          offset: this.offset,
          normalized: this.normalized,
        }
      );
  }
}
class tp extends Cn {
  static get type() {
    return "SpriteMaterial";
  }
  constructor(e) {
    super(),
      (this.isSpriteMaterial = !0),
      (this.color = new Ne(16777215)),
      (this.map = null),
      (this.alphaMap = null),
      (this.rotation = 0),
      (this.sizeAttenuation = !0),
      (this.transparent = !0),
      (this.fog = !0),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      this.color.copy(e.color),
      (this.map = e.map),
      (this.alphaMap = e.alphaMap),
      (this.rotation = e.rotation),
      (this.sizeAttenuation = e.sizeAttenuation),
      (this.fog = e.fog),
      this
    );
  }
}
let to;
const Qo = new N(),
  no = new N(),
  io = new N(),
  ro = new fe(),
  $o = new fe(),
  i_ = new st(),
  vc = new N(),
  ea = new N(),
  _c = new N(),
  Yg = new fe(),
  Xf = new fe(),
  qg = new fe();
class r_ extends Rt {
  constructor(e = new tp()) {
    if ((super(), (this.isSprite = !0), (this.type = "Sprite"), to === void 0)) {
      to = new vt();
      const t = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]),
        n = new qu(t, 5);
      to.setIndex([0, 1, 2, 0, 2, 3]),
        to.setAttribute("position", new Ss(n, 3, 0, !1)),
        to.setAttribute("uv", new Ss(n, 2, 3, !1));
    }
    (this.geometry = to), (this.material = e), (this.center = new fe(0.5, 0.5));
  }
  raycast(e, t) {
    e.camera === null &&
      console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),
      no.setFromMatrixScale(this.matrixWorld),
      i_.copy(e.camera.matrixWorld),
      this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld),
      io.setFromMatrixPosition(this.modelViewMatrix),
      e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && no.multiplyScalar(-io.z);
    const n = this.material.rotation;
    let i, s;
    n !== 0 && ((s = Math.cos(n)), (i = Math.sin(n)));
    const l = this.center;
    xc(vc.set(-0.5, -0.5, 0), io, l, no, i, s),
      xc(ea.set(0.5, -0.5, 0), io, l, no, i, s),
      xc(_c.set(0.5, 0.5, 0), io, l, no, i, s),
      Yg.set(0, 0),
      Xf.set(1, 0),
      qg.set(1, 1);
    let c = e.ray.intersectTriangle(vc, ea, _c, !1, Qo);
    if (
      c === null &&
      (xc(ea.set(-0.5, 0.5, 0), io, l, no, i, s),
      Xf.set(0, 1),
      (c = e.ray.intersectTriangle(vc, _c, ea, !1, Qo)),
      c === null)
    )
      return;
    const u = e.ray.origin.distanceTo(Qo);
    u < e.near ||
      u > e.far ||
      t.push({
        distance: u,
        point: Qo.clone(),
        uv: Xn.getInterpolation(Qo, vc, ea, _c, Yg, Xf, qg, new fe()),
        face: null,
        object: this,
      });
  }
  copy(e, t) {
    return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), (this.material = e.material), this;
  }
}
function xc(r, e, t, n, i, s) {
  ro.subVectors(r, t).addScalar(0.5).multiply(n),
    i !== void 0 ? (($o.x = s * ro.x - i * ro.y), ($o.y = i * ro.x + s * ro.y)) : $o.copy(ro),
    r.copy(e),
    (r.x += $o.x),
    (r.y += $o.y),
    r.applyMatrix4(i_);
}
const yc = new N(),
  Zg = new N();
class s_ extends Rt {
  constructor() {
    super(),
      (this._currentLevel = 0),
      (this.type = "LOD"),
      Object.defineProperties(this, { levels: { enumerable: !0, value: [] }, isLOD: { value: !0 } }),
      (this.autoUpdate = !0);
  }
  copy(e) {
    super.copy(e, !1);
    const t = e.levels;
    for (let n = 0, i = t.length; n < i; n++) {
      const s = t[n];
      this.addLevel(s.object.clone(), s.distance, s.hysteresis);
    }
    return (this.autoUpdate = e.autoUpdate), this;
  }
  addLevel(e, t = 0, n = 0) {
    t = Math.abs(t);
    const i = this.levels;
    let s;
    for (s = 0; s < i.length && !(t < i[s].distance); s++);
    return i.splice(s, 0, { distance: t, hysteresis: n, object: e }), this.add(e), this;
  }
  removeLevel(e) {
    const t = this.levels;
    for (let n = 0; n < t.length; n++)
      if (t[n].distance === e) {
        const i = t.splice(n, 1);
        return this.remove(i[0].object), !0;
      }
    return !1;
  }
  getCurrentLevel() {
    return this._currentLevel;
  }
  getObjectForDistance(e) {
    const t = this.levels;
    if (t.length > 0) {
      let n, i;
      for (n = 1, i = t.length; n < i; n++) {
        let s = t[n].distance;
        if ((t[n].object.visible && (s -= s * t[n].hysteresis), e < s)) break;
      }
      return t[n - 1].object;
    }
    return null;
  }
  raycast(e, t) {
    if (this.levels.length > 0) {
      yc.setFromMatrixPosition(this.matrixWorld);
      const i = e.ray.origin.distanceTo(yc);
      this.getObjectForDistance(i).raycast(e, t);
    }
  }
  update(e) {
    const t = this.levels;
    if (t.length > 1) {
      yc.setFromMatrixPosition(e.matrixWorld), Zg.setFromMatrixPosition(this.matrixWorld);
      const n = yc.distanceTo(Zg) / e.zoom;
      t[0].object.visible = !0;
      let i, s;
      for (i = 1, s = t.length; i < s; i++) {
        let l = t[i].distance;
        if ((t[i].object.visible && (l -= l * t[i].hysteresis), n >= l))
          (t[i - 1].object.visible = !1), (t[i].object.visible = !0);
        else break;
      }
      for (this._currentLevel = i - 1; i < s; i++) t[i].object.visible = !1;
    }
  }
  toJSON(e) {
    const t = super.toJSON(e);
    this.autoUpdate === !1 && (t.object.autoUpdate = !1), (t.object.levels = []);
    const n = this.levels;
    for (let i = 0, s = n.length; i < s; i++) {
      const l = n[i];
      t.object.levels.push({ object: l.object.uuid, distance: l.distance, hysteresis: l.hysteresis });
    }
    return t;
  }
}
const Jg = new N(),
  Kg = new Ct(),
  jg = new Ct(),
  wT = new N(),
  Qg = new st(),
  Sc = new N(),
  Yf = new bn(),
  $g = new st(),
  qf = new To();
class o_ extends rn {
  constructor(e, t) {
    super(e, t),
      (this.isSkinnedMesh = !0),
      (this.type = "SkinnedMesh"),
      (this.bindMode = _d),
      (this.bindMatrix = new st()),
      (this.bindMatrixInverse = new st()),
      (this.boundingBox = null),
      (this.boundingSphere = null);
  }
  computeBoundingBox() {
    const e = this.geometry;
    this.boundingBox === null && (this.boundingBox = new Fn()), this.boundingBox.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++) this.getVertexPosition(n, Sc), this.boundingBox.expandByPoint(Sc);
  }
  computeBoundingSphere() {
    const e = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new bn()), this.boundingSphere.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++) this.getVertexPosition(n, Sc), this.boundingSphere.expandByPoint(Sc);
  }
  copy(e, t) {
    return (
      super.copy(e, t),
      (this.bindMode = e.bindMode),
      this.bindMatrix.copy(e.bindMatrix),
      this.bindMatrixInverse.copy(e.bindMatrixInverse),
      (this.skeleton = e.skeleton),
      e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()),
      e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()),
      this
    );
  }
  raycast(e, t) {
    const n = this.material,
      i = this.matrixWorld;
    n !== void 0 &&
      (this.boundingSphere === null && this.computeBoundingSphere(),
      Yf.copy(this.boundingSphere),
      Yf.applyMatrix4(i),
      e.ray.intersectsSphere(Yf) !== !1 &&
        ($g.copy(i).invert(),
        qf.copy(e.ray).applyMatrix4($g),
        !(this.boundingBox !== null && qf.intersectsBox(this.boundingBox) === !1) &&
          this._computeIntersections(e, t, qf)));
  }
  getVertexPosition(e, t) {
    return super.getVertexPosition(e, t), this.applyBoneTransform(e, t), t;
  }
  bind(e, t) {
    (this.skeleton = e),
      t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), (t = this.matrixWorld)),
      this.bindMatrix.copy(t),
      this.bindMatrixInverse.copy(t).invert();
  }
  pose() {
    this.skeleton.pose();
  }
  normalizeSkinWeights() {
    const e = new Ct(),
      t = this.geometry.attributes.skinWeight;
    for (let n = 0, i = t.count; n < i; n++) {
      e.fromBufferAttribute(t, n);
      const s = 1 / e.manhattanLength();
      s !== 1 / 0 ? e.multiplyScalar(s) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e),
      this.bindMode === _d
        ? this.bindMatrixInverse.copy(this.matrixWorld).invert()
        : this.bindMode === Av
          ? this.bindMatrixInverse.copy(this.bindMatrix).invert()
          : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  applyBoneTransform(e, t) {
    const n = this.skeleton,
      i = this.geometry;
    Kg.fromBufferAttribute(i.attributes.skinIndex, e),
      jg.fromBufferAttribute(i.attributes.skinWeight, e),
      Jg.copy(t).applyMatrix4(this.bindMatrix),
      t.set(0, 0, 0);
    for (let s = 0; s < 4; s++) {
      const l = jg.getComponent(s);
      if (l !== 0) {
        const c = Kg.getComponent(s);
        Qg.multiplyMatrices(n.bones[c].matrixWorld, n.boneInverses[c]),
          t.addScaledVector(wT.copy(Jg).applyMatrix4(Qg), l);
      }
    }
    return t.applyMatrix4(this.bindMatrixInverse);
  }
}
class np extends Rt {
  constructor() {
    super(), (this.isBone = !0), (this.type = "Bone");
  }
}
class ki extends Kt {
  constructor(e = null, t = 1, n = 1, i, s, l, c, u, h = _n, d = _n, p, m) {
    super(null, l, c, u, h, d, i, s, p, m),
      (this.isDataTexture = !0),
      (this.image = { data: e, width: t, height: n }),
      (this.generateMipmaps = !1),
      (this.flipY = !1),
      (this.unpackAlignment = 1);
  }
}
const e0 = new st(),
  ET = new st();
class Zu {
  constructor(e = [], t = []) {
    (this.uuid = ti()),
      (this.bones = e.slice(0)),
      (this.boneInverses = t),
      (this.boneMatrices = null),
      (this.boneTexture = null),
      this.init();
  }
  init() {
    const e = this.bones,
      t = this.boneInverses;
    if (((this.boneMatrices = new Float32Array(e.length * 16)), t.length === 0)) this.calculateInverses();
    else if (e.length !== t.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),
        (this.boneInverses = []);
      for (let n = 0, i = this.bones.length; n < i; n++) this.boneInverses.push(new st());
    }
  }
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = new st();
      this.bones[e] && n.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(n);
    }
  }
  pose() {
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && n.matrixWorld.copy(this.boneInverses[e]).invert();
    }
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n &&
        (n.parent && n.parent.isBone
          ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld))
          : n.matrix.copy(n.matrixWorld),
        n.matrix.decompose(n.position, n.quaternion, n.scale));
    }
  }
  update() {
    const e = this.bones,
      t = this.boneInverses,
      n = this.boneMatrices,
      i = this.boneTexture;
    for (let s = 0, l = e.length; s < l; s++) {
      const c = e[s] ? e[s].matrixWorld : ET;
      e0.multiplyMatrices(c, t[s]), e0.toArray(n, s * 16);
    }
    i !== null && (i.needsUpdate = !0);
  }
  clone() {
    return new Zu(this.bones, this.boneInverses);
  }
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    (e = Math.ceil(e / 4) * 4), (e = Math.max(e, 4));
    const t = new Float32Array(e * e * 4);
    t.set(this.boneMatrices);
    const n = new ki(t, e, e, An, Yn);
    return (n.needsUpdate = !0), (this.boneMatrices = t), (this.boneTexture = n), this;
  }
  getBoneByName(e) {
    for (let t = 0, n = this.bones.length; t < n; t++) {
      const i = this.bones[t];
      if (i.name === e) return i;
    }
  }
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), (this.boneTexture = null));
  }
  fromJSON(e, t) {
    this.uuid = e.uuid;
    for (let n = 0, i = e.bones.length; n < i; n++) {
      const s = e.bones[n];
      let l = t[s];
      l === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", s), (l = new np())),
        this.bones.push(l),
        this.boneInverses.push(new st().fromArray(e.boneInverses[n]));
    }
    return this.init(), this;
  }
  toJSON() {
    const e = {
      metadata: { version: 4.6, type: "Skeleton", generator: "Skeleton.toJSON" },
      bones: [],
      boneInverses: [],
    };
    e.uuid = this.uuid;
    const t = this.bones,
      n = this.boneInverses;
    for (let i = 0, s = t.length; i < s; i++) {
      const l = t[i];
      e.bones.push(l.uuid);
      const c = n[i];
      e.boneInverses.push(c.toArray());
    }
    return e;
  }
}
class So extends Ot {
  constructor(e, t, n, i = 1) {
    super(e, t, n), (this.isInstancedBufferAttribute = !0), (this.meshPerAttribute = i);
  }
  copy(e) {
    return super.copy(e), (this.meshPerAttribute = e.meshPerAttribute), this;
  }
  toJSON() {
    const e = super.toJSON();
    return (e.meshPerAttribute = this.meshPerAttribute), (e.isInstancedBufferAttribute = !0), e;
  }
}
const so = new st(),
  t0 = new st(),
  Mc = [],
  n0 = new Fn(),
  TT = new st(),
  ta = new rn(),
  na = new bn();
class a_ extends rn {
  constructor(e, t, n) {
    super(e, t),
      (this.isInstancedMesh = !0),
      (this.instanceMatrix = new So(new Float32Array(n * 16), 16)),
      (this.instanceColor = null),
      (this.morphTexture = null),
      (this.count = n),
      (this.boundingBox = null),
      (this.boundingSphere = null);
    for (let i = 0; i < n; i++) this.setMatrixAt(i, TT);
  }
  computeBoundingBox() {
    const e = this.geometry,
      t = this.count;
    this.boundingBox === null && (this.boundingBox = new Fn()),
      e.boundingBox === null && e.computeBoundingBox(),
      this.boundingBox.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, so), n0.copy(e.boundingBox).applyMatrix4(so), this.boundingBox.union(n0);
  }
  computeBoundingSphere() {
    const e = this.geometry,
      t = this.count;
    this.boundingSphere === null && (this.boundingSphere = new bn()),
      e.boundingSphere === null && e.computeBoundingSphere(),
      this.boundingSphere.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, so), na.copy(e.boundingSphere).applyMatrix4(so), this.boundingSphere.union(na);
  }
  copy(e, t) {
    return (
      super.copy(e, t),
      this.instanceMatrix.copy(e.instanceMatrix),
      e.morphTexture !== null && (this.morphTexture = e.morphTexture.clone()),
      e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()),
      (this.count = e.count),
      e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()),
      e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()),
      this
    );
  }
  getColorAt(e, t) {
    t.fromArray(this.instanceColor.array, e * 3);
  }
  getMatrixAt(e, t) {
    t.fromArray(this.instanceMatrix.array, e * 16);
  }
  getMorphAt(e, t) {
    const n = t.morphTargetInfluences,
      i = this.morphTexture.source.data.data,
      s = n.length + 1,
      l = e * s + 1;
    for (let c = 0; c < n.length; c++) n[c] = i[l + c];
  }
  raycast(e, t) {
    const n = this.matrixWorld,
      i = this.count;
    if (
      ((ta.geometry = this.geometry),
      (ta.material = this.material),
      ta.material !== void 0 &&
        (this.boundingSphere === null && this.computeBoundingSphere(),
        na.copy(this.boundingSphere),
        na.applyMatrix4(n),
        e.ray.intersectsSphere(na) !== !1))
    )
      for (let s = 0; s < i; s++) {
        this.getMatrixAt(s, so), t0.multiplyMatrices(n, so), (ta.matrixWorld = t0), ta.raycast(e, Mc);
        for (let l = 0, c = Mc.length; l < c; l++) {
          const u = Mc[l];
          (u.instanceId = s), (u.object = this), t.push(u);
        }
        Mc.length = 0;
      }
  }
  setColorAt(e, t) {
    this.instanceColor === null &&
      (this.instanceColor = new So(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3)),
      t.toArray(this.instanceColor.array, e * 3);
  }
  setMatrixAt(e, t) {
    t.toArray(this.instanceMatrix.array, e * 16);
  }
  setMorphAt(e, t) {
    const n = t.morphTargetInfluences,
      i = n.length + 1;
    this.morphTexture === null && (this.morphTexture = new ki(new Float32Array(i * this.count), i, this.count, zu, Yn));
    const s = this.morphTexture.source.data.data;
    let l = 0;
    for (let h = 0; h < n.length; h++) l += n[h];
    const c = this.geometry.morphTargetsRelative ? 1 : 1 - l,
      u = i * e;
    (s[u] = c), s.set(n, u + 1);
  }
  updateMorphTargets() {}
  dispose() {
    return (
      this.dispatchEvent({ type: "dispose" }),
      this.morphTexture !== null && (this.morphTexture.dispose(), (this.morphTexture = null)),
      this
    );
  }
}
function Zf(r, e) {
  return r - e;
}
function AT(r, e) {
  return r.z - e.z;
}
function bT(r, e) {
  return e.z - r.z;
}
class CT {
  constructor() {
    (this.index = 0), (this.pool = []), (this.list = []);
  }
  push(e, t, n, i) {
    const s = this.pool,
      l = this.list;
    this.index >= s.length && s.push({ start: -1, count: -1, z: -1, index: -1 });
    const c = s[this.index];
    l.push(c), this.index++, (c.start = e), (c.count = t), (c.z = n), (c.index = i);
  }
  reset() {
    (this.list.length = 0), (this.index = 0);
  }
}
const Hn = new st(),
  RT = new Ne(1, 1, 1),
  Jf = new Ga(),
  wc = new Fn(),
  $r = new bn(),
  ia = new N(),
  i0 = new N(),
  PT = new N(),
  Kf = new CT(),
  Tn = new rn(),
  Ec = [];
function IT(r, e, t = 0) {
  const n = e.itemSize;
  if (r.isInterleavedBufferAttribute || r.array.constructor !== e.array.constructor) {
    const i = r.count;
    for (let s = 0; s < i; s++) for (let l = 0; l < n; l++) e.setComponent(s + t, l, r.getComponent(s, l));
  } else e.array.set(r.array, t * n);
  e.needsUpdate = !0;
}
function es(r, e) {
  if (r.constructor !== e.constructor) {
    const t = Math.min(r.length, e.length);
    for (let n = 0; n < t; n++) e[n] = r[n];
  } else {
    const t = Math.min(r.length, e.length);
    e.set(new r.constructor(r.buffer, 0, t));
  }
}
class l_ extends rn {
  get maxInstanceCount() {
    return this._maxInstanceCount;
  }
  get instanceCount() {
    return this._instanceInfo.length - this._availableInstanceIds.length;
  }
  get unusedVertexCount() {
    return this._maxVertexCount - this._nextVertexStart;
  }
  get unusedIndexCount() {
    return this._maxIndexCount - this._nextIndexStart;
  }
  constructor(e, t, n = t * 2, i) {
    super(new vt(), i),
      (this.isBatchedMesh = !0),
      (this.perObjectFrustumCulled = !0),
      (this.sortObjects = !0),
      (this.boundingBox = null),
      (this.boundingSphere = null),
      (this.customSort = null),
      (this._instanceInfo = []),
      (this._geometryInfo = []),
      (this._availableInstanceIds = []),
      (this._availableGeometryIds = []),
      (this._nextIndexStart = 0),
      (this._nextVertexStart = 0),
      (this._geometryCount = 0),
      (this._visibilityChanged = !0),
      (this._geometryInitialized = !1),
      (this._maxInstanceCount = e),
      (this._maxVertexCount = t),
      (this._maxIndexCount = n),
      (this._multiDrawCounts = new Int32Array(e)),
      (this._multiDrawStarts = new Int32Array(e)),
      (this._multiDrawCount = 0),
      (this._multiDrawInstances = null),
      (this._matricesTexture = null),
      (this._indirectTexture = null),
      (this._colorsTexture = null),
      this._initMatricesTexture(),
      this._initIndirectTexture();
  }
  _initMatricesTexture() {
    let e = Math.sqrt(this._maxInstanceCount * 4);
    (e = Math.ceil(e / 4) * 4), (e = Math.max(e, 4));
    const t = new Float32Array(e * e * 4),
      n = new ki(t, e, e, An, Yn);
    this._matricesTexture = n;
  }
  _initIndirectTexture() {
    let e = Math.sqrt(this._maxInstanceCount);
    e = Math.ceil(e);
    const t = new Uint32Array(e * e),
      n = new ki(t, e, e, za, cr);
    this._indirectTexture = n;
  }
  _initColorsTexture() {
    let e = Math.sqrt(this._maxInstanceCount);
    e = Math.ceil(e);
    const t = new Float32Array(e * e * 4).fill(1),
      n = new ki(t, e, e, An, Yn);
    (n.colorSpace = At.workingColorSpace), (this._colorsTexture = n);
  }
  _initializeGeometry(e) {
    const t = this.geometry,
      n = this._maxVertexCount,
      i = this._maxIndexCount;
    if (this._geometryInitialized === !1) {
      for (const s in e.attributes) {
        const l = e.getAttribute(s),
          { array: c, itemSize: u, normalized: h } = l,
          d = new c.constructor(n * u),
          p = new Ot(d, u, h);
        t.setAttribute(s, p);
      }
      if (e.getIndex() !== null) {
        const s = n > 65535 ? new Uint32Array(i) : new Uint16Array(i);
        t.setIndex(new Ot(s, 1));
      }
      this._geometryInitialized = !0;
    }
  }
  _validateGeometry(e) {
    const t = this.geometry;
    if (!!e.getIndex() != !!t.getIndex())
      throw new Error('BatchedMesh: All geometries must consistently have "index".');
    for (const n in t.attributes) {
      if (!e.hasAttribute(n))
        throw new Error(`BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`);
      const i = e.getAttribute(n),
        s = t.getAttribute(n);
      if (i.itemSize !== s.itemSize || i.normalized !== s.normalized)
        throw new Error("BatchedMesh: All attributes must have a consistent itemSize and normalized value.");
    }
  }
  setCustomSort(e) {
    return (this.customSort = e), this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Fn());
    const e = this.boundingBox,
      t = this._instanceInfo;
    e.makeEmpty();
    for (let n = 0, i = t.length; n < i; n++) {
      if (t[n].active === !1) continue;
      const s = t[n].geometryIndex;
      this.getMatrixAt(n, Hn), this.getBoundingBoxAt(s, wc).applyMatrix4(Hn), e.union(wc);
    }
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new bn());
    const e = this.boundingSphere,
      t = this._instanceInfo;
    e.makeEmpty();
    for (let n = 0, i = t.length; n < i; n++) {
      if (t[n].active === !1) continue;
      const s = t[n].geometryIndex;
      this.getMatrixAt(n, Hn), this.getBoundingSphereAt(s, $r).applyMatrix4(Hn), e.union($r);
    }
  }
  addInstance(e) {
    if (this._instanceInfo.length >= this.maxInstanceCount && this._availableInstanceIds.length === 0)
      throw new Error("BatchedMesh: Maximum item count reached.");
    const n = { visible: !0, active: !0, geometryIndex: e };
    let i = null;
    this._availableInstanceIds.length > 0
      ? (this._availableInstanceIds.sort(Zf), (i = this._availableInstanceIds.shift()), (this._instanceInfo[i] = n))
      : ((i = this._instanceInfo.length), this._instanceInfo.push(n));
    const s = this._matricesTexture;
    Hn.identity().toArray(s.image.data, i * 16), (s.needsUpdate = !0);
    const l = this._colorsTexture;
    return l && (RT.toArray(l.image.data, i * 4), (l.needsUpdate = !0)), (this._visibilityChanged = !0), i;
  }
  addGeometry(e, t = -1, n = -1) {
    this._initializeGeometry(e), this._validateGeometry(e);
    const i = {
        vertexStart: -1,
        vertexCount: -1,
        reservedVertexCount: -1,
        indexStart: -1,
        indexCount: -1,
        reservedIndexCount: -1,
        start: -1,
        count: -1,
        boundingBox: null,
        boundingSphere: null,
        active: !0,
      },
      s = this._geometryInfo;
    (i.vertexStart = this._nextVertexStart), (i.reservedVertexCount = t === -1 ? e.getAttribute("position").count : t);
    const l = e.getIndex();
    if (
      (l !== null && ((i.indexStart = this._nextIndexStart), (i.reservedIndexCount = n === -1 ? l.count : n)),
      (i.indexStart !== -1 && i.indexStart + i.reservedIndexCount > this._maxIndexCount) ||
        i.vertexStart + i.reservedVertexCount > this._maxVertexCount)
    )
      throw new Error("BatchedMesh: Reserved space request exceeds the maximum buffer size.");
    let u;
    return (
      this._availableGeometryIds.length > 0
        ? (this._availableGeometryIds.sort(Zf), (u = this._availableGeometryIds.shift()), (s[u] = i))
        : ((u = this._geometryCount), this._geometryCount++, s.push(i)),
      this.setGeometryAt(u, e),
      (this._nextIndexStart = i.indexStart + i.reservedIndexCount),
      (this._nextVertexStart = i.vertexStart + i.reservedVertexCount),
      u
    );
  }
  setGeometryAt(e, t) {
    if (e >= this._geometryCount) throw new Error("BatchedMesh: Maximum geometry count reached.");
    this._validateGeometry(t);
    const n = this.geometry,
      i = n.getIndex() !== null,
      s = n.getIndex(),
      l = t.getIndex(),
      c = this._geometryInfo[e];
    if ((i && l.count > c.reservedIndexCount) || t.attributes.position.count > c.reservedVertexCount)
      throw new Error("BatchedMesh: Reserved space not large enough for provided geometry.");
    const u = c.vertexStart,
      h = c.reservedVertexCount;
    c.vertexCount = t.getAttribute("position").count;
    for (const d in n.attributes) {
      const p = t.getAttribute(d),
        m = n.getAttribute(d);
      IT(p, m, u);
      const v = p.itemSize;
      for (let x = p.count, M = h; x < M; x++) {
        const y = u + x;
        for (let _ = 0; _ < v; _++) m.setComponent(y, _, 0);
      }
      (m.needsUpdate = !0), m.addUpdateRange(u * v, h * v);
    }
    if (i) {
      const d = c.indexStart,
        p = c.reservedIndexCount;
      c.indexCount = t.getIndex().count;
      for (let m = 0; m < l.count; m++) s.setX(d + m, u + l.getX(m));
      for (let m = l.count, v = p; m < v; m++) s.setX(d + m, u);
      (s.needsUpdate = !0), s.addUpdateRange(d, c.reservedIndexCount);
    }
    return (
      (c.start = i ? c.indexStart : c.vertexStart),
      (c.count = i ? c.indexCount : c.vertexCount),
      (c.boundingBox = null),
      t.boundingBox !== null && (c.boundingBox = t.boundingBox.clone()),
      (c.boundingSphere = null),
      t.boundingSphere !== null && (c.boundingSphere = t.boundingSphere.clone()),
      (this._visibilityChanged = !0),
      e
    );
  }
  deleteGeometry(e) {
    const t = this._geometryInfo;
    if (e >= t.length || t[e].active === !1) return this;
    const n = this._instanceInfo;
    for (let i = 0, s = n.length; i < s; i++) n[i].geometryIndex === e && this.deleteInstance(i);
    return (t[e].active = !1), this._availableGeometryIds.push(e), (this._visibilityChanged = !0), this;
  }
  deleteInstance(e) {
    const t = this._instanceInfo;
    return e >= t.length || t[e].active === !1
      ? this
      : ((t[e].active = !1), this._availableInstanceIds.push(e), (this._visibilityChanged = !0), this);
  }
  optimize() {
    let e = 0,
      t = 0;
    const n = this._geometryInfo,
      i = n.map((l, c) => c).sort((l, c) => n[l].vertexStart - n[c].vertexStart),
      s = this.geometry;
    for (let l = 0, c = n.length; l < c; l++) {
      const u = i[l],
        h = n[u];
      if (h.active !== !1) {
        if (s.index !== null) {
          if (h.indexStart !== t) {
            const { indexStart: d, vertexStart: p, reservedIndexCount: m } = h,
              v = s.index,
              x = v.array,
              M = e - p;
            for (let y = d; y < d + m; y++) x[y] = x[y] + M;
            v.array.copyWithin(t, d, d + m), v.addUpdateRange(t, m), (h.indexStart = t);
          }
          t += h.reservedIndexCount;
        }
        if (h.vertexStart !== e) {
          const { vertexStart: d, reservedVertexCount: p } = h,
            m = s.attributes;
          for (const v in m) {
            const x = m[v],
              { array: M, itemSize: y } = x;
            M.copyWithin(e * y, d * y, (d + p) * y), x.addUpdateRange(e * y, p * y);
          }
          h.vertexStart = e;
        }
        (e += h.reservedVertexCount),
          (h.start = s.index ? h.indexStart : h.vertexStart),
          (this._nextIndexStart = s.index ? h.indexStart + h.reservedIndexCount : 0),
          (this._nextVertexStart = h.vertexStart + h.reservedVertexCount);
      }
    }
    return this;
  }
  getBoundingBoxAt(e, t) {
    if (e >= this._geometryCount) return null;
    const n = this.geometry,
      i = this._geometryInfo[e];
    if (i.boundingBox === null) {
      const s = new Fn(),
        l = n.index,
        c = n.attributes.position;
      for (let u = i.start, h = i.start + i.count; u < h; u++) {
        let d = u;
        l && (d = l.getX(d)), s.expandByPoint(ia.fromBufferAttribute(c, d));
      }
      i.boundingBox = s;
    }
    return t.copy(i.boundingBox), t;
  }
  getBoundingSphereAt(e, t) {
    if (e >= this._geometryCount) return null;
    const n = this.geometry,
      i = this._geometryInfo[e];
    if (i.boundingSphere === null) {
      const s = new bn();
      this.getBoundingBoxAt(e, wc), wc.getCenter(s.center);
      const l = n.index,
        c = n.attributes.position;
      let u = 0;
      for (let h = i.start, d = i.start + i.count; h < d; h++) {
        let p = h;
        l && (p = l.getX(p)), ia.fromBufferAttribute(c, p), (u = Math.max(u, s.center.distanceToSquared(ia)));
      }
      (s.radius = Math.sqrt(u)), (i.boundingSphere = s);
    }
    return t.copy(i.boundingSphere), t;
  }
  setMatrixAt(e, t) {
    const n = this._instanceInfo,
      i = this._matricesTexture,
      s = this._matricesTexture.image.data;
    return e >= n.length || n[e].active === !1 ? this : (t.toArray(s, e * 16), (i.needsUpdate = !0), this);
  }
  getMatrixAt(e, t) {
    const n = this._instanceInfo,
      i = this._matricesTexture.image.data;
    return e >= n.length || n[e].active === !1 ? null : t.fromArray(i, e * 16);
  }
  setColorAt(e, t) {
    this._colorsTexture === null && this._initColorsTexture();
    const n = this._colorsTexture,
      i = this._colorsTexture.image.data,
      s = this._instanceInfo;
    return e >= s.length || s[e].active === !1 ? this : (t.toArray(i, e * 4), (n.needsUpdate = !0), this);
  }
  getColorAt(e, t) {
    const n = this._colorsTexture.image.data,
      i = this._instanceInfo;
    return e >= i.length || i[e].active === !1 ? null : t.fromArray(n, e * 4);
  }
  setVisibleAt(e, t) {
    const n = this._instanceInfo;
    return e >= n.length || n[e].active === !1 || n[e].visible === t
      ? this
      : ((n[e].visible = t), (this._visibilityChanged = !0), this);
  }
  getVisibleAt(e) {
    const t = this._instanceInfo;
    return e >= t.length || t[e].active === !1 ? !1 : t[e].visible;
  }
  setGeometryIdAt(e, t) {
    const n = this._instanceInfo,
      i = this._geometryInfo;
    return e >= n.length || n[e].active === !1 || t >= i.length || i[t].active === !1
      ? null
      : ((n[e].geometryIndex = t), this);
  }
  getGeometryIdAt(e) {
    const t = this._instanceInfo;
    return e >= t.length || t[e].active === !1 ? -1 : t[e].geometryIndex;
  }
  getGeometryRangeAt(e, t = {}) {
    if (e < 0 || e >= this._geometryCount) return null;
    const n = this._geometryInfo[e];
    return (
      (t.vertexStart = n.vertexStart),
      (t.vertexCount = n.vertexCount),
      (t.reservedVertexCount = n.reservedVertexCount),
      (t.indexStart = n.indexStart),
      (t.indexCount = n.indexCount),
      (t.reservedIndexCount = n.reservedIndexCount),
      (t.start = n.start),
      (t.count = n.count),
      t
    );
  }
  setInstanceCount(e) {
    const t = this._availableInstanceIds,
      n = this._instanceInfo;
    for (t.sort(Zf); t[t.length - 1] === n.length; ) n.pop(), t.pop();
    if (e < n.length)
      throw new Error(`BatchedMesh: Instance ids outside the range ${e} are being used. Cannot shrink instance count.`);
    const i = new Int32Array(e),
      s = new Int32Array(e);
    es(this._multiDrawCounts, i),
      es(this._multiDrawStarts, s),
      (this._multiDrawCounts = i),
      (this._multiDrawStarts = s),
      (this._maxInstanceCount = e);
    const l = this._indirectTexture,
      c = this._matricesTexture,
      u = this._colorsTexture;
    l.dispose(),
      this._initIndirectTexture(),
      es(l.image.data, this._indirectTexture.image.data),
      c.dispose(),
      this._initMatricesTexture(),
      es(c.image.data, this._matricesTexture.image.data),
      u && (u.dispose(), this._initColorsTexture(), es(u.image.data, this._colorsTexture.image.data));
  }
  setGeometrySize(e, t) {
    const n = [...this._geometryInfo].filter((c) => c.active);
    if (Math.max(...n.map((c) => c.vertexStart + c.reservedVertexCount)) > e)
      throw new Error(
        `BatchedMesh: Geometry vertex values are being used outside the range ${t}. Cannot shrink further.`
      );
    if (this.geometry.index && Math.max(...n.map((u) => u.indexStart + u.reservedIndexCount)) > t)
      throw new Error(
        `BatchedMesh: Geometry index values are being used outside the range ${t}. Cannot shrink further.`
      );
    const s = this.geometry;
    s.dispose(),
      (this._maxVertexCount = e),
      (this._maxIndexCount = t),
      this._geometryInitialized &&
        ((this._geometryInitialized = !1), (this.geometry = new vt()), this._initializeGeometry(s));
    const l = this.geometry;
    s.index && es(s.index.array, l.index.array);
    for (const c in s.attributes) es(s.attributes[c].array, l.attributes[c].array);
  }
  raycast(e, t) {
    const n = this._instanceInfo,
      i = this._geometryInfo,
      s = this.matrixWorld,
      l = this.geometry;
    (Tn.material = this.material),
      (Tn.geometry.index = l.index),
      (Tn.geometry.attributes = l.attributes),
      Tn.geometry.boundingBox === null && (Tn.geometry.boundingBox = new Fn()),
      Tn.geometry.boundingSphere === null && (Tn.geometry.boundingSphere = new bn());
    for (let c = 0, u = n.length; c < u; c++) {
      if (!n[c].visible || !n[c].active) continue;
      const h = n[c].geometryIndex,
        d = i[h];
      Tn.geometry.setDrawRange(d.start, d.count),
        this.getMatrixAt(c, Tn.matrixWorld).premultiply(s),
        this.getBoundingBoxAt(h, Tn.geometry.boundingBox),
        this.getBoundingSphereAt(h, Tn.geometry.boundingSphere),
        Tn.raycast(e, Ec);
      for (let p = 0, m = Ec.length; p < m; p++) {
        const v = Ec[p];
        (v.object = this), (v.batchId = c), t.push(v);
      }
      Ec.length = 0;
    }
    (Tn.material = null), (Tn.geometry.index = null), (Tn.geometry.attributes = {}), Tn.geometry.setDrawRange(0, 1 / 0);
  }
  copy(e) {
    return (
      super.copy(e),
      (this.geometry = e.geometry.clone()),
      (this.perObjectFrustumCulled = e.perObjectFrustumCulled),
      (this.sortObjects = e.sortObjects),
      (this.boundingBox = e.boundingBox !== null ? e.boundingBox.clone() : null),
      (this.boundingSphere = e.boundingSphere !== null ? e.boundingSphere.clone() : null),
      (this._geometryInfo = e._geometryInfo.map((t) => ({
        ...t,
        boundingBox: t.boundingBox !== null ? t.boundingBox.clone() : null,
        boundingSphere: t.boundingSphere !== null ? t.boundingSphere.clone() : null,
      }))),
      (this._instanceInfo = e._instanceInfo.map((t) => ({ ...t }))),
      (this._maxInstanceCount = e._maxInstanceCount),
      (this._maxVertexCount = e._maxVertexCount),
      (this._maxIndexCount = e._maxIndexCount),
      (this._geometryInitialized = e._geometryInitialized),
      (this._geometryCount = e._geometryCount),
      (this._multiDrawCounts = e._multiDrawCounts.slice()),
      (this._multiDrawStarts = e._multiDrawStarts.slice()),
      (this._matricesTexture = e._matricesTexture.clone()),
      (this._matricesTexture.image.data = this._matricesTexture.image.data.slice()),
      this._colorsTexture !== null &&
        ((this._colorsTexture = e._colorsTexture.clone()),
        (this._colorsTexture.image.data = this._colorsTexture.image.data.slice())),
      this
    );
  }
  dispose() {
    return (
      this.geometry.dispose(),
      this._matricesTexture.dispose(),
      (this._matricesTexture = null),
      this._indirectTexture.dispose(),
      (this._indirectTexture = null),
      this._colorsTexture !== null && (this._colorsTexture.dispose(), (this._colorsTexture = null)),
      this
    );
  }
  onBeforeRender(e, t, n, i, s) {
    if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects) return;
    const l = i.getIndex(),
      c = l === null ? 1 : l.array.BYTES_PER_ELEMENT,
      u = this._instanceInfo,
      h = this._multiDrawStarts,
      d = this._multiDrawCounts,
      p = this._geometryInfo,
      m = this.perObjectFrustumCulled,
      v = this._indirectTexture,
      x = v.image.data;
    m &&
      (Hn.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse).multiply(this.matrixWorld),
      Jf.setFromProjectionMatrix(Hn, e.coordinateSystem));
    let M = 0;
    if (this.sortObjects) {
      Hn.copy(this.matrixWorld).invert(),
        ia.setFromMatrixPosition(n.matrixWorld).applyMatrix4(Hn),
        i0.set(0, 0, -1).transformDirection(n.matrixWorld).transformDirection(Hn);
      for (let w = 0, E = u.length; w < E; w++)
        if (u[w].visible && u[w].active) {
          const A = u[w].geometryIndex;
          this.getMatrixAt(w, Hn), this.getBoundingSphereAt(A, $r).applyMatrix4(Hn);
          let O = !1;
          if ((m && (O = !Jf.intersectsSphere($r)), !O)) {
            const P = p[A],
              L = PT.subVectors($r.center, ia).dot(i0);
            Kf.push(P.start, P.count, L, w);
          }
        }
      const y = Kf.list,
        _ = this.customSort;
      _ === null ? y.sort(s.transparent ? bT : AT) : _.call(this, y, n);
      for (let w = 0, E = y.length; w < E; w++) {
        const A = y[w];
        (h[M] = A.start * c), (d[M] = A.count), (x[M] = A.index), M++;
      }
      Kf.reset();
    } else
      for (let y = 0, _ = u.length; y < _; y++)
        if (u[y].visible && u[y].active) {
          const w = u[y].geometryIndex;
          let E = !1;
          if (
            (m &&
              (this.getMatrixAt(y, Hn),
              this.getBoundingSphereAt(w, $r).applyMatrix4(Hn),
              (E = !Jf.intersectsSphere($r))),
            !E)
          ) {
            const A = p[w];
            (h[M] = A.start * c), (d[M] = A.count), (x[M] = y), M++;
          }
        }
    (v.needsUpdate = !0), (this._multiDrawCount = M), (this._visibilityChanged = !1);
  }
  onBeforeShadow(e, t, n, i, s, l) {
    this.onBeforeRender(e, null, i, s, l);
  }
}
class On extends Cn {
  static get type() {
    return "LineBasicMaterial";
  }
  constructor(e) {
    super(),
      (this.isLineBasicMaterial = !0),
      (this.color = new Ne(16777215)),
      (this.map = null),
      (this.linewidth = 1),
      (this.linecap = "round"),
      (this.linejoin = "round"),
      (this.fog = !0),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      this.color.copy(e.color),
      (this.map = e.map),
      (this.linewidth = e.linewidth),
      (this.linecap = e.linecap),
      (this.linejoin = e.linejoin),
      (this.fog = e.fog),
      this
    );
  }
}
const Ru = new N(),
  Pu = new N(),
  r0 = new st(),
  ra = new To(),
  Tc = new bn(),
  jf = new N(),
  s0 = new N();
class Lr extends Rt {
  constructor(e = new vt(), t = new On()) {
    super(),
      (this.isLine = !0),
      (this.type = "Line"),
      (this.geometry = e),
      (this.material = t),
      this.updateMorphTargets();
  }
  copy(e, t) {
    return (
      super.copy(e, t),
      (this.material = Array.isArray(e.material) ? e.material.slice() : e.material),
      (this.geometry = e.geometry),
      this
    );
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position,
        n = [0];
      for (let i = 1, s = t.count; i < s; i++)
        Ru.fromBufferAttribute(t, i - 1), Pu.fromBufferAttribute(t, i), (n[i] = n[i - 1]), (n[i] += Ru.distanceTo(Pu));
      e.setAttribute("lineDistance", new Xe(n, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  raycast(e, t) {
    const n = this.geometry,
      i = this.matrixWorld,
      s = e.params.Line.threshold,
      l = n.drawRange;
    if (
      (n.boundingSphere === null && n.computeBoundingSphere(),
      Tc.copy(n.boundingSphere),
      Tc.applyMatrix4(i),
      (Tc.radius += s),
      e.ray.intersectsSphere(Tc) === !1)
    )
      return;
    r0.copy(i).invert(), ra.copy(e.ray).applyMatrix4(r0);
    const c = s / ((this.scale.x + this.scale.y + this.scale.z) / 3),
      u = c * c,
      h = this.isLineSegments ? 2 : 1,
      d = n.index,
      m = n.attributes.position;
    if (d !== null) {
      const v = Math.max(0, l.start),
        x = Math.min(d.count, l.start + l.count);
      for (let M = v, y = x - 1; M < y; M += h) {
        const _ = d.getX(M),
          w = d.getX(M + 1),
          E = Ac(this, e, ra, u, _, w);
        E && t.push(E);
      }
      if (this.isLineLoop) {
        const M = d.getX(x - 1),
          y = d.getX(v),
          _ = Ac(this, e, ra, u, M, y);
        _ && t.push(_);
      }
    } else {
      const v = Math.max(0, l.start),
        x = Math.min(m.count, l.start + l.count);
      for (let M = v, y = x - 1; M < y; M += h) {
        const _ = Ac(this, e, ra, u, M, M + 1);
        _ && t.push(_);
      }
      if (this.isLineLoop) {
        const M = Ac(this, e, ra, u, x - 1, v);
        M && t.push(M);
      }
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes,
      n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        (this.morphTargetInfluences = []), (this.morphTargetDictionary = {});
        for (let s = 0, l = i.length; s < l; s++) {
          const c = i[s].name || String(s);
          this.morphTargetInfluences.push(0), (this.morphTargetDictionary[c] = s);
        }
      }
    }
  }
}
function Ac(r, e, t, n, i, s) {
  const l = r.geometry.attributes.position;
  if ((Ru.fromBufferAttribute(l, i), Pu.fromBufferAttribute(l, s), t.distanceSqToSegment(Ru, Pu, jf, s0) > n)) return;
  jf.applyMatrix4(r.matrixWorld);
  const u = e.ray.origin.distanceTo(jf);
  if (!(u < e.near || u > e.far))
    return {
      distance: u,
      point: s0.clone().applyMatrix4(r.matrixWorld),
      index: i,
      face: null,
      faceIndex: null,
      barycoord: null,
      object: r,
    };
}
const o0 = new N(),
  a0 = new N();
class Gi extends Lr {
  constructor(e, t) {
    super(e, t), (this.isLineSegments = !0), (this.type = "LineSegments");
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position,
        n = [];
      for (let i = 0, s = t.count; i < s; i += 2)
        o0.fromBufferAttribute(t, i),
          a0.fromBufferAttribute(t, i + 1),
          (n[i] = i === 0 ? 0 : n[i - 1]),
          (n[i + 1] = n[i] + o0.distanceTo(a0));
      e.setAttribute("lineDistance", new Xe(n, 1));
    } else
      console.warn(
        "THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry."
      );
    return this;
  }
}
class c_ extends Lr {
  constructor(e, t) {
    super(e, t), (this.isLineLoop = !0), (this.type = "LineLoop");
  }
}
class ip extends Cn {
  static get type() {
    return "PointsMaterial";
  }
  constructor(e) {
    super(),
      (this.isPointsMaterial = !0),
      (this.color = new Ne(16777215)),
      (this.map = null),
      (this.alphaMap = null),
      (this.size = 1),
      (this.sizeAttenuation = !0),
      (this.fog = !0),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      this.color.copy(e.color),
      (this.map = e.map),
      (this.alphaMap = e.alphaMap),
      (this.size = e.size),
      (this.sizeAttenuation = e.sizeAttenuation),
      (this.fog = e.fog),
      this
    );
  }
}
const l0 = new st(),
  Ed = new To(),
  bc = new bn(),
  Cc = new N();
class u_ extends Rt {
  constructor(e = new vt(), t = new ip()) {
    super(),
      (this.isPoints = !0),
      (this.type = "Points"),
      (this.geometry = e),
      (this.material = t),
      this.updateMorphTargets();
  }
  copy(e, t) {
    return (
      super.copy(e, t),
      (this.material = Array.isArray(e.material) ? e.material.slice() : e.material),
      (this.geometry = e.geometry),
      this
    );
  }
  raycast(e, t) {
    const n = this.geometry,
      i = this.matrixWorld,
      s = e.params.Points.threshold,
      l = n.drawRange;
    if (
      (n.boundingSphere === null && n.computeBoundingSphere(),
      bc.copy(n.boundingSphere),
      bc.applyMatrix4(i),
      (bc.radius += s),
      e.ray.intersectsSphere(bc) === !1)
    )
      return;
    l0.copy(i).invert(), Ed.copy(e.ray).applyMatrix4(l0);
    const c = s / ((this.scale.x + this.scale.y + this.scale.z) / 3),
      u = c * c,
      h = n.index,
      p = n.attributes.position;
    if (h !== null) {
      const m = Math.max(0, l.start),
        v = Math.min(h.count, l.start + l.count);
      for (let x = m, M = v; x < M; x++) {
        const y = h.getX(x);
        Cc.fromBufferAttribute(p, y), c0(Cc, y, u, i, e, t, this);
      }
    } else {
      const m = Math.max(0, l.start),
        v = Math.min(p.count, l.start + l.count);
      for (let x = m, M = v; x < M; x++) Cc.fromBufferAttribute(p, x), c0(Cc, x, u, i, e, t, this);
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes,
      n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        (this.morphTargetInfluences = []), (this.morphTargetDictionary = {});
        for (let s = 0, l = i.length; s < l; s++) {
          const c = i[s].name || String(s);
          this.morphTargetInfluences.push(0), (this.morphTargetDictionary[c] = s);
        }
      }
    }
  }
}
function c0(r, e, t, n, i, s, l) {
  const c = Ed.distanceSqToPoint(r);
  if (c < t) {
    const u = new N();
    Ed.closestPointToPoint(r, u), u.applyMatrix4(n);
    const h = i.ray.origin.distanceTo(u);
    if (h < i.near || h > i.far) return;
    s.push({
      distance: h,
      distanceToRay: Math.sqrt(c),
      point: u,
      index: e,
      face: null,
      faceIndex: null,
      barycoord: null,
      object: l,
    });
  }
}
class LT extends Kt {
  constructor(e, t, n, i, s, l, c, u, h) {
    super(e, t, n, i, s, l, c, u, h),
      (this.isVideoTexture = !0),
      (this.minFilter = l !== void 0 ? l : an),
      (this.magFilter = s !== void 0 ? s : an),
      (this.generateMipmaps = !1);
    const d = this;
    function p() {
      (d.needsUpdate = !0), e.requestVideoFrameCallback(p);
    }
    "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(p);
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  update() {
    const e = this.image;
    "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
}
class DT extends Kt {
  constructor(e, t) {
    super({ width: e, height: t }),
      (this.isFramebufferTexture = !0),
      (this.magFilter = _n),
      (this.minFilter = _n),
      (this.generateMipmaps = !1),
      (this.needsUpdate = !0);
  }
}
class Ju extends Kt {
  constructor(e, t, n, i, s, l, c, u, h, d, p, m) {
    super(null, l, c, u, h, d, i, s, p, m),
      (this.isCompressedTexture = !0),
      (this.image = { width: t, height: n }),
      (this.mipmaps = e),
      (this.flipY = !1),
      (this.generateMipmaps = !1);
  }
}
class UT extends Ju {
  constructor(e, t, n, i, s, l) {
    super(e, t, n, s, l),
      (this.isCompressedArrayTexture = !0),
      (this.image.depth = i),
      (this.wrapR = fi),
      (this.layerUpdates = new Set());
  }
  addLayerUpdate(e) {
    this.layerUpdates.add(e);
  }
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class NT extends Ju {
  constructor(e, t, n) {
    super(void 0, e[0].width, e[0].height, t, n, lr),
      (this.isCompressedCubeTexture = !0),
      (this.isCubeTexture = !0),
      (this.image = e);
  }
}
class FT extends Kt {
  constructor(e, t, n, i, s, l, c, u, h) {
    super(e, t, n, i, s, l, c, u, h), (this.isCanvasTexture = !0), (this.needsUpdate = !0);
  }
}
class Ti {
  constructor() {
    (this.type = "Curve"), (this.arcLengthDivisions = 200);
  }
  getPoint() {
    return console.warn("THREE.Curve: .getPoint() not implemented."), null;
  }
  getPointAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getPoint(n, t);
  }
  getPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++) t.push(this.getPoint(n / e));
    return t;
  }
  getSpacedPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++) t.push(this.getPointAt(n / e));
    return t;
  }
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate) return this.cacheArcLengths;
    this.needsUpdate = !1;
    const t = [];
    let n,
      i = this.getPoint(0),
      s = 0;
    t.push(0);
    for (let l = 1; l <= e; l++) (n = this.getPoint(l / e)), (s += n.distanceTo(i)), t.push(s), (i = n);
    return (this.cacheArcLengths = t), t;
  }
  updateArcLengths() {
    (this.needsUpdate = !0), this.getLengths();
  }
  getUtoTmapping(e, t) {
    const n = this.getLengths();
    let i = 0;
    const s = n.length;
    let l;
    t ? (l = t) : (l = e * n[s - 1]);
    let c = 0,
      u = s - 1,
      h;
    for (; c <= u; )
      if (((i = Math.floor(c + (u - c) / 2)), (h = n[i] - l), h < 0)) c = i + 1;
      else if (h > 0) u = i - 1;
      else {
        u = i;
        break;
      }
    if (((i = u), n[i] === l)) return i / (s - 1);
    const d = n[i],
      m = n[i + 1] - d,
      v = (l - d) / m;
    return (i + v) / (s - 1);
  }
  getTangent(e, t) {
    let i = e - 1e-4,
      s = e + 1e-4;
    i < 0 && (i = 0), s > 1 && (s = 1);
    const l = this.getPoint(i),
      c = this.getPoint(s),
      u = t || (l.isVector2 ? new fe() : new N());
    return u.copy(c).sub(l).normalize(), u;
  }
  getTangentAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getTangent(n, t);
  }
  computeFrenetFrames(e, t) {
    const n = new N(),
      i = [],
      s = [],
      l = [],
      c = new N(),
      u = new st();
    for (let v = 0; v <= e; v++) {
      const x = v / e;
      i[v] = this.getTangentAt(x, new N());
    }
    (s[0] = new N()), (l[0] = new N());
    let h = Number.MAX_VALUE;
    const d = Math.abs(i[0].x),
      p = Math.abs(i[0].y),
      m = Math.abs(i[0].z);
    d <= h && ((h = d), n.set(1, 0, 0)),
      p <= h && ((h = p), n.set(0, 1, 0)),
      m <= h && n.set(0, 0, 1),
      c.crossVectors(i[0], n).normalize(),
      s[0].crossVectors(i[0], c),
      l[0].crossVectors(i[0], s[0]);
    for (let v = 1; v <= e; v++) {
      if (
        ((s[v] = s[v - 1].clone()),
        (l[v] = l[v - 1].clone()),
        c.crossVectors(i[v - 1], i[v]),
        c.length() > Number.EPSILON)
      ) {
        c.normalize();
        const x = Math.acos(Jt(i[v - 1].dot(i[v]), -1, 1));
        s[v].applyMatrix4(u.makeRotationAxis(c, x));
      }
      l[v].crossVectors(i[v], s[v]);
    }
    if (t === !0) {
      let v = Math.acos(Jt(s[0].dot(s[e]), -1, 1));
      (v /= e), i[0].dot(c.crossVectors(s[0], s[e])) > 0 && (v = -v);
      for (let x = 1; x <= e; x++) s[x].applyMatrix4(u.makeRotationAxis(i[x], v * x)), l[x].crossVectors(i[x], s[x]);
    }
    return { tangents: i, normals: s, binormals: l };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return (this.arcLengthDivisions = e.arcLengthDivisions), this;
  }
  toJSON() {
    const e = { metadata: { version: 4.6, type: "Curve", generator: "Curve.toJSON" } };
    return (e.arcLengthDivisions = this.arcLengthDivisions), (e.type = this.type), e;
  }
  fromJSON(e) {
    return (this.arcLengthDivisions = e.arcLengthDivisions), this;
  }
}
class Ku extends Ti {
  constructor(e = 0, t = 0, n = 1, i = 1, s = 0, l = Math.PI * 2, c = !1, u = 0) {
    super(),
      (this.isEllipseCurve = !0),
      (this.type = "EllipseCurve"),
      (this.aX = e),
      (this.aY = t),
      (this.xRadius = n),
      (this.yRadius = i),
      (this.aStartAngle = s),
      (this.aEndAngle = l),
      (this.aClockwise = c),
      (this.aRotation = u);
  }
  getPoint(e, t = new fe()) {
    const n = t,
      i = Math.PI * 2;
    let s = this.aEndAngle - this.aStartAngle;
    const l = Math.abs(s) < Number.EPSILON;
    for (; s < 0; ) s += i;
    for (; s > i; ) s -= i;
    s < Number.EPSILON && (l ? (s = 0) : (s = i)), this.aClockwise === !0 && !l && (s === i ? (s = -i) : (s = s - i));
    const c = this.aStartAngle + e * s;
    let u = this.aX + this.xRadius * Math.cos(c),
      h = this.aY + this.yRadius * Math.sin(c);
    if (this.aRotation !== 0) {
      const d = Math.cos(this.aRotation),
        p = Math.sin(this.aRotation),
        m = u - this.aX,
        v = h - this.aY;
      (u = m * d - v * p + this.aX), (h = m * p + v * d + this.aY);
    }
    return n.set(u, h);
  }
  copy(e) {
    return (
      super.copy(e),
      (this.aX = e.aX),
      (this.aY = e.aY),
      (this.xRadius = e.xRadius),
      (this.yRadius = e.yRadius),
      (this.aStartAngle = e.aStartAngle),
      (this.aEndAngle = e.aEndAngle),
      (this.aClockwise = e.aClockwise),
      (this.aRotation = e.aRotation),
      this
    );
  }
  toJSON() {
    const e = super.toJSON();
    return (
      (e.aX = this.aX),
      (e.aY = this.aY),
      (e.xRadius = this.xRadius),
      (e.yRadius = this.yRadius),
      (e.aStartAngle = this.aStartAngle),
      (e.aEndAngle = this.aEndAngle),
      (e.aClockwise = this.aClockwise),
      (e.aRotation = this.aRotation),
      e
    );
  }
  fromJSON(e) {
    return (
      super.fromJSON(e),
      (this.aX = e.aX),
      (this.aY = e.aY),
      (this.xRadius = e.xRadius),
      (this.yRadius = e.yRadius),
      (this.aStartAngle = e.aStartAngle),
      (this.aEndAngle = e.aEndAngle),
      (this.aClockwise = e.aClockwise),
      (this.aRotation = e.aRotation),
      this
    );
  }
}
class h_ extends Ku {
  constructor(e, t, n, i, s, l) {
    super(e, t, n, n, i, s, l), (this.isArcCurve = !0), (this.type = "ArcCurve");
  }
}
function rp() {
  let r = 0,
    e = 0,
    t = 0,
    n = 0;
  function i(s, l, c, u) {
    (r = s), (e = c), (t = -3 * s + 3 * l - 2 * c - u), (n = 2 * s - 2 * l + c + u);
  }
  return {
    initCatmullRom: function (s, l, c, u, h) {
      i(l, c, h * (c - s), h * (u - l));
    },
    initNonuniformCatmullRom: function (s, l, c, u, h, d, p) {
      let m = (l - s) / h - (c - s) / (h + d) + (c - l) / d,
        v = (c - l) / d - (u - l) / (d + p) + (u - c) / p;
      (m *= d), (v *= d), i(l, c, m, v);
    },
    calc: function (s) {
      const l = s * s,
        c = l * s;
      return r + e * s + t * l + n * c;
    },
  };
}
const Rc = new N(),
  Qf = new rp(),
  $f = new rp(),
  ed = new rp();
class f_ extends Ti {
  constructor(e = [], t = !1, n = "centripetal", i = 0.5) {
    super(),
      (this.isCatmullRomCurve3 = !0),
      (this.type = "CatmullRomCurve3"),
      (this.points = e),
      (this.closed = t),
      (this.curveType = n),
      (this.tension = i);
  }
  getPoint(e, t = new N()) {
    const n = t,
      i = this.points,
      s = i.length,
      l = (s - (this.closed ? 0 : 1)) * e;
    let c = Math.floor(l),
      u = l - c;
    this.closed
      ? (c += c > 0 ? 0 : (Math.floor(Math.abs(c) / s) + 1) * s)
      : u === 0 && c === s - 1 && ((c = s - 2), (u = 1));
    let h, d;
    this.closed || c > 0 ? (h = i[(c - 1) % s]) : (Rc.subVectors(i[0], i[1]).add(i[0]), (h = Rc));
    const p = i[c % s],
      m = i[(c + 1) % s];
    if (
      (this.closed || c + 2 < s ? (d = i[(c + 2) % s]) : (Rc.subVectors(i[s - 1], i[s - 2]).add(i[s - 1]), (d = Rc)),
      this.curveType === "centripetal" || this.curveType === "chordal")
    ) {
      const v = this.curveType === "chordal" ? 0.5 : 0.25;
      let x = Math.pow(h.distanceToSquared(p), v),
        M = Math.pow(p.distanceToSquared(m), v),
        y = Math.pow(m.distanceToSquared(d), v);
      M < 1e-4 && (M = 1),
        x < 1e-4 && (x = M),
        y < 1e-4 && (y = M),
        Qf.initNonuniformCatmullRom(h.x, p.x, m.x, d.x, x, M, y),
        $f.initNonuniformCatmullRom(h.y, p.y, m.y, d.y, x, M, y),
        ed.initNonuniformCatmullRom(h.z, p.z, m.z, d.z, x, M, y);
    } else
      this.curveType === "catmullrom" &&
        (Qf.initCatmullRom(h.x, p.x, m.x, d.x, this.tension),
        $f.initCatmullRom(h.y, p.y, m.y, d.y, this.tension),
        ed.initCatmullRom(h.z, p.z, m.z, d.z, this.tension));
    return n.set(Qf.calc(u), $f.calc(u), ed.calc(u)), n;
  }
  copy(e) {
    super.copy(e), (this.points = []);
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(i.clone());
    }
    return (this.closed = e.closed), (this.curveType = e.curveType), (this.tension = e.tension), this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const i = this.points[t];
      e.points.push(i.toArray());
    }
    return (e.closed = this.closed), (e.curveType = this.curveType), (e.tension = this.tension), e;
  }
  fromJSON(e) {
    super.fromJSON(e), (this.points = []);
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(new N().fromArray(i));
    }
    return (this.closed = e.closed), (this.curveType = e.curveType), (this.tension = e.tension), this;
  }
}
function u0(r, e, t, n, i) {
  const s = (n - e) * 0.5,
    l = (i - t) * 0.5,
    c = r * r,
    u = r * c;
  return (2 * t - 2 * n + s + l) * u + (-3 * t + 3 * n - 2 * s - l) * c + s * r + t;
}
function OT(r, e) {
  const t = 1 - r;
  return t * t * e;
}
function BT(r, e) {
  return 2 * (1 - r) * r * e;
}
function zT(r, e) {
  return r * r * e;
}
function xa(r, e, t, n) {
  return OT(r, e) + BT(r, t) + zT(r, n);
}
function kT(r, e) {
  const t = 1 - r;
  return t * t * t * e;
}
function VT(r, e) {
  const t = 1 - r;
  return 3 * t * t * r * e;
}
function HT(r, e) {
  return 3 * (1 - r) * r * r * e;
}
function GT(r, e) {
  return r * r * r * e;
}
function ya(r, e, t, n, i) {
  return kT(r, e) + VT(r, t) + HT(r, n) + GT(r, i);
}
class sp extends Ti {
  constructor(e = new fe(), t = new fe(), n = new fe(), i = new fe()) {
    super(),
      (this.isCubicBezierCurve = !0),
      (this.type = "CubicBezierCurve"),
      (this.v0 = e),
      (this.v1 = t),
      (this.v2 = n),
      (this.v3 = i);
  }
  getPoint(e, t = new fe()) {
    const n = t,
      i = this.v0,
      s = this.v1,
      l = this.v2,
      c = this.v3;
    return n.set(ya(e, i.x, s.x, l.x, c.x), ya(e, i.y, s.y, l.y, c.y)), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return (
      (e.v0 = this.v0.toArray()), (e.v1 = this.v1.toArray()), (e.v2 = this.v2.toArray()), (e.v3 = this.v3.toArray()), e
    );
  }
  fromJSON(e) {
    return (
      super.fromJSON(e),
      this.v0.fromArray(e.v0),
      this.v1.fromArray(e.v1),
      this.v2.fromArray(e.v2),
      this.v3.fromArray(e.v3),
      this
    );
  }
}
class d_ extends Ti {
  constructor(e = new N(), t = new N(), n = new N(), i = new N()) {
    super(),
      (this.isCubicBezierCurve3 = !0),
      (this.type = "CubicBezierCurve3"),
      (this.v0 = e),
      (this.v1 = t),
      (this.v2 = n),
      (this.v3 = i);
  }
  getPoint(e, t = new N()) {
    const n = t,
      i = this.v0,
      s = this.v1,
      l = this.v2,
      c = this.v3;
    return n.set(ya(e, i.x, s.x, l.x, c.x), ya(e, i.y, s.y, l.y, c.y), ya(e, i.z, s.z, l.z, c.z)), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return (
      (e.v0 = this.v0.toArray()), (e.v1 = this.v1.toArray()), (e.v2 = this.v2.toArray()), (e.v3 = this.v3.toArray()), e
    );
  }
  fromJSON(e) {
    return (
      super.fromJSON(e),
      this.v0.fromArray(e.v0),
      this.v1.fromArray(e.v1),
      this.v2.fromArray(e.v2),
      this.v3.fromArray(e.v3),
      this
    );
  }
}
class op extends Ti {
  constructor(e = new fe(), t = new fe()) {
    super(), (this.isLineCurve = !0), (this.type = "LineCurve"), (this.v1 = e), (this.v2 = t);
  }
  getPoint(e, t = new fe()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new fe()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return (e.v1 = this.v1.toArray()), (e.v2 = this.v2.toArray()), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class p_ extends Ti {
  constructor(e = new N(), t = new N()) {
    super(), (this.isLineCurve3 = !0), (this.type = "LineCurve3"), (this.v1 = e), (this.v2 = t);
  }
  getPoint(e, t = new N()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new N()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return (e.v1 = this.v1.toArray()), (e.v2 = this.v2.toArray()), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class ap extends Ti {
  constructor(e = new fe(), t = new fe(), n = new fe()) {
    super(),
      (this.isQuadraticBezierCurve = !0),
      (this.type = "QuadraticBezierCurve"),
      (this.v0 = e),
      (this.v1 = t),
      (this.v2 = n);
  }
  getPoint(e, t = new fe()) {
    const n = t,
      i = this.v0,
      s = this.v1,
      l = this.v2;
    return n.set(xa(e, i.x, s.x, l.x), xa(e, i.y, s.y, l.y)), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return (e.v0 = this.v0.toArray()), (e.v1 = this.v1.toArray()), (e.v2 = this.v2.toArray()), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class lp extends Ti {
  constructor(e = new N(), t = new N(), n = new N()) {
    super(),
      (this.isQuadraticBezierCurve3 = !0),
      (this.type = "QuadraticBezierCurve3"),
      (this.v0 = e),
      (this.v1 = t),
      (this.v2 = n);
  }
  getPoint(e, t = new N()) {
    const n = t,
      i = this.v0,
      s = this.v1,
      l = this.v2;
    return n.set(xa(e, i.x, s.x, l.x), xa(e, i.y, s.y, l.y), xa(e, i.z, s.z, l.z)), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return (e.v0 = this.v0.toArray()), (e.v1 = this.v1.toArray()), (e.v2 = this.v2.toArray()), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class cp extends Ti {
  constructor(e = []) {
    super(), (this.isSplineCurve = !0), (this.type = "SplineCurve"), (this.points = e);
  }
  getPoint(e, t = new fe()) {
    const n = t,
      i = this.points,
      s = (i.length - 1) * e,
      l = Math.floor(s),
      c = s - l,
      u = i[l === 0 ? l : l - 1],
      h = i[l],
      d = i[l > i.length - 2 ? i.length - 1 : l + 1],
      p = i[l > i.length - 3 ? i.length - 1 : l + 2];
    return n.set(u0(c, u.x, h.x, d.x, p.x), u0(c, u.y, h.y, d.y, p.y)), n;
  }
  copy(e) {
    super.copy(e), (this.points = []);
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(i.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const i = this.points[t];
      e.points.push(i.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), (this.points = []);
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(new fe().fromArray(i));
    }
    return this;
  }
}
var Iu = Object.freeze({
  __proto__: null,
  ArcCurve: h_,
  CatmullRomCurve3: f_,
  CubicBezierCurve: sp,
  CubicBezierCurve3: d_,
  EllipseCurve: Ku,
  LineCurve: op,
  LineCurve3: p_,
  QuadraticBezierCurve: ap,
  QuadraticBezierCurve3: lp,
  SplineCurve: cp,
});
class m_ extends Ti {
  constructor() {
    super(), (this.type = "CurvePath"), (this.curves = []), (this.autoClose = !1);
  }
  add(e) {
    this.curves.push(e);
  }
  closePath() {
    const e = this.curves[0].getPoint(0),
      t = this.curves[this.curves.length - 1].getPoint(1);
    if (!e.equals(t)) {
      const n = e.isVector2 === !0 ? "LineCurve" : "LineCurve3";
      this.curves.push(new Iu[n](t, e));
    }
    return this;
  }
  getPoint(e, t) {
    const n = e * this.getLength(),
      i = this.getCurveLengths();
    let s = 0;
    for (; s < i.length; ) {
      if (i[s] >= n) {
        const l = i[s] - n,
          c = this.curves[s],
          u = c.getLength(),
          h = u === 0 ? 0 : 1 - l / u;
        return c.getPointAt(h, t);
      }
      s++;
    }
    return null;
  }
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  updateArcLengths() {
    (this.needsUpdate = !0), (this.cacheLengths = null), this.getCurveLengths();
  }
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
    const e = [];
    let t = 0;
    for (let n = 0, i = this.curves.length; n < i; n++) (t += this.curves[n].getLength()), e.push(t);
    return (this.cacheLengths = e), e;
  }
  getSpacedPoints(e = 40) {
    const t = [];
    for (let n = 0; n <= e; n++) t.push(this.getPoint(n / e));
    return this.autoClose && t.push(t[0]), t;
  }
  getPoints(e = 12) {
    const t = [];
    let n;
    for (let i = 0, s = this.curves; i < s.length; i++) {
      const l = s[i],
        c = l.isEllipseCurve ? e * 2 : l.isLineCurve || l.isLineCurve3 ? 1 : l.isSplineCurve ? e * l.points.length : e,
        u = l.getPoints(c);
      for (let h = 0; h < u.length; h++) {
        const d = u[h];
        (n && n.equals(d)) || (t.push(d), (n = d));
      }
    }
    return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
  }
  copy(e) {
    super.copy(e), (this.curves = []);
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const i = e.curves[t];
      this.curves.push(i.clone());
    }
    return (this.autoClose = e.autoClose), this;
  }
  toJSON() {
    const e = super.toJSON();
    (e.autoClose = this.autoClose), (e.curves = []);
    for (let t = 0, n = this.curves.length; t < n; t++) {
      const i = this.curves[t];
      e.curves.push(i.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), (this.autoClose = e.autoClose), (this.curves = []);
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const i = e.curves[t];
      this.curves.push(new Iu[i.type]().fromJSON(i));
    }
    return this;
  }
}
class Pa extends m_ {
  constructor(e) {
    super(), (this.type = "Path"), (this.currentPoint = new fe()), e && this.setFromPoints(e);
  }
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let t = 1, n = e.length; t < n; t++) this.lineTo(e[t].x, e[t].y);
    return this;
  }
  moveTo(e, t) {
    return this.currentPoint.set(e, t), this;
  }
  lineTo(e, t) {
    const n = new op(this.currentPoint.clone(), new fe(e, t));
    return this.curves.push(n), this.currentPoint.set(e, t), this;
  }
  quadraticCurveTo(e, t, n, i) {
    const s = new ap(this.currentPoint.clone(), new fe(e, t), new fe(n, i));
    return this.curves.push(s), this.currentPoint.set(n, i), this;
  }
  bezierCurveTo(e, t, n, i, s, l) {
    const c = new sp(this.currentPoint.clone(), new fe(e, t), new fe(n, i), new fe(s, l));
    return this.curves.push(c), this.currentPoint.set(s, l), this;
  }
  splineThru(e) {
    const t = [this.currentPoint.clone()].concat(e),
      n = new cp(t);
    return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this;
  }
  arc(e, t, n, i, s, l) {
    const c = this.currentPoint.x,
      u = this.currentPoint.y;
    return this.absarc(e + c, t + u, n, i, s, l), this;
  }
  absarc(e, t, n, i, s, l) {
    return this.absellipse(e, t, n, n, i, s, l), this;
  }
  ellipse(e, t, n, i, s, l, c, u) {
    const h = this.currentPoint.x,
      d = this.currentPoint.y;
    return this.absellipse(e + h, t + d, n, i, s, l, c, u), this;
  }
  absellipse(e, t, n, i, s, l, c, u) {
    const h = new Ku(e, t, n, i, s, l, c, u);
    if (this.curves.length > 0) {
      const p = h.getPoint(0);
      p.equals(this.currentPoint) || this.lineTo(p.x, p.y);
    }
    this.curves.push(h);
    const d = h.getPoint(1);
    return this.currentPoint.copy(d), this;
  }
  copy(e) {
    return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
  }
  toJSON() {
    const e = super.toJSON();
    return (e.currentPoint = this.currentPoint.toArray()), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
  }
}
class Xa extends vt {
  constructor(e = [new fe(0, -0.5), new fe(0.5, 0), new fe(0, 0.5)], t = 12, n = 0, i = Math.PI * 2) {
    super(),
      (this.type = "LatheGeometry"),
      (this.parameters = { points: e, segments: t, phiStart: n, phiLength: i }),
      (t = Math.floor(t)),
      (i = Jt(i, 0, Math.PI * 2));
    const s = [],
      l = [],
      c = [],
      u = [],
      h = [],
      d = 1 / t,
      p = new N(),
      m = new fe(),
      v = new N(),
      x = new N(),
      M = new N();
    let y = 0,
      _ = 0;
    for (let w = 0; w <= e.length - 1; w++)
      switch (w) {
        case 0:
          (y = e[w + 1].x - e[w].x),
            (_ = e[w + 1].y - e[w].y),
            (v.x = _ * 1),
            (v.y = -y),
            (v.z = _ * 0),
            M.copy(v),
            v.normalize(),
            u.push(v.x, v.y, v.z);
          break;
        case e.length - 1:
          u.push(M.x, M.y, M.z);
          break;
        default:
          (y = e[w + 1].x - e[w].x),
            (_ = e[w + 1].y - e[w].y),
            (v.x = _ * 1),
            (v.y = -y),
            (v.z = _ * 0),
            x.copy(v),
            (v.x += M.x),
            (v.y += M.y),
            (v.z += M.z),
            v.normalize(),
            u.push(v.x, v.y, v.z),
            M.copy(x);
      }
    for (let w = 0; w <= t; w++) {
      const E = n + w * d * i,
        A = Math.sin(E),
        O = Math.cos(E);
      for (let P = 0; P <= e.length - 1; P++) {
        (p.x = e[P].x * A),
          (p.y = e[P].y),
          (p.z = e[P].x * O),
          l.push(p.x, p.y, p.z),
          (m.x = w / t),
          (m.y = P / (e.length - 1)),
          c.push(m.x, m.y);
        const L = u[3 * P + 0] * A,
          F = u[3 * P + 1],
          C = u[3 * P + 0] * O;
        h.push(L, F, C);
      }
    }
    for (let w = 0; w < t; w++)
      for (let E = 0; E < e.length - 1; E++) {
        const A = E + w * e.length,
          O = A,
          P = A + e.length,
          L = A + e.length + 1,
          F = A + 1;
        s.push(O, P, F), s.push(L, F, P);
      }
    this.setIndex(s),
      this.setAttribute("position", new Xe(l, 3)),
      this.setAttribute("uv", new Xe(c, 2)),
      this.setAttribute("normal", new Xe(h, 3));
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  static fromJSON(e) {
    return new Xa(e.points, e.segments, e.phiStart, e.phiLength);
  }
}
class ju extends Xa {
  constructor(e = 1, t = 1, n = 4, i = 8) {
    const s = new Pa();
    s.absarc(0, -t / 2, e, Math.PI * 1.5, 0),
      s.absarc(0, t / 2, e, 0, Math.PI * 0.5),
      super(s.getPoints(n), i),
      (this.type = "CapsuleGeometry"),
      (this.parameters = { radius: e, length: t, capSegments: n, radialSegments: i });
  }
  static fromJSON(e) {
    return new ju(e.radius, e.length, e.capSegments, e.radialSegments);
  }
}
class Qu extends vt {
  constructor(e = 1, t = 32, n = 0, i = Math.PI * 2) {
    super(),
      (this.type = "CircleGeometry"),
      (this.parameters = { radius: e, segments: t, thetaStart: n, thetaLength: i }),
      (t = Math.max(3, t));
    const s = [],
      l = [],
      c = [],
      u = [],
      h = new N(),
      d = new fe();
    l.push(0, 0, 0), c.push(0, 0, 1), u.push(0.5, 0.5);
    for (let p = 0, m = 3; p <= t; p++, m += 3) {
      const v = n + (p / t) * i;
      (h.x = e * Math.cos(v)),
        (h.y = e * Math.sin(v)),
        l.push(h.x, h.y, h.z),
        c.push(0, 0, 1),
        (d.x = (l[m] / e + 1) / 2),
        (d.y = (l[m + 1] / e + 1) / 2),
        u.push(d.x, d.y);
    }
    for (let p = 1; p <= t; p++) s.push(p, p + 1, 0);
    this.setIndex(s),
      this.setAttribute("position", new Xe(l, 3)),
      this.setAttribute("normal", new Xe(c, 3)),
      this.setAttribute("uv", new Xe(u, 2));
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  static fromJSON(e) {
    return new Qu(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
}
class Co extends vt {
  constructor(e = 1, t = 1, n = 1, i = 32, s = 1, l = !1, c = 0, u = Math.PI * 2) {
    super(),
      (this.type = "CylinderGeometry"),
      (this.parameters = {
        radiusTop: e,
        radiusBottom: t,
        height: n,
        radialSegments: i,
        heightSegments: s,
        openEnded: l,
        thetaStart: c,
        thetaLength: u,
      });
    const h = this;
    (i = Math.floor(i)), (s = Math.floor(s));
    const d = [],
      p = [],
      m = [],
      v = [];
    let x = 0;
    const M = [],
      y = n / 2;
    let _ = 0;
    w(),
      l === !1 && (e > 0 && E(!0), t > 0 && E(!1)),
      this.setIndex(d),
      this.setAttribute("position", new Xe(p, 3)),
      this.setAttribute("normal", new Xe(m, 3)),
      this.setAttribute("uv", new Xe(v, 2));
    function w() {
      const A = new N(),
        O = new N();
      let P = 0;
      const L = (t - e) / n;
      for (let F = 0; F <= s; F++) {
        const C = [],
          b = F / s,
          D = b * (t - e) + e;
        for (let Y = 0; Y <= i; Y++) {
          const q = Y / i,
            K = q * u + c,
            ae = Math.sin(K),
            j = Math.cos(K);
          (O.x = D * ae),
            (O.y = -b * n + y),
            (O.z = D * j),
            p.push(O.x, O.y, O.z),
            A.set(ae, L, j).normalize(),
            m.push(A.x, A.y, A.z),
            v.push(q, 1 - b),
            C.push(x++);
        }
        M.push(C);
      }
      for (let F = 0; F < i; F++)
        for (let C = 0; C < s; C++) {
          const b = M[C][F],
            D = M[C + 1][F],
            Y = M[C + 1][F + 1],
            q = M[C][F + 1];
          (e > 0 || C !== 0) && (d.push(b, D, q), (P += 3)), (t > 0 || C !== s - 1) && (d.push(D, Y, q), (P += 3));
        }
      h.addGroup(_, P, 0), (_ += P);
    }
    function E(A) {
      const O = x,
        P = new fe(),
        L = new N();
      let F = 0;
      const C = A === !0 ? e : t,
        b = A === !0 ? 1 : -1;
      for (let Y = 1; Y <= i; Y++) p.push(0, y * b, 0), m.push(0, b, 0), v.push(0.5, 0.5), x++;
      const D = x;
      for (let Y = 0; Y <= i; Y++) {
        const K = (Y / i) * u + c,
          ae = Math.cos(K),
          j = Math.sin(K);
        (L.x = C * j),
          (L.y = y * b),
          (L.z = C * ae),
          p.push(L.x, L.y, L.z),
          m.push(0, b, 0),
          (P.x = ae * 0.5 + 0.5),
          (P.y = j * 0.5 * b + 0.5),
          v.push(P.x, P.y),
          x++;
      }
      for (let Y = 0; Y < i; Y++) {
        const q = O + Y,
          K = D + Y;
        A === !0 ? d.push(K, K + 1, q) : d.push(K + 1, K, q), (F += 3);
      }
      h.addGroup(_, F, A === !0 ? 1 : 2), (_ += F);
    }
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  static fromJSON(e) {
    return new Co(
      e.radiusTop,
      e.radiusBottom,
      e.height,
      e.radialSegments,
      e.heightSegments,
      e.openEnded,
      e.thetaStart,
      e.thetaLength
    );
  }
}
class $u extends Co {
  constructor(e = 1, t = 1, n = 32, i = 1, s = !1, l = 0, c = Math.PI * 2) {
    super(0, e, t, n, i, s, l, c),
      (this.type = "ConeGeometry"),
      (this.parameters = {
        radius: e,
        height: t,
        radialSegments: n,
        heightSegments: i,
        openEnded: s,
        thetaStart: l,
        thetaLength: c,
      });
  }
  static fromJSON(e) {
    return new $u(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class Nr extends vt {
  constructor(e = [], t = [], n = 1, i = 0) {
    super(), (this.type = "PolyhedronGeometry"), (this.parameters = { vertices: e, indices: t, radius: n, detail: i });
    const s = [],
      l = [];
    c(i),
      h(n),
      d(),
      this.setAttribute("position", new Xe(s, 3)),
      this.setAttribute("normal", new Xe(s.slice(), 3)),
      this.setAttribute("uv", new Xe(l, 2)),
      i === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function c(w) {
      const E = new N(),
        A = new N(),
        O = new N();
      for (let P = 0; P < t.length; P += 3) v(t[P + 0], E), v(t[P + 1], A), v(t[P + 2], O), u(E, A, O, w);
    }
    function u(w, E, A, O) {
      const P = O + 1,
        L = [];
      for (let F = 0; F <= P; F++) {
        L[F] = [];
        const C = w.clone().lerp(A, F / P),
          b = E.clone().lerp(A, F / P),
          D = P - F;
        for (let Y = 0; Y <= D; Y++) Y === 0 && F === P ? (L[F][Y] = C) : (L[F][Y] = C.clone().lerp(b, Y / D));
      }
      for (let F = 0; F < P; F++)
        for (let C = 0; C < 2 * (P - F) - 1; C++) {
          const b = Math.floor(C / 2);
          C % 2 === 0
            ? (m(L[F][b + 1]), m(L[F + 1][b]), m(L[F][b]))
            : (m(L[F][b + 1]), m(L[F + 1][b + 1]), m(L[F + 1][b]));
        }
    }
    function h(w) {
      const E = new N();
      for (let A = 0; A < s.length; A += 3)
        (E.x = s[A + 0]),
          (E.y = s[A + 1]),
          (E.z = s[A + 2]),
          E.normalize().multiplyScalar(w),
          (s[A + 0] = E.x),
          (s[A + 1] = E.y),
          (s[A + 2] = E.z);
    }
    function d() {
      const w = new N();
      for (let E = 0; E < s.length; E += 3) {
        (w.x = s[E + 0]), (w.y = s[E + 1]), (w.z = s[E + 2]);
        const A = y(w) / 2 / Math.PI + 0.5,
          O = _(w) / Math.PI + 0.5;
        l.push(A, 1 - O);
      }
      x(), p();
    }
    function p() {
      for (let w = 0; w < l.length; w += 6) {
        const E = l[w + 0],
          A = l[w + 2],
          O = l[w + 4],
          P = Math.max(E, A, O),
          L = Math.min(E, A, O);
        P > 0.9 && L < 0.1 && (E < 0.2 && (l[w + 0] += 1), A < 0.2 && (l[w + 2] += 1), O < 0.2 && (l[w + 4] += 1));
      }
    }
    function m(w) {
      s.push(w.x, w.y, w.z);
    }
    function v(w, E) {
      const A = w * 3;
      (E.x = e[A + 0]), (E.y = e[A + 1]), (E.z = e[A + 2]);
    }
    function x() {
      const w = new N(),
        E = new N(),
        A = new N(),
        O = new N(),
        P = new fe(),
        L = new fe(),
        F = new fe();
      for (let C = 0, b = 0; C < s.length; C += 9, b += 6) {
        w.set(s[C + 0], s[C + 1], s[C + 2]),
          E.set(s[C + 3], s[C + 4], s[C + 5]),
          A.set(s[C + 6], s[C + 7], s[C + 8]),
          P.set(l[b + 0], l[b + 1]),
          L.set(l[b + 2], l[b + 3]),
          F.set(l[b + 4], l[b + 5]),
          O.copy(w).add(E).add(A).divideScalar(3);
        const D = y(O);
        M(P, b + 0, w, D), M(L, b + 2, E, D), M(F, b + 4, A, D);
      }
    }
    function M(w, E, A, O) {
      O < 0 && w.x === 1 && (l[E] = w.x - 1), A.x === 0 && A.z === 0 && (l[E] = O / 2 / Math.PI + 0.5);
    }
    function y(w) {
      return Math.atan2(w.z, -w.x);
    }
    function _(w) {
      return Math.atan2(-w.y, Math.sqrt(w.x * w.x + w.z * w.z));
    }
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  static fromJSON(e) {
    return new Nr(e.vertices, e.indices, e.radius, e.details);
  }
}
class eh extends Nr {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2,
      i = 1 / n,
      s = [
        -1,
        -1,
        -1,
        -1,
        -1,
        1,
        -1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        -1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        0,
        -i,
        -n,
        0,
        -i,
        n,
        0,
        i,
        -n,
        0,
        i,
        n,
        -i,
        -n,
        0,
        -i,
        n,
        0,
        i,
        -n,
        0,
        i,
        n,
        0,
        -n,
        0,
        -i,
        n,
        0,
        -i,
        -n,
        0,
        i,
        n,
        0,
        i,
      ],
      l = [
        3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16,
        2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1,
        9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19,
        4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9,
      ];
    super(s, l, e, t), (this.type = "DodecahedronGeometry"), (this.parameters = { radius: e, detail: t });
  }
  static fromJSON(e) {
    return new eh(e.radius, e.detail);
  }
}
const Pc = new N(),
  Ic = new N(),
  td = new N(),
  Lc = new Xn();
class g_ extends vt {
  constructor(e = null, t = 1) {
    if ((super(), (this.type = "EdgesGeometry"), (this.parameters = { geometry: e, thresholdAngle: t }), e !== null)) {
      const i = Math.pow(10, 4),
        s = Math.cos(ms * t),
        l = e.getIndex(),
        c = e.getAttribute("position"),
        u = l ? l.count : c.count,
        h = [0, 0, 0],
        d = ["a", "b", "c"],
        p = new Array(3),
        m = {},
        v = [];
      for (let x = 0; x < u; x += 3) {
        l
          ? ((h[0] = l.getX(x)), (h[1] = l.getX(x + 1)), (h[2] = l.getX(x + 2)))
          : ((h[0] = x), (h[1] = x + 1), (h[2] = x + 2));
        const { a: M, b: y, c: _ } = Lc;
        if (
          (M.fromBufferAttribute(c, h[0]),
          y.fromBufferAttribute(c, h[1]),
          _.fromBufferAttribute(c, h[2]),
          Lc.getNormal(td),
          (p[0] = `${Math.round(M.x * i)},${Math.round(M.y * i)},${Math.round(M.z * i)}`),
          (p[1] = `${Math.round(y.x * i)},${Math.round(y.y * i)},${Math.round(y.z * i)}`),
          (p[2] = `${Math.round(_.x * i)},${Math.round(_.y * i)},${Math.round(_.z * i)}`),
          !(p[0] === p[1] || p[1] === p[2] || p[2] === p[0]))
        )
          for (let w = 0; w < 3; w++) {
            const E = (w + 1) % 3,
              A = p[w],
              O = p[E],
              P = Lc[d[w]],
              L = Lc[d[E]],
              F = `${A}_${O}`,
              C = `${O}_${A}`;
            C in m && m[C]
              ? (td.dot(m[C].normal) <= s && (v.push(P.x, P.y, P.z), v.push(L.x, L.y, L.z)), (m[C] = null))
              : F in m || (m[F] = { index0: h[w], index1: h[E], normal: td.clone() });
          }
      }
      for (const x in m)
        if (m[x]) {
          const { index0: M, index1: y } = m[x];
          Pc.fromBufferAttribute(c, M),
            Ic.fromBufferAttribute(c, y),
            v.push(Pc.x, Pc.y, Pc.z),
            v.push(Ic.x, Ic.y, Ic.z);
        }
      this.setAttribute("position", new Xe(v, 3));
    }
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
}
class vs extends Pa {
  constructor(e) {
    super(e), (this.uuid = ti()), (this.type = "Shape"), (this.holes = []);
  }
  getPointsHoles(e) {
    const t = [];
    for (let n = 0, i = this.holes.length; n < i; n++) t[n] = this.holes[n].getPoints(e);
    return t;
  }
  extractPoints(e) {
    return { shape: this.getPoints(e), holes: this.getPointsHoles(e) };
  }
  copy(e) {
    super.copy(e), (this.holes = []);
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const i = e.holes[t];
      this.holes.push(i.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    (e.uuid = this.uuid), (e.holes = []);
    for (let t = 0, n = this.holes.length; t < n; t++) {
      const i = this.holes[t];
      e.holes.push(i.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), (this.uuid = e.uuid), (this.holes = []);
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const i = e.holes[t];
      this.holes.push(new Pa().fromJSON(i));
    }
    return this;
  }
}
const WT = {
  triangulate: function (r, e, t = 2) {
    const n = e && e.length,
      i = n ? e[0] * t : r.length;
    let s = v_(r, 0, i, t, !0);
    const l = [];
    if (!s || s.next === s.prev) return l;
    let c, u, h, d, p, m, v;
    if ((n && (s = JT(r, e, s, t)), r.length > 80 * t)) {
      (c = h = r[0]), (u = d = r[1]);
      for (let x = t; x < i; x += t)
        (p = r[x]), (m = r[x + 1]), p < c && (c = p), m < u && (u = m), p > h && (h = p), m > d && (d = m);
      (v = Math.max(h - c, d - u)), (v = v !== 0 ? 32767 / v : 0);
    }
    return Ia(s, l, t, c, u, v, 0), l;
  },
};
function v_(r, e, t, n, i) {
  let s, l;
  if (i === oA(r, e, t, n) > 0) for (s = e; s < t; s += n) l = h0(s, r[s], r[s + 1], l);
  else for (s = t - n; s >= e; s -= n) l = h0(s, r[s], r[s + 1], l);
  return l && th(l, l.next) && (Da(l), (l = l.next)), l;
}
function Ms(r, e) {
  if (!r) return r;
  e || (e = r);
  let t = r,
    n;
  do
    if (((n = !1), !t.steiner && (th(t, t.next) || Yt(t.prev, t, t.next) === 0))) {
      if ((Da(t), (t = e = t.prev), t === t.next)) break;
      n = !0;
    } else t = t.next;
  while (n || t !== e);
  return e;
}
function Ia(r, e, t, n, i, s, l) {
  if (!r) return;
  !l && s && eA(r, n, i, s);
  let c = r,
    u,
    h;
  for (; r.prev !== r.next; ) {
    if (((u = r.prev), (h = r.next), s ? YT(r, n, i, s) : XT(r))) {
      e.push((u.i / t) | 0), e.push((r.i / t) | 0), e.push((h.i / t) | 0), Da(r), (r = h.next), (c = h.next);
      continue;
    }
    if (((r = h), r === c)) {
      l
        ? l === 1
          ? ((r = qT(Ms(r), e, t)), Ia(r, e, t, n, i, s, 2))
          : l === 2 && ZT(r, e, t, n, i, s)
        : Ia(Ms(r), e, t, n, i, s, 1);
      break;
    }
  }
}
function XT(r) {
  const e = r.prev,
    t = r,
    n = r.next;
  if (Yt(e, t, n) >= 0) return !1;
  const i = e.x,
    s = t.x,
    l = n.x,
    c = e.y,
    u = t.y,
    h = n.y,
    d = i < s ? (i < l ? i : l) : s < l ? s : l,
    p = c < u ? (c < h ? c : h) : u < h ? u : h,
    m = i > s ? (i > l ? i : l) : s > l ? s : l,
    v = c > u ? (c > h ? c : h) : u > h ? u : h;
  let x = n.next;
  for (; x !== e; ) {
    if (x.x >= d && x.x <= m && x.y >= p && x.y <= v && mo(i, c, s, u, l, h, x.x, x.y) && Yt(x.prev, x, x.next) >= 0)
      return !1;
    x = x.next;
  }
  return !0;
}
function YT(r, e, t, n) {
  const i = r.prev,
    s = r,
    l = r.next;
  if (Yt(i, s, l) >= 0) return !1;
  const c = i.x,
    u = s.x,
    h = l.x,
    d = i.y,
    p = s.y,
    m = l.y,
    v = c < u ? (c < h ? c : h) : u < h ? u : h,
    x = d < p ? (d < m ? d : m) : p < m ? p : m,
    M = c > u ? (c > h ? c : h) : u > h ? u : h,
    y = d > p ? (d > m ? d : m) : p > m ? p : m,
    _ = Td(v, x, e, t, n),
    w = Td(M, y, e, t, n);
  let E = r.prevZ,
    A = r.nextZ;
  for (; E && E.z >= _ && A && A.z <= w; ) {
    if (
      (E.x >= v &&
        E.x <= M &&
        E.y >= x &&
        E.y <= y &&
        E !== i &&
        E !== l &&
        mo(c, d, u, p, h, m, E.x, E.y) &&
        Yt(E.prev, E, E.next) >= 0) ||
      ((E = E.prevZ),
      A.x >= v &&
        A.x <= M &&
        A.y >= x &&
        A.y <= y &&
        A !== i &&
        A !== l &&
        mo(c, d, u, p, h, m, A.x, A.y) &&
        Yt(A.prev, A, A.next) >= 0)
    )
      return !1;
    A = A.nextZ;
  }
  for (; E && E.z >= _; ) {
    if (
      E.x >= v &&
      E.x <= M &&
      E.y >= x &&
      E.y <= y &&
      E !== i &&
      E !== l &&
      mo(c, d, u, p, h, m, E.x, E.y) &&
      Yt(E.prev, E, E.next) >= 0
    )
      return !1;
    E = E.prevZ;
  }
  for (; A && A.z <= w; ) {
    if (
      A.x >= v &&
      A.x <= M &&
      A.y >= x &&
      A.y <= y &&
      A !== i &&
      A !== l &&
      mo(c, d, u, p, h, m, A.x, A.y) &&
      Yt(A.prev, A, A.next) >= 0
    )
      return !1;
    A = A.nextZ;
  }
  return !0;
}
function qT(r, e, t) {
  let n = r;
  do {
    const i = n.prev,
      s = n.next.next;
    !th(i, s) &&
      __(i, n, n.next, s) &&
      La(i, s) &&
      La(s, i) &&
      (e.push((i.i / t) | 0), e.push((n.i / t) | 0), e.push((s.i / t) | 0), Da(n), Da(n.next), (n = r = s)),
      (n = n.next);
  } while (n !== r);
  return Ms(n);
}
function ZT(r, e, t, n, i, s) {
  let l = r;
  do {
    let c = l.next.next;
    for (; c !== l.prev; ) {
      if (l.i !== c.i && iA(l, c)) {
        let u = x_(l, c);
        (l = Ms(l, l.next)), (u = Ms(u, u.next)), Ia(l, e, t, n, i, s, 0), Ia(u, e, t, n, i, s, 0);
        return;
      }
      c = c.next;
    }
    l = l.next;
  } while (l !== r);
}
function JT(r, e, t, n) {
  const i = [];
  let s, l, c, u, h;
  for (s = 0, l = e.length; s < l; s++)
    (c = e[s] * n),
      (u = s < l - 1 ? e[s + 1] * n : r.length),
      (h = v_(r, c, u, n, !1)),
      h === h.next && (h.steiner = !0),
      i.push(nA(h));
  for (i.sort(KT), s = 0; s < i.length; s++) t = jT(i[s], t);
  return t;
}
function KT(r, e) {
  return r.x - e.x;
}
function jT(r, e) {
  const t = QT(r, e);
  if (!t) return e;
  const n = x_(t, r);
  return Ms(n, n.next), Ms(t, t.next);
}
function QT(r, e) {
  let t = e,
    n = -1 / 0,
    i;
  const s = r.x,
    l = r.y;
  do {
    if (l <= t.y && l >= t.next.y && t.next.y !== t.y) {
      const m = t.x + ((l - t.y) * (t.next.x - t.x)) / (t.next.y - t.y);
      if (m <= s && m > n && ((n = m), (i = t.x < t.next.x ? t : t.next), m === s)) return i;
    }
    t = t.next;
  } while (t !== e);
  if (!i) return null;
  const c = i,
    u = i.x,
    h = i.y;
  let d = 1 / 0,
    p;
  t = i;
  do
    s >= t.x &&
      t.x >= u &&
      s !== t.x &&
      mo(l < h ? s : n, l, u, h, l < h ? n : s, l, t.x, t.y) &&
      ((p = Math.abs(l - t.y) / (s - t.x)),
      La(t, r) && (p < d || (p === d && (t.x > i.x || (t.x === i.x && $T(i, t))))) && ((i = t), (d = p))),
      (t = t.next);
  while (t !== c);
  return i;
}
function $T(r, e) {
  return Yt(r.prev, r, e.prev) < 0 && Yt(e.next, r, r.next) < 0;
}
function eA(r, e, t, n) {
  let i = r;
  do i.z === 0 && (i.z = Td(i.x, i.y, e, t, n)), (i.prevZ = i.prev), (i.nextZ = i.next), (i = i.next);
  while (i !== r);
  (i.prevZ.nextZ = null), (i.prevZ = null), tA(i);
}
function tA(r) {
  let e,
    t,
    n,
    i,
    s,
    l,
    c,
    u,
    h = 1;
  do {
    for (t = r, r = null, s = null, l = 0; t; ) {
      for (l++, n = t, c = 0, e = 0; e < h && (c++, (n = n.nextZ), !!n); e++);
      for (u = h; c > 0 || (u > 0 && n); )
        c !== 0 && (u === 0 || !n || t.z <= n.z) ? ((i = t), (t = t.nextZ), c--) : ((i = n), (n = n.nextZ), u--),
          s ? (s.nextZ = i) : (r = i),
          (i.prevZ = s),
          (s = i);
      t = n;
    }
    (s.nextZ = null), (h *= 2);
  } while (l > 1);
  return r;
}
function Td(r, e, t, n, i) {
  return (
    (r = ((r - t) * i) | 0),
    (e = ((e - n) * i) | 0),
    (r = (r | (r << 8)) & 16711935),
    (r = (r | (r << 4)) & 252645135),
    (r = (r | (r << 2)) & 858993459),
    (r = (r | (r << 1)) & 1431655765),
    (e = (e | (e << 8)) & 16711935),
    (e = (e | (e << 4)) & 252645135),
    (e = (e | (e << 2)) & 858993459),
    (e = (e | (e << 1)) & 1431655765),
    r | (e << 1)
  );
}
function nA(r) {
  let e = r,
    t = r;
  do (e.x < t.x || (e.x === t.x && e.y < t.y)) && (t = e), (e = e.next);
  while (e !== r);
  return t;
}
function mo(r, e, t, n, i, s, l, c) {
  return (
    (i - l) * (e - c) >= (r - l) * (s - c) &&
    (r - l) * (n - c) >= (t - l) * (e - c) &&
    (t - l) * (s - c) >= (i - l) * (n - c)
  );
}
function iA(r, e) {
  return (
    r.next.i !== e.i &&
    r.prev.i !== e.i &&
    !rA(r, e) &&
    ((La(r, e) && La(e, r) && sA(r, e) && (Yt(r.prev, r, e.prev) || Yt(r, e.prev, e))) ||
      (th(r, e) && Yt(r.prev, r, r.next) > 0 && Yt(e.prev, e, e.next) > 0))
  );
}
function Yt(r, e, t) {
  return (e.y - r.y) * (t.x - e.x) - (e.x - r.x) * (t.y - e.y);
}
function th(r, e) {
  return r.x === e.x && r.y === e.y;
}
function __(r, e, t, n) {
  const i = Uc(Yt(r, e, t)),
    s = Uc(Yt(r, e, n)),
    l = Uc(Yt(t, n, r)),
    c = Uc(Yt(t, n, e));
  return !!(
    (i !== s && l !== c) ||
    (i === 0 && Dc(r, t, e)) ||
    (s === 0 && Dc(r, n, e)) ||
    (l === 0 && Dc(t, r, n)) ||
    (c === 0 && Dc(t, e, n))
  );
}
function Dc(r, e, t) {
  return (
    e.x <= Math.max(r.x, t.x) && e.x >= Math.min(r.x, t.x) && e.y <= Math.max(r.y, t.y) && e.y >= Math.min(r.y, t.y)
  );
}
function Uc(r) {
  return r > 0 ? 1 : r < 0 ? -1 : 0;
}
function rA(r, e) {
  let t = r;
  do {
    if (t.i !== r.i && t.next.i !== r.i && t.i !== e.i && t.next.i !== e.i && __(t, t.next, r, e)) return !0;
    t = t.next;
  } while (t !== r);
  return !1;
}
function La(r, e) {
  return Yt(r.prev, r, r.next) < 0
    ? Yt(r, e, r.next) >= 0 && Yt(r, r.prev, e) >= 0
    : Yt(r, e, r.prev) < 0 || Yt(r, r.next, e) < 0;
}
function sA(r, e) {
  let t = r,
    n = !1;
  const i = (r.x + e.x) / 2,
    s = (r.y + e.y) / 2;
  do
    t.y > s != t.next.y > s &&
      t.next.y !== t.y &&
      i < ((t.next.x - t.x) * (s - t.y)) / (t.next.y - t.y) + t.x &&
      (n = !n),
      (t = t.next);
  while (t !== r);
  return n;
}
function x_(r, e) {
  const t = new Ad(r.i, r.x, r.y),
    n = new Ad(e.i, e.x, e.y),
    i = r.next,
    s = e.prev;
  return (
    (r.next = e), (e.prev = r), (t.next = i), (i.prev = t), (n.next = t), (t.prev = n), (s.next = n), (n.prev = s), n
  );
}
function h0(r, e, t, n) {
  const i = new Ad(r, e, t);
  return n ? ((i.next = n.next), (i.prev = n), (n.next.prev = i), (n.next = i)) : ((i.prev = i), (i.next = i)), i;
}
function Da(r) {
  (r.next.prev = r.prev),
    (r.prev.next = r.next),
    r.prevZ && (r.prevZ.nextZ = r.nextZ),
    r.nextZ && (r.nextZ.prevZ = r.prevZ);
}
function Ad(r, e, t) {
  (this.i = r),
    (this.x = e),
    (this.y = t),
    (this.prev = null),
    (this.next = null),
    (this.z = 0),
    (this.prevZ = null),
    (this.nextZ = null),
    (this.steiner = !1);
}
function oA(r, e, t, n) {
  let i = 0;
  for (let s = e, l = t - n; s < t; s += n) (i += (r[l] - r[s]) * (r[s + 1] + r[l + 1])), (l = s);
  return i;
}
class Vi {
  static area(e) {
    const t = e.length;
    let n = 0;
    for (let i = t - 1, s = 0; s < t; i = s++) n += e[i].x * e[s].y - e[s].x * e[i].y;
    return n * 0.5;
  }
  static isClockWise(e) {
    return Vi.area(e) < 0;
  }
  static triangulateShape(e, t) {
    const n = [],
      i = [],
      s = [];
    f0(e), d0(n, e);
    let l = e.length;
    t.forEach(f0);
    for (let u = 0; u < t.length; u++) i.push(l), (l += t[u].length), d0(n, t[u]);
    const c = WT.triangulate(n, i);
    for (let u = 0; u < c.length; u += 3) s.push(c.slice(u, u + 3));
    return s;
  }
}
function f0(r) {
  const e = r.length;
  e > 2 && r[e - 1].equals(r[0]) && r.pop();
}
function d0(r, e) {
  for (let t = 0; t < e.length; t++) r.push(e[t].x), r.push(e[t].y);
}
class nh extends vt {
  constructor(e = new vs([new fe(0.5, 0.5), new fe(-0.5, 0.5), new fe(-0.5, -0.5), new fe(0.5, -0.5)]), t = {}) {
    super(),
      (this.type = "ExtrudeGeometry"),
      (this.parameters = { shapes: e, options: t }),
      (e = Array.isArray(e) ? e : [e]);
    const n = this,
      i = [],
      s = [];
    for (let c = 0, u = e.length; c < u; c++) {
      const h = e[c];
      l(h);
    }
    this.setAttribute("position", new Xe(i, 3)), this.setAttribute("uv", new Xe(s, 2)), this.computeVertexNormals();
    function l(c) {
      const u = [],
        h = t.curveSegments !== void 0 ? t.curveSegments : 12,
        d = t.steps !== void 0 ? t.steps : 1,
        p = t.depth !== void 0 ? t.depth : 1;
      let m = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0,
        v = t.bevelThickness !== void 0 ? t.bevelThickness : 0.2,
        x = t.bevelSize !== void 0 ? t.bevelSize : v - 0.1,
        M = t.bevelOffset !== void 0 ? t.bevelOffset : 0,
        y = t.bevelSegments !== void 0 ? t.bevelSegments : 3;
      const _ = t.extrudePath,
        w = t.UVGenerator !== void 0 ? t.UVGenerator : aA;
      let E,
        A = !1,
        O,
        P,
        L,
        F;
      _ &&
        ((E = _.getSpacedPoints(d)),
        (A = !0),
        (m = !1),
        (O = _.computeFrenetFrames(d, !1)),
        (P = new N()),
        (L = new N()),
        (F = new N())),
        m || ((y = 0), (v = 0), (x = 0), (M = 0));
      const C = c.extractPoints(h);
      let b = C.shape;
      const D = C.holes;
      if (!Vi.isClockWise(b)) {
        b = b.reverse();
        for (let ue = 0, pe = D.length; ue < pe; ue++) {
          const z = D[ue];
          Vi.isClockWise(z) && (D[ue] = z.reverse());
        }
      }
      const q = Vi.triangulateShape(b, D),
        K = b;
      for (let ue = 0, pe = D.length; ue < pe; ue++) {
        const z = D[ue];
        b = b.concat(z);
      }
      function ae(ue, pe, z) {
        return pe || console.error("THREE.ExtrudeGeometry: vec does not exist"), ue.clone().addScaledVector(pe, z);
      }
      const j = b.length,
        me = q.length;
      function k(ue, pe, z) {
        let qe, ve, Oe;
        const Me = ue.x - pe.x,
          tt = ue.y - pe.y,
          Ie = z.x - ue.x,
          U = z.y - ue.y,
          R = Me * Me + tt * tt,
          Z = Me * U - tt * Ie;
        if (Math.abs(Z) > Number.EPSILON) {
          const oe = Math.sqrt(R),
            de = Math.sqrt(Ie * Ie + U * U),
            le = pe.x - tt / oe,
            We = pe.y + Me / oe,
            Ee = z.x - U / de,
            Fe = z.y + Ie / de,
            Mt = ((Ee - le) * U - (Fe - We) * Ie) / (Me * U - tt * Ie);
          (qe = le + Me * Mt - ue.x), (ve = We + tt * Mt - ue.y);
          const _e = qe * qe + ve * ve;
          if (_e <= 2) return new fe(qe, ve);
          Oe = Math.sqrt(_e / 2);
        } else {
          let oe = !1;
          Me > Number.EPSILON
            ? Ie > Number.EPSILON && (oe = !0)
            : Me < -Number.EPSILON
              ? Ie < -Number.EPSILON && (oe = !0)
              : Math.sign(tt) === Math.sign(U) && (oe = !0),
            oe ? ((qe = -tt), (ve = Me), (Oe = Math.sqrt(R))) : ((qe = Me), (ve = tt), (Oe = Math.sqrt(R / 2)));
        }
        return new fe(qe / Oe, ve / Oe);
      }
      const ne = [];
      for (let ue = 0, pe = K.length, z = pe - 1, qe = ue + 1; ue < pe; ue++, z++, qe++)
        z === pe && (z = 0), qe === pe && (qe = 0), (ne[ue] = k(K[ue], K[z], K[qe]));
      const te = [];
      let ce,
        Ce = ne.concat();
      for (let ue = 0, pe = D.length; ue < pe; ue++) {
        const z = D[ue];
        ce = [];
        for (let qe = 0, ve = z.length, Oe = ve - 1, Me = qe + 1; qe < ve; qe++, Oe++, Me++)
          Oe === ve && (Oe = 0), Me === ve && (Me = 0), (ce[qe] = k(z[qe], z[Oe], z[Me]));
        te.push(ce), (Ce = Ce.concat(ce));
      }
      for (let ue = 0; ue < y; ue++) {
        const pe = ue / y,
          z = v * Math.cos((pe * Math.PI) / 2),
          qe = x * Math.sin((pe * Math.PI) / 2) + M;
        for (let ve = 0, Oe = K.length; ve < Oe; ve++) {
          const Me = ae(K[ve], ne[ve], qe);
          xe(Me.x, Me.y, -z);
        }
        for (let ve = 0, Oe = D.length; ve < Oe; ve++) {
          const Me = D[ve];
          ce = te[ve];
          for (let tt = 0, Ie = Me.length; tt < Ie; tt++) {
            const U = ae(Me[tt], ce[tt], qe);
            xe(U.x, U.y, -z);
          }
        }
      }
      const Ye = x + M;
      for (let ue = 0; ue < j; ue++) {
        const pe = m ? ae(b[ue], Ce[ue], Ye) : b[ue];
        A
          ? (L.copy(O.normals[0]).multiplyScalar(pe.x),
            P.copy(O.binormals[0]).multiplyScalar(pe.y),
            F.copy(E[0]).add(L).add(P),
            xe(F.x, F.y, F.z))
          : xe(pe.x, pe.y, 0);
      }
      for (let ue = 1; ue <= d; ue++)
        for (let pe = 0; pe < j; pe++) {
          const z = m ? ae(b[pe], Ce[pe], Ye) : b[pe];
          A
            ? (L.copy(O.normals[ue]).multiplyScalar(z.x),
              P.copy(O.binormals[ue]).multiplyScalar(z.y),
              F.copy(E[ue]).add(L).add(P),
              xe(F.x, F.y, F.z))
            : xe(z.x, z.y, (p / d) * ue);
        }
      for (let ue = y - 1; ue >= 0; ue--) {
        const pe = ue / y,
          z = v * Math.cos((pe * Math.PI) / 2),
          qe = x * Math.sin((pe * Math.PI) / 2) + M;
        for (let ve = 0, Oe = K.length; ve < Oe; ve++) {
          const Me = ae(K[ve], ne[ve], qe);
          xe(Me.x, Me.y, p + z);
        }
        for (let ve = 0, Oe = D.length; ve < Oe; ve++) {
          const Me = D[ve];
          ce = te[ve];
          for (let tt = 0, Ie = Me.length; tt < Ie; tt++) {
            const U = ae(Me[tt], ce[tt], qe);
            A ? xe(U.x, U.y + E[d - 1].y, E[d - 1].x + z) : xe(U.x, U.y, p + z);
          }
        }
      }
      re(), ge();
      function re() {
        const ue = i.length / 3;
        if (m) {
          let pe = 0,
            z = j * pe;
          for (let qe = 0; qe < me; qe++) {
            const ve = q[qe];
            je(ve[2] + z, ve[1] + z, ve[0] + z);
          }
          (pe = d + y * 2), (z = j * pe);
          for (let qe = 0; qe < me; qe++) {
            const ve = q[qe];
            je(ve[0] + z, ve[1] + z, ve[2] + z);
          }
        } else {
          for (let pe = 0; pe < me; pe++) {
            const z = q[pe];
            je(z[2], z[1], z[0]);
          }
          for (let pe = 0; pe < me; pe++) {
            const z = q[pe];
            je(z[0] + j * d, z[1] + j * d, z[2] + j * d);
          }
        }
        n.addGroup(ue, i.length / 3 - ue, 0);
      }
      function ge() {
        const ue = i.length / 3;
        let pe = 0;
        De(K, pe), (pe += K.length);
        for (let z = 0, qe = D.length; z < qe; z++) {
          const ve = D[z];
          De(ve, pe), (pe += ve.length);
        }
        n.addGroup(ue, i.length / 3 - ue, 1);
      }
      function De(ue, pe) {
        let z = ue.length;
        for (; --z >= 0; ) {
          const qe = z;
          let ve = z - 1;
          ve < 0 && (ve = ue.length - 1);
          for (let Oe = 0, Me = d + y * 2; Oe < Me; Oe++) {
            const tt = j * Oe,
              Ie = j * (Oe + 1),
              U = pe + qe + tt,
              R = pe + ve + tt,
              Z = pe + ve + Ie,
              oe = pe + qe + Ie;
            it(U, R, Z, oe);
          }
        }
      }
      function xe(ue, pe, z) {
        u.push(ue), u.push(pe), u.push(z);
      }
      function je(ue, pe, z) {
        Qe(ue), Qe(pe), Qe(z);
        const qe = i.length / 3,
          ve = w.generateTopUV(n, i, qe - 3, qe - 2, qe - 1);
        at(ve[0]), at(ve[1]), at(ve[2]);
      }
      function it(ue, pe, z, qe) {
        Qe(ue), Qe(pe), Qe(qe), Qe(pe), Qe(z), Qe(qe);
        const ve = i.length / 3,
          Oe = w.generateSideWallUV(n, i, ve - 6, ve - 3, ve - 2, ve - 1);
        at(Oe[0]), at(Oe[1]), at(Oe[3]), at(Oe[1]), at(Oe[2]), at(Oe[3]);
      }
      function Qe(ue) {
        i.push(u[ue * 3 + 0]), i.push(u[ue * 3 + 1]), i.push(u[ue * 3 + 2]);
      }
      function at(ue) {
        s.push(ue.x), s.push(ue.y);
      }
    }
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  toJSON() {
    const e = super.toJSON(),
      t = this.parameters.shapes,
      n = this.parameters.options;
    return lA(t, n, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let s = 0, l = e.shapes.length; s < l; s++) {
      const c = t[e.shapes[s]];
      n.push(c);
    }
    const i = e.options.extrudePath;
    return i !== void 0 && (e.options.extrudePath = new Iu[i.type]().fromJSON(i)), new nh(n, e.options);
  }
}
const aA = {
  generateTopUV: function (r, e, t, n, i) {
    const s = e[t * 3],
      l = e[t * 3 + 1],
      c = e[n * 3],
      u = e[n * 3 + 1],
      h = e[i * 3],
      d = e[i * 3 + 1];
    return [new fe(s, l), new fe(c, u), new fe(h, d)];
  },
  generateSideWallUV: function (r, e, t, n, i, s) {
    const l = e[t * 3],
      c = e[t * 3 + 1],
      u = e[t * 3 + 2],
      h = e[n * 3],
      d = e[n * 3 + 1],
      p = e[n * 3 + 2],
      m = e[i * 3],
      v = e[i * 3 + 1],
      x = e[i * 3 + 2],
      M = e[s * 3],
      y = e[s * 3 + 1],
      _ = e[s * 3 + 2];
    return Math.abs(c - d) < Math.abs(l - h)
      ? [new fe(l, 1 - u), new fe(h, 1 - p), new fe(m, 1 - x), new fe(M, 1 - _)]
      : [new fe(c, 1 - u), new fe(d, 1 - p), new fe(v, 1 - x), new fe(y, 1 - _)];
  },
};
function lA(r, e, t) {
  if (((t.shapes = []), Array.isArray(r)))
    for (let n = 0, i = r.length; n < i; n++) {
      const s = r[n];
      t.shapes.push(s.uuid);
    }
  else t.shapes.push(r.uuid);
  return (
    (t.options = Object.assign({}, e)), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t
  );
}
class ih extends Nr {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2,
      i = [
        -1,
        n,
        0,
        1,
        n,
        0,
        -1,
        -n,
        0,
        1,
        -n,
        0,
        0,
        -1,
        n,
        0,
        1,
        n,
        0,
        -1,
        -n,
        0,
        1,
        -n,
        n,
        0,
        -1,
        n,
        0,
        1,
        -n,
        0,
        -1,
        -n,
        0,
        1,
      ],
      s = [
        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4,
        2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1,
      ];
    super(i, s, e, t), (this.type = "IcosahedronGeometry"), (this.parameters = { radius: e, detail: t });
  }
  static fromJSON(e) {
    return new ih(e.radius, e.detail);
  }
}
class Ya extends Nr {
  constructor(e = 1, t = 0) {
    const n = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1],
      i = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];
    super(n, i, e, t), (this.type = "OctahedronGeometry"), (this.parameters = { radius: e, detail: t });
  }
  static fromJSON(e) {
    return new Ya(e.radius, e.detail);
  }
}
class rh extends vt {
  constructor(e = 0.5, t = 1, n = 32, i = 1, s = 0, l = Math.PI * 2) {
    super(),
      (this.type = "RingGeometry"),
      (this.parameters = {
        innerRadius: e,
        outerRadius: t,
        thetaSegments: n,
        phiSegments: i,
        thetaStart: s,
        thetaLength: l,
      }),
      (n = Math.max(3, n)),
      (i = Math.max(1, i));
    const c = [],
      u = [],
      h = [],
      d = [];
    let p = e;
    const m = (t - e) / i,
      v = new N(),
      x = new fe();
    for (let M = 0; M <= i; M++) {
      for (let y = 0; y <= n; y++) {
        const _ = s + (y / n) * l;
        (v.x = p * Math.cos(_)),
          (v.y = p * Math.sin(_)),
          u.push(v.x, v.y, v.z),
          h.push(0, 0, 1),
          (x.x = (v.x / t + 1) / 2),
          (x.y = (v.y / t + 1) / 2),
          d.push(x.x, x.y);
      }
      p += m;
    }
    for (let M = 0; M < i; M++) {
      const y = M * (n + 1);
      for (let _ = 0; _ < n; _++) {
        const w = _ + y,
          E = w,
          A = w + n + 1,
          O = w + n + 2,
          P = w + 1;
        c.push(E, A, P), c.push(A, O, P);
      }
    }
    this.setIndex(c),
      this.setAttribute("position", new Xe(u, 3)),
      this.setAttribute("normal", new Xe(h, 3)),
      this.setAttribute("uv", new Xe(d, 2));
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  static fromJSON(e) {
    return new rh(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
}
class sh extends vt {
  constructor(e = new vs([new fe(0, 0.5), new fe(-0.5, -0.5), new fe(0.5, -0.5)]), t = 12) {
    super(), (this.type = "ShapeGeometry"), (this.parameters = { shapes: e, curveSegments: t });
    const n = [],
      i = [],
      s = [],
      l = [];
    let c = 0,
      u = 0;
    if (Array.isArray(e) === !1) h(e);
    else for (let d = 0; d < e.length; d++) h(e[d]), this.addGroup(c, u, d), (c += u), (u = 0);
    this.setIndex(n),
      this.setAttribute("position", new Xe(i, 3)),
      this.setAttribute("normal", new Xe(s, 3)),
      this.setAttribute("uv", new Xe(l, 2));
    function h(d) {
      const p = i.length / 3,
        m = d.extractPoints(t);
      let v = m.shape;
      const x = m.holes;
      Vi.isClockWise(v) === !1 && (v = v.reverse());
      for (let y = 0, _ = x.length; y < _; y++) {
        const w = x[y];
        Vi.isClockWise(w) === !0 && (x[y] = w.reverse());
      }
      const M = Vi.triangulateShape(v, x);
      for (let y = 0, _ = x.length; y < _; y++) {
        const w = x[y];
        v = v.concat(w);
      }
      for (let y = 0, _ = v.length; y < _; y++) {
        const w = v[y];
        i.push(w.x, w.y, 0), s.push(0, 0, 1), l.push(w.x, w.y);
      }
      for (let y = 0, _ = M.length; y < _; y++) {
        const w = M[y],
          E = w[0] + p,
          A = w[1] + p,
          O = w[2] + p;
        n.push(E, A, O), (u += 3);
      }
    }
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  toJSON() {
    const e = super.toJSON(),
      t = this.parameters.shapes;
    return cA(t, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let i = 0, s = e.shapes.length; i < s; i++) {
      const l = t[e.shapes[i]];
      n.push(l);
    }
    return new sh(n, e.curveSegments);
  }
}
function cA(r, e) {
  if (((e.shapes = []), Array.isArray(r)))
    for (let t = 0, n = r.length; t < n; t++) {
      const i = r[t];
      e.shapes.push(i.uuid);
    }
  else e.shapes.push(r.uuid);
  return e;
}
class qa extends vt {
  constructor(e = 1, t = 32, n = 16, i = 0, s = Math.PI * 2, l = 0, c = Math.PI) {
    super(),
      (this.type = "SphereGeometry"),
      (this.parameters = {
        radius: e,
        widthSegments: t,
        heightSegments: n,
        phiStart: i,
        phiLength: s,
        thetaStart: l,
        thetaLength: c,
      }),
      (t = Math.max(3, Math.floor(t))),
      (n = Math.max(2, Math.floor(n)));
    const u = Math.min(l + c, Math.PI);
    let h = 0;
    const d = [],
      p = new N(),
      m = new N(),
      v = [],
      x = [],
      M = [],
      y = [];
    for (let _ = 0; _ <= n; _++) {
      const w = [],
        E = _ / n;
      let A = 0;
      _ === 0 && l === 0 ? (A = 0.5 / t) : _ === n && u === Math.PI && (A = -0.5 / t);
      for (let O = 0; O <= t; O++) {
        const P = O / t;
        (p.x = -e * Math.cos(i + P * s) * Math.sin(l + E * c)),
          (p.y = e * Math.cos(l + E * c)),
          (p.z = e * Math.sin(i + P * s) * Math.sin(l + E * c)),
          x.push(p.x, p.y, p.z),
          m.copy(p).normalize(),
          M.push(m.x, m.y, m.z),
          y.push(P + A, 1 - E),
          w.push(h++);
      }
      d.push(w);
    }
    for (let _ = 0; _ < n; _++)
      for (let w = 0; w < t; w++) {
        const E = d[_][w + 1],
          A = d[_][w],
          O = d[_ + 1][w],
          P = d[_ + 1][w + 1];
        (_ !== 0 || l > 0) && v.push(E, A, P), (_ !== n - 1 || u < Math.PI) && v.push(A, O, P);
      }
    this.setIndex(v),
      this.setAttribute("position", new Xe(x, 3)),
      this.setAttribute("normal", new Xe(M, 3)),
      this.setAttribute("uv", new Xe(y, 2));
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  static fromJSON(e) {
    return new qa(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
}
class oh extends Nr {
  constructor(e = 1, t = 0) {
    const n = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1],
      i = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];
    super(n, i, e, t), (this.type = "TetrahedronGeometry"), (this.parameters = { radius: e, detail: t });
  }
  static fromJSON(e) {
    return new oh(e.radius, e.detail);
  }
}
class ah extends vt {
  constructor(e = 1, t = 0.4, n = 12, i = 48, s = Math.PI * 2) {
    super(),
      (this.type = "TorusGeometry"),
      (this.parameters = { radius: e, tube: t, radialSegments: n, tubularSegments: i, arc: s }),
      (n = Math.floor(n)),
      (i = Math.floor(i));
    const l = [],
      c = [],
      u = [],
      h = [],
      d = new N(),
      p = new N(),
      m = new N();
    for (let v = 0; v <= n; v++)
      for (let x = 0; x <= i; x++) {
        const M = (x / i) * s,
          y = (v / n) * Math.PI * 2;
        (p.x = (e + t * Math.cos(y)) * Math.cos(M)),
          (p.y = (e + t * Math.cos(y)) * Math.sin(M)),
          (p.z = t * Math.sin(y)),
          c.push(p.x, p.y, p.z),
          (d.x = e * Math.cos(M)),
          (d.y = e * Math.sin(M)),
          m.subVectors(p, d).normalize(),
          u.push(m.x, m.y, m.z),
          h.push(x / i),
          h.push(v / n);
      }
    for (let v = 1; v <= n; v++)
      for (let x = 1; x <= i; x++) {
        const M = (i + 1) * v + x - 1,
          y = (i + 1) * (v - 1) + x - 1,
          _ = (i + 1) * (v - 1) + x,
          w = (i + 1) * v + x;
        l.push(M, y, w), l.push(y, _, w);
      }
    this.setIndex(l),
      this.setAttribute("position", new Xe(c, 3)),
      this.setAttribute("normal", new Xe(u, 3)),
      this.setAttribute("uv", new Xe(h, 2));
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  static fromJSON(e) {
    return new ah(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class lh extends vt {
  constructor(e = 1, t = 0.4, n = 64, i = 8, s = 2, l = 3) {
    super(),
      (this.type = "TorusKnotGeometry"),
      (this.parameters = { radius: e, tube: t, tubularSegments: n, radialSegments: i, p: s, q: l }),
      (n = Math.floor(n)),
      (i = Math.floor(i));
    const c = [],
      u = [],
      h = [],
      d = [],
      p = new N(),
      m = new N(),
      v = new N(),
      x = new N(),
      M = new N(),
      y = new N(),
      _ = new N();
    for (let E = 0; E <= n; ++E) {
      const A = (E / n) * s * Math.PI * 2;
      w(A, s, l, e, v),
        w(A + 0.01, s, l, e, x),
        y.subVectors(x, v),
        _.addVectors(x, v),
        M.crossVectors(y, _),
        _.crossVectors(M, y),
        M.normalize(),
        _.normalize();
      for (let O = 0; O <= i; ++O) {
        const P = (O / i) * Math.PI * 2,
          L = -t * Math.cos(P),
          F = t * Math.sin(P);
        (p.x = v.x + (L * _.x + F * M.x)),
          (p.y = v.y + (L * _.y + F * M.y)),
          (p.z = v.z + (L * _.z + F * M.z)),
          u.push(p.x, p.y, p.z),
          m.subVectors(p, v).normalize(),
          h.push(m.x, m.y, m.z),
          d.push(E / n),
          d.push(O / i);
      }
    }
    for (let E = 1; E <= n; E++)
      for (let A = 1; A <= i; A++) {
        const O = (i + 1) * (E - 1) + (A - 1),
          P = (i + 1) * E + (A - 1),
          L = (i + 1) * E + A,
          F = (i + 1) * (E - 1) + A;
        c.push(O, P, F), c.push(P, L, F);
      }
    this.setIndex(c),
      this.setAttribute("position", new Xe(u, 3)),
      this.setAttribute("normal", new Xe(h, 3)),
      this.setAttribute("uv", new Xe(d, 2));
    function w(E, A, O, P, L) {
      const F = Math.cos(E),
        C = Math.sin(E),
        b = (O / A) * E,
        D = Math.cos(b);
      (L.x = P * (2 + D) * 0.5 * F), (L.y = P * (2 + D) * C * 0.5), (L.z = P * Math.sin(b) * 0.5);
    }
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  static fromJSON(e) {
    return new lh(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
}
class ch extends vt {
  constructor(e = new lp(new N(-1, -1, 0), new N(-1, 1, 0), new N(1, 1, 0)), t = 64, n = 1, i = 8, s = !1) {
    super(),
      (this.type = "TubeGeometry"),
      (this.parameters = { path: e, tubularSegments: t, radius: n, radialSegments: i, closed: s });
    const l = e.computeFrenetFrames(t, s);
    (this.tangents = l.tangents), (this.normals = l.normals), (this.binormals = l.binormals);
    const c = new N(),
      u = new N(),
      h = new fe();
    let d = new N();
    const p = [],
      m = [],
      v = [],
      x = [];
    M(),
      this.setIndex(x),
      this.setAttribute("position", new Xe(p, 3)),
      this.setAttribute("normal", new Xe(m, 3)),
      this.setAttribute("uv", new Xe(v, 2));
    function M() {
      for (let E = 0; E < t; E++) y(E);
      y(s === !1 ? t : 0), w(), _();
    }
    function y(E) {
      d = e.getPointAt(E / t, d);
      const A = l.normals[E],
        O = l.binormals[E];
      for (let P = 0; P <= i; P++) {
        const L = (P / i) * Math.PI * 2,
          F = Math.sin(L),
          C = -Math.cos(L);
        (u.x = C * A.x + F * O.x),
          (u.y = C * A.y + F * O.y),
          (u.z = C * A.z + F * O.z),
          u.normalize(),
          m.push(u.x, u.y, u.z),
          (c.x = d.x + n * u.x),
          (c.y = d.y + n * u.y),
          (c.z = d.z + n * u.z),
          p.push(c.x, c.y, c.z);
      }
    }
    function _() {
      for (let E = 1; E <= t; E++)
        for (let A = 1; A <= i; A++) {
          const O = (i + 1) * (E - 1) + (A - 1),
            P = (i + 1) * E + (A - 1),
            L = (i + 1) * E + A,
            F = (i + 1) * (E - 1) + A;
          x.push(O, P, F), x.push(P, L, F);
        }
    }
    function w() {
      for (let E = 0; E <= t; E++) for (let A = 0; A <= i; A++) (h.x = E / t), (h.y = A / i), v.push(h.x, h.y);
    }
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
  toJSON() {
    const e = super.toJSON();
    return (e.path = this.parameters.path.toJSON()), e;
  }
  static fromJSON(e) {
    return new ch(new Iu[e.path.type]().fromJSON(e.path), e.tubularSegments, e.radius, e.radialSegments, e.closed);
  }
}
class y_ extends vt {
  constructor(e = null) {
    if ((super(), (this.type = "WireframeGeometry"), (this.parameters = { geometry: e }), e !== null)) {
      const t = [],
        n = new Set(),
        i = new N(),
        s = new N();
      if (e.index !== null) {
        const l = e.attributes.position,
          c = e.index;
        let u = e.groups;
        u.length === 0 && (u = [{ start: 0, count: c.count, materialIndex: 0 }]);
        for (let h = 0, d = u.length; h < d; ++h) {
          const p = u[h],
            m = p.start,
            v = p.count;
          for (let x = m, M = m + v; x < M; x += 3)
            for (let y = 0; y < 3; y++) {
              const _ = c.getX(x + y),
                w = c.getX(x + ((y + 1) % 3));
              i.fromBufferAttribute(l, _),
                s.fromBufferAttribute(l, w),
                p0(i, s, n) === !0 && (t.push(i.x, i.y, i.z), t.push(s.x, s.y, s.z));
            }
        }
      } else {
        const l = e.attributes.position;
        for (let c = 0, u = l.count / 3; c < u; c++)
          for (let h = 0; h < 3; h++) {
            const d = 3 * c + h,
              p = 3 * c + ((h + 1) % 3);
            i.fromBufferAttribute(l, d),
              s.fromBufferAttribute(l, p),
              p0(i, s, n) === !0 && (t.push(i.x, i.y, i.z), t.push(s.x, s.y, s.z));
          }
      }
      this.setAttribute("position", new Xe(t, 3));
    }
  }
  copy(e) {
    return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
  }
}
function p0(r, e, t) {
  const n = `${r.x},${r.y},${r.z}-${e.x},${e.y},${e.z}`,
    i = `${e.x},${e.y},${e.z}-${r.x},${r.y},${r.z}`;
  return t.has(n) === !0 || t.has(i) === !0 ? !1 : (t.add(n), t.add(i), !0);
}
var m0 = Object.freeze({
  __proto__: null,
  BoxGeometry: Es,
  CapsuleGeometry: ju,
  CircleGeometry: Qu,
  ConeGeometry: $u,
  CylinderGeometry: Co,
  DodecahedronGeometry: eh,
  EdgesGeometry: g_,
  ExtrudeGeometry: nh,
  IcosahedronGeometry: ih,
  LatheGeometry: Xa,
  OctahedronGeometry: Ya,
  PlaneGeometry: Ao,
  PolyhedronGeometry: Nr,
  RingGeometry: rh,
  ShapeGeometry: sh,
  SphereGeometry: qa,
  TetrahedronGeometry: oh,
  TorusGeometry: ah,
  TorusKnotGeometry: lh,
  TubeGeometry: ch,
  WireframeGeometry: y_,
});
class S_ extends Cn {
  static get type() {
    return "ShadowMaterial";
  }
  constructor(e) {
    super(),
      (this.isShadowMaterial = !0),
      (this.color = new Ne(0)),
      (this.transparent = !0),
      (this.fog = !0),
      this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), (this.fog = e.fog), this;
  }
}
class M_ extends Ei {
  static get type() {
    return "RawShaderMaterial";
  }
  constructor(e) {
    super(e), (this.isRawShaderMaterial = !0);
  }
}
class up extends Cn {
  static get type() {
    return "MeshStandardMaterial";
  }
  constructor(e) {
    super(),
      (this.isMeshStandardMaterial = !0),
      (this.defines = { STANDARD: "" }),
      (this.color = new Ne(16777215)),
      (this.roughness = 1),
      (this.metalness = 0),
      (this.map = null),
      (this.lightMap = null),
      (this.lightMapIntensity = 1),
      (this.aoMap = null),
      (this.aoMapIntensity = 1),
      (this.emissive = new Ne(0)),
      (this.emissiveIntensity = 1),
      (this.emissiveMap = null),
      (this.bumpMap = null),
      (this.bumpScale = 1),
      (this.normalMap = null),
      (this.normalMapType = Dr),
      (this.normalScale = new fe(1, 1)),
      (this.displacementMap = null),
      (this.displacementScale = 1),
      (this.displacementBias = 0),
      (this.roughnessMap = null),
      (this.metalnessMap = null),
      (this.alphaMap = null),
      (this.envMap = null),
      (this.envMapRotation = new ni()),
      (this.envMapIntensity = 1),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.wireframeLinecap = "round"),
      (this.wireframeLinejoin = "round"),
      (this.flatShading = !1),
      (this.fog = !0),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      (this.defines = { STANDARD: "" }),
      this.color.copy(e.color),
      (this.roughness = e.roughness),
      (this.metalness = e.metalness),
      (this.map = e.map),
      (this.lightMap = e.lightMap),
      (this.lightMapIntensity = e.lightMapIntensity),
      (this.aoMap = e.aoMap),
      (this.aoMapIntensity = e.aoMapIntensity),
      this.emissive.copy(e.emissive),
      (this.emissiveMap = e.emissiveMap),
      (this.emissiveIntensity = e.emissiveIntensity),
      (this.bumpMap = e.bumpMap),
      (this.bumpScale = e.bumpScale),
      (this.normalMap = e.normalMap),
      (this.normalMapType = e.normalMapType),
      this.normalScale.copy(e.normalScale),
      (this.displacementMap = e.displacementMap),
      (this.displacementScale = e.displacementScale),
      (this.displacementBias = e.displacementBias),
      (this.roughnessMap = e.roughnessMap),
      (this.metalnessMap = e.metalnessMap),
      (this.alphaMap = e.alphaMap),
      (this.envMap = e.envMap),
      this.envMapRotation.copy(e.envMapRotation),
      (this.envMapIntensity = e.envMapIntensity),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.wireframeLinecap = e.wireframeLinecap),
      (this.wireframeLinejoin = e.wireframeLinejoin),
      (this.flatShading = e.flatShading),
      (this.fog = e.fog),
      this
    );
  }
}
class w_ extends up {
  static get type() {
    return "MeshPhysicalMaterial";
  }
  constructor(e) {
    super(),
      (this.isMeshPhysicalMaterial = !0),
      (this.defines = { STANDARD: "", PHYSICAL: "" }),
      (this.anisotropyRotation = 0),
      (this.anisotropyMap = null),
      (this.clearcoatMap = null),
      (this.clearcoatRoughness = 0),
      (this.clearcoatRoughnessMap = null),
      (this.clearcoatNormalScale = new fe(1, 1)),
      (this.clearcoatNormalMap = null),
      (this.ior = 1.5),
      Object.defineProperty(this, "reflectivity", {
        get: function () {
          return Jt((2.5 * (this.ior - 1)) / (this.ior + 1), 0, 1);
        },
        set: function (t) {
          this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
        },
      }),
      (this.iridescenceMap = null),
      (this.iridescenceIOR = 1.3),
      (this.iridescenceThicknessRange = [100, 400]),
      (this.iridescenceThicknessMap = null),
      (this.sheenColor = new Ne(0)),
      (this.sheenColorMap = null),
      (this.sheenRoughness = 1),
      (this.sheenRoughnessMap = null),
      (this.transmissionMap = null),
      (this.thickness = 0),
      (this.thicknessMap = null),
      (this.attenuationDistance = 1 / 0),
      (this.attenuationColor = new Ne(1, 1, 1)),
      (this.specularIntensity = 1),
      (this.specularIntensityMap = null),
      (this.specularColor = new Ne(1, 1, 1)),
      (this.specularColorMap = null),
      (this._anisotropy = 0),
      (this._clearcoat = 0),
      (this._dispersion = 0),
      (this._iridescence = 0),
      (this._sheen = 0),
      (this._transmission = 0),
      this.setValues(e);
  }
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(e) {
    this._anisotropy > 0 != e > 0 && this.version++, (this._anisotropy = e);
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    this._clearcoat > 0 != e > 0 && this.version++, (this._clearcoat = e);
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    this._iridescence > 0 != e > 0 && this.version++, (this._iridescence = e);
  }
  get dispersion() {
    return this._dispersion;
  }
  set dispersion(e) {
    this._dispersion > 0 != e > 0 && this.version++, (this._dispersion = e);
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    this._sheen > 0 != e > 0 && this.version++, (this._sheen = e);
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    this._transmission > 0 != e > 0 && this.version++, (this._transmission = e);
  }
  copy(e) {
    return (
      super.copy(e),
      (this.defines = { STANDARD: "", PHYSICAL: "" }),
      (this.anisotropy = e.anisotropy),
      (this.anisotropyRotation = e.anisotropyRotation),
      (this.anisotropyMap = e.anisotropyMap),
      (this.clearcoat = e.clearcoat),
      (this.clearcoatMap = e.clearcoatMap),
      (this.clearcoatRoughness = e.clearcoatRoughness),
      (this.clearcoatRoughnessMap = e.clearcoatRoughnessMap),
      (this.clearcoatNormalMap = e.clearcoatNormalMap),
      this.clearcoatNormalScale.copy(e.clearcoatNormalScale),
      (this.dispersion = e.dispersion),
      (this.ior = e.ior),
      (this.iridescence = e.iridescence),
      (this.iridescenceMap = e.iridescenceMap),
      (this.iridescenceIOR = e.iridescenceIOR),
      (this.iridescenceThicknessRange = [...e.iridescenceThicknessRange]),
      (this.iridescenceThicknessMap = e.iridescenceThicknessMap),
      (this.sheen = e.sheen),
      this.sheenColor.copy(e.sheenColor),
      (this.sheenColorMap = e.sheenColorMap),
      (this.sheenRoughness = e.sheenRoughness),
      (this.sheenRoughnessMap = e.sheenRoughnessMap),
      (this.transmission = e.transmission),
      (this.transmissionMap = e.transmissionMap),
      (this.thickness = e.thickness),
      (this.thicknessMap = e.thicknessMap),
      (this.attenuationDistance = e.attenuationDistance),
      this.attenuationColor.copy(e.attenuationColor),
      (this.specularIntensity = e.specularIntensity),
      (this.specularIntensityMap = e.specularIntensityMap),
      this.specularColor.copy(e.specularColor),
      (this.specularColorMap = e.specularColorMap),
      this
    );
  }
}
class E_ extends Cn {
  static get type() {
    return "MeshPhongMaterial";
  }
  constructor(e) {
    super(),
      (this.isMeshPhongMaterial = !0),
      (this.color = new Ne(16777215)),
      (this.specular = new Ne(1118481)),
      (this.shininess = 30),
      (this.map = null),
      (this.lightMap = null),
      (this.lightMapIntensity = 1),
      (this.aoMap = null),
      (this.aoMapIntensity = 1),
      (this.emissive = new Ne(0)),
      (this.emissiveIntensity = 1),
      (this.emissiveMap = null),
      (this.bumpMap = null),
      (this.bumpScale = 1),
      (this.normalMap = null),
      (this.normalMapType = Dr),
      (this.normalScale = new fe(1, 1)),
      (this.displacementMap = null),
      (this.displacementScale = 1),
      (this.displacementBias = 0),
      (this.specularMap = null),
      (this.alphaMap = null),
      (this.envMap = null),
      (this.envMapRotation = new ni()),
      (this.combine = Ba),
      (this.reflectivity = 1),
      (this.refractionRatio = 0.98),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.wireframeLinecap = "round"),
      (this.wireframeLinejoin = "round"),
      (this.flatShading = !1),
      (this.fog = !0),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      this.color.copy(e.color),
      this.specular.copy(e.specular),
      (this.shininess = e.shininess),
      (this.map = e.map),
      (this.lightMap = e.lightMap),
      (this.lightMapIntensity = e.lightMapIntensity),
      (this.aoMap = e.aoMap),
      (this.aoMapIntensity = e.aoMapIntensity),
      this.emissive.copy(e.emissive),
      (this.emissiveMap = e.emissiveMap),
      (this.emissiveIntensity = e.emissiveIntensity),
      (this.bumpMap = e.bumpMap),
      (this.bumpScale = e.bumpScale),
      (this.normalMap = e.normalMap),
      (this.normalMapType = e.normalMapType),
      this.normalScale.copy(e.normalScale),
      (this.displacementMap = e.displacementMap),
      (this.displacementScale = e.displacementScale),
      (this.displacementBias = e.displacementBias),
      (this.specularMap = e.specularMap),
      (this.alphaMap = e.alphaMap),
      (this.envMap = e.envMap),
      this.envMapRotation.copy(e.envMapRotation),
      (this.combine = e.combine),
      (this.reflectivity = e.reflectivity),
      (this.refractionRatio = e.refractionRatio),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.wireframeLinecap = e.wireframeLinecap),
      (this.wireframeLinejoin = e.wireframeLinejoin),
      (this.flatShading = e.flatShading),
      (this.fog = e.fog),
      this
    );
  }
}
class T_ extends Cn {
  static get type() {
    return "MeshToonMaterial";
  }
  constructor(e) {
    super(),
      (this.isMeshToonMaterial = !0),
      (this.defines = { TOON: "" }),
      (this.color = new Ne(16777215)),
      (this.map = null),
      (this.gradientMap = null),
      (this.lightMap = null),
      (this.lightMapIntensity = 1),
      (this.aoMap = null),
      (this.aoMapIntensity = 1),
      (this.emissive = new Ne(0)),
      (this.emissiveIntensity = 1),
      (this.emissiveMap = null),
      (this.bumpMap = null),
      (this.bumpScale = 1),
      (this.normalMap = null),
      (this.normalMapType = Dr),
      (this.normalScale = new fe(1, 1)),
      (this.displacementMap = null),
      (this.displacementScale = 1),
      (this.displacementBias = 0),
      (this.alphaMap = null),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.wireframeLinecap = "round"),
      (this.wireframeLinejoin = "round"),
      (this.fog = !0),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      this.color.copy(e.color),
      (this.map = e.map),
      (this.gradientMap = e.gradientMap),
      (this.lightMap = e.lightMap),
      (this.lightMapIntensity = e.lightMapIntensity),
      (this.aoMap = e.aoMap),
      (this.aoMapIntensity = e.aoMapIntensity),
      this.emissive.copy(e.emissive),
      (this.emissiveMap = e.emissiveMap),
      (this.emissiveIntensity = e.emissiveIntensity),
      (this.bumpMap = e.bumpMap),
      (this.bumpScale = e.bumpScale),
      (this.normalMap = e.normalMap),
      (this.normalMapType = e.normalMapType),
      this.normalScale.copy(e.normalScale),
      (this.displacementMap = e.displacementMap),
      (this.displacementScale = e.displacementScale),
      (this.displacementBias = e.displacementBias),
      (this.alphaMap = e.alphaMap),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.wireframeLinecap = e.wireframeLinecap),
      (this.wireframeLinejoin = e.wireframeLinejoin),
      (this.fog = e.fog),
      this
    );
  }
}
class A_ extends Cn {
  static get type() {
    return "MeshNormalMaterial";
  }
  constructor(e) {
    super(),
      (this.isMeshNormalMaterial = !0),
      (this.bumpMap = null),
      (this.bumpScale = 1),
      (this.normalMap = null),
      (this.normalMapType = Dr),
      (this.normalScale = new fe(1, 1)),
      (this.displacementMap = null),
      (this.displacementScale = 1),
      (this.displacementBias = 0),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.flatShading = !1),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      (this.bumpMap = e.bumpMap),
      (this.bumpScale = e.bumpScale),
      (this.normalMap = e.normalMap),
      (this.normalMapType = e.normalMapType),
      this.normalScale.copy(e.normalScale),
      (this.displacementMap = e.displacementMap),
      (this.displacementScale = e.displacementScale),
      (this.displacementBias = e.displacementBias),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.flatShading = e.flatShading),
      this
    );
  }
}
class b_ extends Cn {
  static get type() {
    return "MeshLambertMaterial";
  }
  constructor(e) {
    super(),
      (this.isMeshLambertMaterial = !0),
      (this.color = new Ne(16777215)),
      (this.map = null),
      (this.lightMap = null),
      (this.lightMapIntensity = 1),
      (this.aoMap = null),
      (this.aoMapIntensity = 1),
      (this.emissive = new Ne(0)),
      (this.emissiveIntensity = 1),
      (this.emissiveMap = null),
      (this.bumpMap = null),
      (this.bumpScale = 1),
      (this.normalMap = null),
      (this.normalMapType = Dr),
      (this.normalScale = new fe(1, 1)),
      (this.displacementMap = null),
      (this.displacementScale = 1),
      (this.displacementBias = 0),
      (this.specularMap = null),
      (this.alphaMap = null),
      (this.envMap = null),
      (this.envMapRotation = new ni()),
      (this.combine = Ba),
      (this.reflectivity = 1),
      (this.refractionRatio = 0.98),
      (this.wireframe = !1),
      (this.wireframeLinewidth = 1),
      (this.wireframeLinecap = "round"),
      (this.wireframeLinejoin = "round"),
      (this.flatShading = !1),
      (this.fog = !0),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      this.color.copy(e.color),
      (this.map = e.map),
      (this.lightMap = e.lightMap),
      (this.lightMapIntensity = e.lightMapIntensity),
      (this.aoMap = e.aoMap),
      (this.aoMapIntensity = e.aoMapIntensity),
      this.emissive.copy(e.emissive),
      (this.emissiveMap = e.emissiveMap),
      (this.emissiveIntensity = e.emissiveIntensity),
      (this.bumpMap = e.bumpMap),
      (this.bumpScale = e.bumpScale),
      (this.normalMap = e.normalMap),
      (this.normalMapType = e.normalMapType),
      this.normalScale.copy(e.normalScale),
      (this.displacementMap = e.displacementMap),
      (this.displacementScale = e.displacementScale),
      (this.displacementBias = e.displacementBias),
      (this.specularMap = e.specularMap),
      (this.alphaMap = e.alphaMap),
      (this.envMap = e.envMap),
      this.envMapRotation.copy(e.envMapRotation),
      (this.combine = e.combine),
      (this.reflectivity = e.reflectivity),
      (this.refractionRatio = e.refractionRatio),
      (this.wireframe = e.wireframe),
      (this.wireframeLinewidth = e.wireframeLinewidth),
      (this.wireframeLinecap = e.wireframeLinecap),
      (this.wireframeLinejoin = e.wireframeLinejoin),
      (this.flatShading = e.flatShading),
      (this.fog = e.fog),
      this
    );
  }
}
class C_ extends Cn {
  static get type() {
    return "MeshMatcapMaterial";
  }
  constructor(e) {
    super(),
      (this.isMeshMatcapMaterial = !0),
      (this.defines = { MATCAP: "" }),
      (this.color = new Ne(16777215)),
      (this.matcap = null),
      (this.map = null),
      (this.bumpMap = null),
      (this.bumpScale = 1),
      (this.normalMap = null),
      (this.normalMapType = Dr),
      (this.normalScale = new fe(1, 1)),
      (this.displacementMap = null),
      (this.displacementScale = 1),
      (this.displacementBias = 0),
      (this.alphaMap = null),
      (this.flatShading = !1),
      (this.fog = !0),
      this.setValues(e);
  }
  copy(e) {
    return (
      super.copy(e),
      (this.defines = { MATCAP: "" }),
      this.color.copy(e.color),
      (this.matcap = e.matcap),
      (this.map = e.map),
      (this.bumpMap = e.bumpMap),
      (this.bumpScale = e.bumpScale),
      (this.normalMap = e.normalMap),
      (this.normalMapType = e.normalMapType),
      this.normalScale.copy(e.normalScale),
      (this.displacementMap = e.displacementMap),
      (this.displacementScale = e.displacementScale),
      (this.displacementBias = e.displacementBias),
      (this.alphaMap = e.alphaMap),
      (this.flatShading = e.flatShading),
      (this.fog = e.fog),
      this
    );
  }
}
class R_ extends On {
  static get type() {
    return "LineDashedMaterial";
  }
  constructor(e) {
    super(),
      (this.isLineDashedMaterial = !0),
      (this.scale = 1),
      (this.dashSize = 3),
      (this.gapSize = 1),
      this.setValues(e);
  }
  copy(e) {
    return super.copy(e), (this.scale = e.scale), (this.dashSize = e.dashSize), (this.gapSize = e.gapSize), this;
  }
}
function fs(r, e, t) {
  return !r || (!t && r.constructor === e)
    ? r
    : typeof e.BYTES_PER_ELEMENT == "number"
      ? new e(r)
      : Array.prototype.slice.call(r);
}
function P_(r) {
  return ArrayBuffer.isView(r) && !(r instanceof DataView);
}
function I_(r) {
  function e(i, s) {
    return r[i] - r[s];
  }
  const t = r.length,
    n = new Array(t);
  for (let i = 0; i !== t; ++i) n[i] = i;
  return n.sort(e), n;
}
function bd(r, e, t) {
  const n = r.length,
    i = new r.constructor(n);
  for (let s = 0, l = 0; l !== n; ++s) {
    const c = t[s] * e;
    for (let u = 0; u !== e; ++u) i[l++] = r[c + u];
  }
  return i;
}
function hp(r, e, t, n) {
  let i = 1,
    s = r[0];
  for (; s !== void 0 && s[n] === void 0; ) s = r[i++];
  if (s === void 0) return;
  let l = s[n];
  if (l !== void 0)
    if (Array.isArray(l))
      do (l = s[n]), l !== void 0 && (e.push(s.time), t.push.apply(t, l)), (s = r[i++]);
      while (s !== void 0);
    else if (l.toArray !== void 0)
      do (l = s[n]), l !== void 0 && (e.push(s.time), l.toArray(t, t.length)), (s = r[i++]);
      while (s !== void 0);
    else
      do (l = s[n]), l !== void 0 && (e.push(s.time), t.push(l)), (s = r[i++]);
      while (s !== void 0);
}
function uA(r, e, t, n, i = 30) {
  const s = r.clone();
  s.name = e;
  const l = [];
  for (let u = 0; u < s.tracks.length; ++u) {
    const h = s.tracks[u],
      d = h.getValueSize(),
      p = [],
      m = [];
    for (let v = 0; v < h.times.length; ++v) {
      const x = h.times[v] * i;
      if (!(x < t || x >= n)) {
        p.push(h.times[v]);
        for (let M = 0; M < d; ++M) m.push(h.values[v * d + M]);
      }
    }
    p.length !== 0 && ((h.times = fs(p, h.times.constructor)), (h.values = fs(m, h.values.constructor)), l.push(h));
  }
  s.tracks = l;
  let c = 1 / 0;
  for (let u = 0; u < s.tracks.length; ++u) c > s.tracks[u].times[0] && (c = s.tracks[u].times[0]);
  for (let u = 0; u < s.tracks.length; ++u) s.tracks[u].shift(-1 * c);
  return s.resetDuration(), s;
}
function hA(r, e = 0, t = r, n = 30) {
  n <= 0 && (n = 30);
  const i = t.tracks.length,
    s = e / n;
  for (let l = 0; l < i; ++l) {
    const c = t.tracks[l],
      u = c.ValueTypeName;
    if (u === "bool" || u === "string") continue;
    const h = r.tracks.find(function (_) {
      return _.name === c.name && _.ValueTypeName === u;
    });
    if (h === void 0) continue;
    let d = 0;
    const p = c.getValueSize();
    c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (d = p / 3);
    let m = 0;
    const v = h.getValueSize();
    h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (m = v / 3);
    const x = c.times.length - 1;
    let M;
    if (s <= c.times[0]) {
      const _ = d,
        w = p - d;
      M = c.values.slice(_, w);
    } else if (s >= c.times[x]) {
      const _ = x * p + d,
        w = _ + p - d;
      M = c.values.slice(_, w);
    } else {
      const _ = c.createInterpolant(),
        w = d,
        E = p - d;
      _.evaluate(s), (M = _.resultBuffer.slice(w, E));
    }
    u === "quaternion" && new qn().fromArray(M).normalize().conjugate().toArray(M);
    const y = h.times.length;
    for (let _ = 0; _ < y; ++_) {
      const w = _ * v + m;
      if (u === "quaternion") qn.multiplyQuaternionsFlat(h.values, w, M, 0, h.values, w);
      else {
        const E = v - m * 2;
        for (let A = 0; A < E; ++A) h.values[w + A] -= M[A];
      }
    }
  }
  return (r.blendMode = Wd), r;
}
const fA = {
  convertArray: fs,
  isTypedArray: P_,
  getKeyframeOrder: I_,
  sortedArray: bd,
  flattenJSON: hp,
  subclip: uA,
  makeClipAdditive: hA,
};
class Za {
  constructor(e, t, n, i) {
    (this.parameterPositions = e),
      (this._cachedIndex = 0),
      (this.resultBuffer = i !== void 0 ? i : new t.constructor(n)),
      (this.sampleValues = t),
      (this.valueSize = n),
      (this.settings = null),
      (this.DefaultSettings_ = {});
  }
  evaluate(e) {
    const t = this.parameterPositions;
    let n = this._cachedIndex,
      i = t[n],
      s = t[n - 1];
    e: {
      t: {
        let l;
        n: {
          i: if (!(e < i)) {
            for (let c = n + 2; ; ) {
              if (i === void 0) {
                if (e < s) break i;
                return (n = t.length), (this._cachedIndex = n), this.copySampleValue_(n - 1);
              }
              if (n === c) break;
              if (((s = i), (i = t[++n]), e < i)) break t;
            }
            l = t.length;
            break n;
          }
          if (!(e >= s)) {
            const c = t[1];
            e < c && ((n = 2), (s = c));
            for (let u = n - 2; ; ) {
              if (s === void 0) return (this._cachedIndex = 0), this.copySampleValue_(0);
              if (n === u) break;
              if (((i = s), (s = t[--n - 1]), e >= s)) break t;
            }
            (l = n), (n = 0);
            break n;
          }
          break e;
        }
        for (; n < l; ) {
          const c = (n + l) >>> 1;
          e < t[c] ? (l = c) : (n = c + 1);
        }
        if (((i = t[n]), (s = t[n - 1]), s === void 0)) return (this._cachedIndex = 0), this.copySampleValue_(0);
        if (i === void 0) return (n = t.length), (this._cachedIndex = n), this.copySampleValue_(n - 1);
      }
      (this._cachedIndex = n), this.intervalChanged_(n, s, i);
    }
    return this.interpolate_(n, s, e, i);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(e) {
    const t = this.resultBuffer,
      n = this.sampleValues,
      i = this.valueSize,
      s = e * i;
    for (let l = 0; l !== i; ++l) t[l] = n[s + l];
    return t;
  }
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {}
}
class L_ extends Za {
  constructor(e, t, n, i) {
    super(e, t, n, i),
      (this._weightPrev = -0),
      (this._offsetPrev = -0),
      (this._weightNext = -0),
      (this._offsetNext = -0),
      (this.DefaultSettings_ = { endingStart: cs, endingEnd: cs });
  }
  intervalChanged_(e, t, n) {
    const i = this.parameterPositions;
    let s = e - 2,
      l = e + 1,
      c = i[s],
      u = i[l];
    if (c === void 0)
      switch (this.getSettings_().endingStart) {
        case us:
          (s = e), (c = 2 * t - n);
          break;
        case Aa:
          (s = i.length - 2), (c = t + i[s] - i[s + 1]);
          break;
        default:
          (s = e), (c = n);
      }
    if (u === void 0)
      switch (this.getSettings_().endingEnd) {
        case us:
          (l = e), (u = 2 * n - t);
          break;
        case Aa:
          (l = 1), (u = n + i[1] - i[0]);
          break;
        default:
          (l = e - 1), (u = t);
      }
    const h = (n - t) * 0.5,
      d = this.valueSize;
    (this._weightPrev = h / (t - c)),
      (this._weightNext = h / (u - n)),
      (this._offsetPrev = s * d),
      (this._offsetNext = l * d);
  }
  interpolate_(e, t, n, i) {
    const s = this.resultBuffer,
      l = this.sampleValues,
      c = this.valueSize,
      u = e * c,
      h = u - c,
      d = this._offsetPrev,
      p = this._offsetNext,
      m = this._weightPrev,
      v = this._weightNext,
      x = (n - t) / (i - t),
      M = x * x,
      y = M * x,
      _ = -m * y + 2 * m * M - m * x,
      w = (1 + m) * y + (-1.5 - 2 * m) * M + (-0.5 + m) * x + 1,
      E = (-1 - v) * y + (1.5 + v) * M + 0.5 * x,
      A = v * y - v * M;
    for (let O = 0; O !== c; ++O) s[O] = _ * l[d + O] + w * l[h + O] + E * l[u + O] + A * l[p + O];
    return s;
  }
}
class fp extends Za {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e, t, n, i) {
    const s = this.resultBuffer,
      l = this.sampleValues,
      c = this.valueSize,
      u = e * c,
      h = u - c,
      d = (n - t) / (i - t),
      p = 1 - d;
    for (let m = 0; m !== c; ++m) s[m] = l[h + m] * p + l[u + m] * d;
    return s;
  }
}
class D_ extends Za {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
}
class Ai {
  constructor(e, t, n, i) {
    if (e === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (t === void 0 || t.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    (this.name = e),
      (this.times = fs(t, this.TimeBufferType)),
      (this.values = fs(n, this.ValueBufferType)),
      this.setInterpolation(i || this.DefaultInterpolation);
  }
  static toJSON(e) {
    const t = e.constructor;
    let n;
    if (t.toJSON !== this.toJSON) n = t.toJSON(e);
    else {
      n = { name: e.name, times: fs(e.times, Array), values: fs(e.values, Array) };
      const i = e.getInterpolation();
      i !== e.DefaultInterpolation && (n.interpolation = i);
    }
    return (n.type = e.ValueTypeName), n;
  }
  InterpolantFactoryMethodDiscrete(e) {
    return new D_(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodLinear(e) {
    return new fp(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodSmooth(e) {
    return new L_(this.times, this.values, this.getValueSize(), e);
  }
  setInterpolation(e) {
    let t;
    switch (e) {
      case Ta:
        t = this.InterpolantFactoryMethodDiscrete;
        break;
      case Cu:
        t = this.InterpolantFactoryMethodLinear;
        break;
      case Wc:
        t = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (t === void 0) {
      const n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (e !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
        else throw new Error(n);
      return console.warn("THREE.KeyframeTrack:", n), this;
    }
    return (this.createInterpolant = t), this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return Ta;
      case this.InterpolantFactoryMethodLinear:
        return Cu;
      case this.InterpolantFactoryMethodSmooth:
        return Wc;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  shift(e) {
    if (e !== 0) {
      const t = this.times;
      for (let n = 0, i = t.length; n !== i; ++n) t[n] += e;
    }
    return this;
  }
  scale(e) {
    if (e !== 1) {
      const t = this.times;
      for (let n = 0, i = t.length; n !== i; ++n) t[n] *= e;
    }
    return this;
  }
  trim(e, t) {
    const n = this.times,
      i = n.length;
    let s = 0,
      l = i - 1;
    for (; s !== i && n[s] < e; ) ++s;
    for (; l !== -1 && n[l] > t; ) --l;
    if ((++l, s !== 0 || l !== i)) {
      s >= l && ((l = Math.max(l, 1)), (s = l - 1));
      const c = this.getValueSize();
      (this.times = n.slice(s, l)), (this.values = this.values.slice(s * c, l * c));
    }
    return this;
  }
  validate() {
    let e = !0;
    const t = this.getValueSize();
    t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), (e = !1));
    const n = this.times,
      i = this.values,
      s = n.length;
    s === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), (e = !1));
    let l = null;
    for (let c = 0; c !== s; c++) {
      const u = n[c];
      if (typeof u == "number" && isNaN(u)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, c, u), (e = !1);
        break;
      }
      if (l !== null && l > u) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, c, u, l), (e = !1);
        break;
      }
      l = u;
    }
    if (i !== void 0 && P_(i))
      for (let c = 0, u = i.length; c !== u; ++c) {
        const h = i[c];
        if (isNaN(h)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, c, h), (e = !1);
          break;
        }
      }
    return e;
  }
  optimize() {
    const e = this.times.slice(),
      t = this.values.slice(),
      n = this.getValueSize(),
      i = this.getInterpolation() === Wc,
      s = e.length - 1;
    let l = 1;
    for (let c = 1; c < s; ++c) {
      let u = !1;
      const h = e[c],
        d = e[c + 1];
      if (h !== d && (c !== 1 || h !== e[0]))
        if (i) u = !0;
        else {
          const p = c * n,
            m = p - n,
            v = p + n;
          for (let x = 0; x !== n; ++x) {
            const M = t[p + x];
            if (M !== t[m + x] || M !== t[v + x]) {
              u = !0;
              break;
            }
          }
        }
      if (u) {
        if (c !== l) {
          e[l] = e[c];
          const p = c * n,
            m = l * n;
          for (let v = 0; v !== n; ++v) t[m + v] = t[p + v];
        }
        ++l;
      }
    }
    if (s > 0) {
      e[l] = e[s];
      for (let c = s * n, u = l * n, h = 0; h !== n; ++h) t[u + h] = t[c + h];
      ++l;
    }
    return (
      l !== e.length
        ? ((this.times = e.slice(0, l)), (this.values = t.slice(0, l * n)))
        : ((this.times = e), (this.values = t)),
      this
    );
  }
  clone() {
    const e = this.times.slice(),
      t = this.values.slice(),
      n = this.constructor,
      i = new n(this.name, e, t);
    return (i.createInterpolant = this.createInterpolant), i;
  }
}
Ai.prototype.TimeBufferType = Float32Array;
Ai.prototype.ValueBufferType = Float32Array;
Ai.prototype.DefaultInterpolation = Cu;
class Ts extends Ai {
  constructor(e, t, n) {
    super(e, t, n);
  }
}
Ts.prototype.ValueTypeName = "bool";
Ts.prototype.ValueBufferType = Array;
Ts.prototype.DefaultInterpolation = Ta;
Ts.prototype.InterpolantFactoryMethodLinear = void 0;
Ts.prototype.InterpolantFactoryMethodSmooth = void 0;
class dp extends Ai {}
dp.prototype.ValueTypeName = "color";
class Ua extends Ai {}
Ua.prototype.ValueTypeName = "number";
class U_ extends Za {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e, t, n, i) {
    const s = this.resultBuffer,
      l = this.sampleValues,
      c = this.valueSize,
      u = (n - t) / (i - t);
    let h = e * c;
    for (let d = h + c; h !== d; h += 4) qn.slerpFlat(s, 0, l, h - c, l, h, u);
    return s;
  }
}
class Ja extends Ai {
  InterpolantFactoryMethodLinear(e) {
    return new U_(this.times, this.values, this.getValueSize(), e);
  }
}
Ja.prototype.ValueTypeName = "quaternion";
Ja.prototype.InterpolantFactoryMethodSmooth = void 0;
class As extends Ai {
  constructor(e, t, n) {
    super(e, t, n);
  }
}
As.prototype.ValueTypeName = "string";
As.prototype.ValueBufferType = Array;
As.prototype.DefaultInterpolation = Ta;
As.prototype.InterpolantFactoryMethodLinear = void 0;
As.prototype.InterpolantFactoryMethodSmooth = void 0;
class Na extends Ai {}
Na.prototype.ValueTypeName = "vector";
class Fa {
  constructor(e = "", t = -1, n = [], i = Hu) {
    (this.name = e),
      (this.tracks = n),
      (this.duration = t),
      (this.blendMode = i),
      (this.uuid = ti()),
      this.duration < 0 && this.resetDuration();
  }
  static parse(e) {
    const t = [],
      n = e.tracks,
      i = 1 / (e.fps || 1);
    for (let l = 0, c = n.length; l !== c; ++l) t.push(pA(n[l]).scale(i));
    const s = new this(e.name, e.duration, t, e.blendMode);
    return (s.uuid = e.uuid), s;
  }
  static toJSON(e) {
    const t = [],
      n = e.tracks,
      i = { name: e.name, duration: e.duration, tracks: t, uuid: e.uuid, blendMode: e.blendMode };
    for (let s = 0, l = n.length; s !== l; ++s) t.push(Ai.toJSON(n[s]));
    return i;
  }
  static CreateFromMorphTargetSequence(e, t, n, i) {
    const s = t.length,
      l = [];
    for (let c = 0; c < s; c++) {
      let u = [],
        h = [];
      u.push((c + s - 1) % s, c, (c + 1) % s), h.push(0, 1, 0);
      const d = I_(u);
      (u = bd(u, 1, d)),
        (h = bd(h, 1, d)),
        !i && u[0] === 0 && (u.push(s), h.push(h[0])),
        l.push(new Ua(".morphTargetInfluences[" + t[c].name + "]", u, h).scale(1 / n));
    }
    return new this(e, -1, l);
  }
  static findByName(e, t) {
    let n = e;
    if (!Array.isArray(e)) {
      const i = e;
      n = (i.geometry && i.geometry.animations) || i.animations;
    }
    for (let i = 0; i < n.length; i++) if (n[i].name === t) return n[i];
    return null;
  }
  static CreateClipsFromMorphTargetSequences(e, t, n) {
    const i = {},
      s = /^([\w-]*?)([\d]+)$/;
    for (let c = 0, u = e.length; c < u; c++) {
      const h = e[c],
        d = h.name.match(s);
      if (d && d.length > 1) {
        const p = d[1];
        let m = i[p];
        m || (i[p] = m = []), m.push(h);
      }
    }
    const l = [];
    for (const c in i) l.push(this.CreateFromMorphTargetSequence(c, i[c], t, n));
    return l;
  }
  static parseAnimation(e, t) {
    if (!e) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const n = function (p, m, v, x, M) {
        if (v.length !== 0) {
          const y = [],
            _ = [];
          hp(v, y, _, x), y.length !== 0 && M.push(new p(m, y, _));
        }
      },
      i = [],
      s = e.name || "default",
      l = e.fps || 30,
      c = e.blendMode;
    let u = e.length || -1;
    const h = e.hierarchy || [];
    for (let p = 0; p < h.length; p++) {
      const m = h[p].keys;
      if (!(!m || m.length === 0))
        if (m[0].morphTargets) {
          const v = {};
          let x;
          for (x = 0; x < m.length; x++)
            if (m[x].morphTargets) for (let M = 0; M < m[x].morphTargets.length; M++) v[m[x].morphTargets[M]] = -1;
          for (const M in v) {
            const y = [],
              _ = [];
            for (let w = 0; w !== m[x].morphTargets.length; ++w) {
              const E = m[x];
              y.push(E.time), _.push(E.morphTarget === M ? 1 : 0);
            }
            i.push(new Ua(".morphTargetInfluence[" + M + "]", y, _));
          }
          u = v.length * l;
        } else {
          const v = ".bones[" + t[p].name + "]";
          n(Na, v + ".position", m, "pos", i), n(Ja, v + ".quaternion", m, "rot", i), n(Na, v + ".scale", m, "scl", i);
        }
    }
    return i.length === 0 ? null : new this(s, u, i, c);
  }
  resetDuration() {
    const e = this.tracks;
    let t = 0;
    for (let n = 0, i = e.length; n !== i; ++n) {
      const s = this.tracks[n];
      t = Math.max(t, s.times[s.times.length - 1]);
    }
    return (this.duration = t), this;
  }
  trim() {
    for (let e = 0; e < this.tracks.length; e++) this.tracks[e].trim(0, this.duration);
    return this;
  }
  validate() {
    let e = !0;
    for (let t = 0; t < this.tracks.length; t++) e = e && this.tracks[t].validate();
    return e;
  }
  optimize() {
    for (let e = 0; e < this.tracks.length; e++) this.tracks[e].optimize();
    return this;
  }
  clone() {
    const e = [];
    for (let t = 0; t < this.tracks.length; t++) e.push(this.tracks[t].clone());
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function dA(r) {
  switch (r.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return Ua;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return Na;
    case "color":
      return dp;
    case "quaternion":
      return Ja;
    case "bool":
    case "boolean":
      return Ts;
    case "string":
      return As;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + r);
}
function pA(r) {
  if (r.type === void 0) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const e = dA(r.type);
  if (r.times === void 0) {
    const t = [],
      n = [];
    hp(r.keys, t, n, "value"), (r.times = t), (r.values = n);
  }
  return e.parse !== void 0 ? e.parse(r) : new e(r.name, r.times, r.values, r.interpolation);
}
const rr = {
  enabled: !1,
  files: {},
  add: function (r, e) {
    this.enabled !== !1 && (this.files[r] = e);
  },
  get: function (r) {
    if (this.enabled !== !1) return this.files[r];
  },
  remove: function (r) {
    delete this.files[r];
  },
  clear: function () {
    this.files = {};
  },
};
class pp {
  constructor(e, t, n) {
    const i = this;
    let s = !1,
      l = 0,
      c = 0,
      u;
    const h = [];
    (this.onStart = void 0),
      (this.onLoad = e),
      (this.onProgress = t),
      (this.onError = n),
      (this.itemStart = function (d) {
        c++, s === !1 && i.onStart !== void 0 && i.onStart(d, l, c), (s = !0);
      }),
      (this.itemEnd = function (d) {
        l++, i.onProgress !== void 0 && i.onProgress(d, l, c), l === c && ((s = !1), i.onLoad !== void 0 && i.onLoad());
      }),
      (this.itemError = function (d) {
        i.onError !== void 0 && i.onError(d);
      }),
      (this.resolveURL = function (d) {
        return u ? u(d) : d;
      }),
      (this.setURLModifier = function (d) {
        return (u = d), this;
      }),
      (this.addHandler = function (d, p) {
        return h.push(d, p), this;
      }),
      (this.removeHandler = function (d) {
        const p = h.indexOf(d);
        return p !== -1 && h.splice(p, 2), this;
      }),
      (this.getHandler = function (d) {
        for (let p = 0, m = h.length; p < m; p += 2) {
          const v = h[p],
            x = h[p + 1];
          if ((v.global && (v.lastIndex = 0), v.test(d))) return x;
        }
        return null;
      });
  }
}
const N_ = new pp();
class Zn {
  constructor(e) {
    (this.manager = e !== void 0 ? e : N_),
      (this.crossOrigin = "anonymous"),
      (this.withCredentials = !1),
      (this.path = ""),
      (this.resourcePath = ""),
      (this.requestHeader = {});
  }
  load() {}
  loadAsync(e, t) {
    const n = this;
    return new Promise(function (i, s) {
      n.load(e, i, t, s);
    });
  }
  parse() {}
  setCrossOrigin(e) {
    return (this.crossOrigin = e), this;
  }
  setWithCredentials(e) {
    return (this.withCredentials = e), this;
  }
  setPath(e) {
    return (this.path = e), this;
  }
  setResourcePath(e) {
    return (this.resourcePath = e), this;
  }
  setRequestHeader(e) {
    return (this.requestHeader = e), this;
  }
}
Zn.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const tr = {};
class mA extends Error {
  constructor(e, t) {
    super(e), (this.response = t);
  }
}
class ur extends Zn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), (e = this.manager.resolveURL(e));
    const s = rr.get(e);
    if (s !== void 0)
      return (
        this.manager.itemStart(e),
        setTimeout(() => {
          t && t(s), this.manager.itemEnd(e);
        }, 0),
        s
      );
    if (tr[e] !== void 0) {
      tr[e].push({ onLoad: t, onProgress: n, onError: i });
      return;
    }
    (tr[e] = []), tr[e].push({ onLoad: t, onProgress: n, onError: i });
    const l = new Request(e, {
        headers: new Headers(this.requestHeader),
        credentials: this.withCredentials ? "include" : "same-origin",
      }),
      c = this.mimeType,
      u = this.responseType;
    fetch(l)
      .then((h) => {
        if (h.status === 200 || h.status === 0) {
          if (
            (h.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."),
            typeof ReadableStream > "u" || h.body === void 0 || h.body.getReader === void 0)
          )
            return h;
          const d = tr[e],
            p = h.body.getReader(),
            m = h.headers.get("X-File-Size") || h.headers.get("Content-Length"),
            v = m ? parseInt(m) : 0,
            x = v !== 0;
          let M = 0;
          const y = new ReadableStream({
            start(_) {
              w();
              function w() {
                p.read().then(
                  ({ done: E, value: A }) => {
                    if (E) _.close();
                    else {
                      M += A.byteLength;
                      const O = new ProgressEvent("progress", { lengthComputable: x, loaded: M, total: v });
                      for (let P = 0, L = d.length; P < L; P++) {
                        const F = d[P];
                        F.onProgress && F.onProgress(O);
                      }
                      _.enqueue(A), w();
                    }
                  },
                  (E) => {
                    _.error(E);
                  }
                );
              }
            },
          });
          return new Response(y);
        } else throw new mA(`fetch for "${h.url}" responded with ${h.status}: ${h.statusText}`, h);
      })
      .then((h) => {
        switch (u) {
          case "arraybuffer":
            return h.arrayBuffer();
          case "blob":
            return h.blob();
          case "document":
            return h.text().then((d) => new DOMParser().parseFromString(d, c));
          case "json":
            return h.json();
          default:
            if (c === void 0) return h.text();
            {
              const p = /charset="?([^;"\s]*)"?/i.exec(c),
                m = p && p[1] ? p[1].toLowerCase() : void 0,
                v = new TextDecoder(m);
              return h.arrayBuffer().then((x) => v.decode(x));
            }
        }
      })
      .then((h) => {
        rr.add(e, h);
        const d = tr[e];
        delete tr[e];
        for (let p = 0, m = d.length; p < m; p++) {
          const v = d[p];
          v.onLoad && v.onLoad(h);
        }
      })
      .catch((h) => {
        const d = tr[e];
        if (d === void 0) throw (this.manager.itemError(e), h);
        delete tr[e];
        for (let p = 0, m = d.length; p < m; p++) {
          const v = d[p];
          v.onError && v.onError(h);
        }
        this.manager.itemError(e);
      })
      .finally(() => {
        this.manager.itemEnd(e);
      }),
      this.manager.itemStart(e);
  }
  setResponseType(e) {
    return (this.responseType = e), this;
  }
  setMimeType(e) {
    return (this.mimeType = e), this;
  }
}
class gA extends Zn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this,
      l = new ur(this.manager);
    l.setPath(this.path),
      l.setRequestHeader(this.requestHeader),
      l.setWithCredentials(this.withCredentials),
      l.load(
        e,
        function (c) {
          try {
            t(s.parse(JSON.parse(c)));
          } catch (u) {
            i ? i(u) : console.error(u), s.manager.itemError(e);
          }
        },
        n,
        i
      );
  }
  parse(e) {
    const t = [];
    for (let n = 0; n < e.length; n++) {
      const i = Fa.parse(e[n]);
      t.push(i);
    }
    return t;
  }
}
class vA extends Zn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this,
      l = [],
      c = new Ju(),
      u = new ur(this.manager);
    u.setPath(this.path),
      u.setResponseType("arraybuffer"),
      u.setRequestHeader(this.requestHeader),
      u.setWithCredentials(s.withCredentials);
    let h = 0;
    function d(p) {
      u.load(
        e[p],
        function (m) {
          const v = s.parse(m, !0);
          (l[p] = { width: v.width, height: v.height, format: v.format, mipmaps: v.mipmaps }),
            (h += 1),
            h === 6 &&
              (v.mipmapCount === 1 && (c.minFilter = an),
              (c.image = l),
              (c.format = v.format),
              (c.needsUpdate = !0),
              t && t(c));
        },
        n,
        i
      );
    }
    if (Array.isArray(e)) for (let p = 0, m = e.length; p < m; ++p) d(p);
    else
      u.load(
        e,
        function (p) {
          const m = s.parse(p, !0);
          if (m.isCubemap) {
            const v = m.mipmaps.length / m.mipmapCount;
            for (let x = 0; x < v; x++) {
              l[x] = { mipmaps: [] };
              for (let M = 0; M < m.mipmapCount; M++)
                l[x].mipmaps.push(m.mipmaps[x * m.mipmapCount + M]),
                  (l[x].format = m.format),
                  (l[x].width = m.width),
                  (l[x].height = m.height);
            }
            c.image = l;
          } else (c.image.width = m.width), (c.image.height = m.height), (c.mipmaps = m.mipmaps);
          m.mipmapCount === 1 && (c.minFilter = an), (c.format = m.format), (c.needsUpdate = !0), t && t(c);
        },
        n,
        i
      );
    return c;
  }
}
class Oa extends Zn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    this.path !== void 0 && (e = this.path + e), (e = this.manager.resolveURL(e));
    const s = this,
      l = rr.get(e);
    if (l !== void 0)
      return (
        s.manager.itemStart(e),
        setTimeout(function () {
          t && t(l), s.manager.itemEnd(e);
        }, 0),
        l
      );
    const c = Ra("img");
    function u() {
      d(), rr.add(e, this), t && t(this), s.manager.itemEnd(e);
    }
    function h(p) {
      d(), i && i(p), s.manager.itemError(e), s.manager.itemEnd(e);
    }
    function d() {
      c.removeEventListener("load", u, !1), c.removeEventListener("error", h, !1);
    }
    return (
      c.addEventListener("load", u, !1),
      c.addEventListener("error", h, !1),
      e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (c.crossOrigin = this.crossOrigin),
      s.manager.itemStart(e),
      (c.src = e),
      c
    );
  }
}
class _A extends Zn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = new Ha();
    s.colorSpace = Wn;
    const l = new Oa(this.manager);
    l.setCrossOrigin(this.crossOrigin), l.setPath(this.path);
    let c = 0;
    function u(h) {
      l.load(
        e[h],
        function (d) {
          (s.images[h] = d), c++, c === 6 && ((s.needsUpdate = !0), t && t(s));
        },
        void 0,
        i
      );
    }
    for (let h = 0; h < e.length; ++h) u(h);
    return s;
  }
}
class xA extends Zn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this,
      l = new ki(),
      c = new ur(this.manager);
    return (
      c.setResponseType("arraybuffer"),
      c.setRequestHeader(this.requestHeader),
      c.setPath(this.path),
      c.setWithCredentials(s.withCredentials),
      c.load(
        e,
        function (u) {
          let h;
          try {
            h = s.parse(u);
          } catch (d) {
            if (i !== void 0) i(d);
            else {
              console.error(d);
              return;
            }
          }
          h.image !== void 0
            ? (l.image = h.image)
            : h.data !== void 0 && ((l.image.width = h.width), (l.image.height = h.height), (l.image.data = h.data)),
            (l.wrapS = h.wrapS !== void 0 ? h.wrapS : fi),
            (l.wrapT = h.wrapT !== void 0 ? h.wrapT : fi),
            (l.magFilter = h.magFilter !== void 0 ? h.magFilter : an),
            (l.minFilter = h.minFilter !== void 0 ? h.minFilter : an),
            (l.anisotropy = h.anisotropy !== void 0 ? h.anisotropy : 1),
            h.colorSpace !== void 0 && (l.colorSpace = h.colorSpace),
            h.flipY !== void 0 && (l.flipY = h.flipY),
            h.format !== void 0 && (l.format = h.format),
            h.type !== void 0 && (l.type = h.type),
            h.mipmaps !== void 0 && ((l.mipmaps = h.mipmaps), (l.minFilter = Oi)),
            h.mipmapCount === 1 && (l.minFilter = an),
            h.generateMipmaps !== void 0 && (l.generateMipmaps = h.generateMipmaps),
            (l.needsUpdate = !0),
            t && t(l, h);
        },
        n,
        i
      ),
      l
    );
  }
}
class yA extends Zn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = new Kt(),
      l = new Oa(this.manager);
    return (
      l.setCrossOrigin(this.crossOrigin),
      l.setPath(this.path),
      l.load(
        e,
        function (c) {
          (s.image = c), (s.needsUpdate = !0), t !== void 0 && t(s);
        },
        n,
        i
      ),
      s
    );
  }
}
class Fr extends Rt {
  constructor(e, t = 1) {
    super(), (this.isLight = !0), (this.type = "Light"), (this.color = new Ne(e)), (this.intensity = t);
  }
  dispose() {}
  copy(e, t) {
    return super.copy(e, t), this.color.copy(e.color), (this.intensity = e.intensity), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return (
      (t.object.color = this.color.getHex()),
      (t.object.intensity = this.intensity),
      this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()),
      this.distance !== void 0 && (t.object.distance = this.distance),
      this.angle !== void 0 && (t.object.angle = this.angle),
      this.decay !== void 0 && (t.object.decay = this.decay),
      this.penumbra !== void 0 && (t.object.penumbra = this.penumbra),
      this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()),
      this.target !== void 0 && (t.object.target = this.target.uuid),
      t
    );
  }
}
class F_ extends Fr {
  constructor(e, t, n) {
    super(e, n),
      (this.isHemisphereLight = !0),
      (this.type = "HemisphereLight"),
      this.position.copy(Rt.DEFAULT_UP),
      this.updateMatrix(),
      (this.groundColor = new Ne(t));
  }
  copy(e, t) {
    return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
  }
}
const nd = new st(),
  g0 = new N(),
  v0 = new N();
class mp {
  constructor(e) {
    (this.camera = e),
      (this.intensity = 1),
      (this.bias = 0),
      (this.normalBias = 0),
      (this.radius = 1),
      (this.blurSamples = 8),
      (this.mapSize = new fe(512, 512)),
      (this.map = null),
      (this.mapPass = null),
      (this.matrix = new st()),
      (this.autoUpdate = !0),
      (this.needsUpdate = !1),
      (this._frustum = new Ga()),
      (this._frameExtents = new fe(1, 1)),
      (this._viewportCount = 1),
      (this._viewports = [new Ct(0, 0, 1, 1)]);
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(e) {
    const t = this.camera,
      n = this.matrix;
    g0.setFromMatrixPosition(e.matrixWorld),
      t.position.copy(g0),
      v0.setFromMatrixPosition(e.target.matrixWorld),
      t.lookAt(v0),
      t.updateMatrixWorld(),
      nd.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse),
      this._frustum.setFromProjectionMatrix(nd),
      n.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1),
      n.multiply(nd);
  }
  getViewport(e) {
    return this._viewports[e];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  copy(e) {
    return (
      (this.camera = e.camera.clone()),
      (this.intensity = e.intensity),
      (this.bias = e.bias),
      (this.radius = e.radius),
      this.mapSize.copy(e.mapSize),
      this
    );
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const e = {};
    return (
      this.intensity !== 1 && (e.intensity = this.intensity),
      this.bias !== 0 && (e.bias = this.bias),
      this.normalBias !== 0 && (e.normalBias = this.normalBias),
      this.radius !== 1 && (e.radius = this.radius),
      (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()),
      (e.camera = this.camera.toJSON(!1).object),
      delete e.camera.matrix,
      e
    );
  }
}
class SA extends mp {
  constructor() {
    super(new gn(50, 1, 0.5, 500)), (this.isSpotLightShadow = !0), (this.focus = 1);
  }
  updateMatrices(e) {
    const t = this.camera,
      n = xo * 2 * e.angle * this.focus,
      i = this.mapSize.width / this.mapSize.height,
      s = e.distance || t.far;
    (n !== t.fov || i !== t.aspect || s !== t.far) &&
      ((t.fov = n), (t.aspect = i), (t.far = s), t.updateProjectionMatrix()),
      super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), (this.focus = e.focus), this;
  }
}
class O_ extends Fr {
  constructor(e, t, n = 0, i = Math.PI / 3, s = 0, l = 2) {
    super(e, t),
      (this.isSpotLight = !0),
      (this.type = "SpotLight"),
      this.position.copy(Rt.DEFAULT_UP),
      this.updateMatrix(),
      (this.target = new Rt()),
      (this.distance = n),
      (this.angle = i),
      (this.penumbra = s),
      (this.decay = l),
      (this.map = null),
      (this.shadow = new SA());
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return (
      super.copy(e, t),
      (this.distance = e.distance),
      (this.angle = e.angle),
      (this.penumbra = e.penumbra),
      (this.decay = e.decay),
      (this.target = e.target.clone()),
      (this.shadow = e.shadow.clone()),
      this
    );
  }
}
const _0 = new st(),
  sa = new N(),
  id = new N();
class MA extends mp {
  constructor() {
    super(new gn(90, 1, 0.5, 500)),
      (this.isPointLightShadow = !0),
      (this._frameExtents = new fe(4, 2)),
      (this._viewportCount = 6),
      (this._viewports = [
        new Ct(2, 1, 1, 1),
        new Ct(0, 1, 1, 1),
        new Ct(3, 1, 1, 1),
        new Ct(1, 1, 1, 1),
        new Ct(3, 0, 1, 1),
        new Ct(1, 0, 1, 1),
      ]),
      (this._cubeDirections = [
        new N(1, 0, 0),
        new N(-1, 0, 0),
        new N(0, 0, 1),
        new N(0, 0, -1),
        new N(0, 1, 0),
        new N(0, -1, 0),
      ]),
      (this._cubeUps = [
        new N(0, 1, 0),
        new N(0, 1, 0),
        new N(0, 1, 0),
        new N(0, 1, 0),
        new N(0, 0, 1),
        new N(0, 0, -1),
      ]);
  }
  updateMatrices(e, t = 0) {
    const n = this.camera,
      i = this.matrix,
      s = e.distance || n.far;
    s !== n.far && ((n.far = s), n.updateProjectionMatrix()),
      sa.setFromMatrixPosition(e.matrixWorld),
      n.position.copy(sa),
      id.copy(n.position),
      id.add(this._cubeDirections[t]),
      n.up.copy(this._cubeUps[t]),
      n.lookAt(id),
      n.updateMatrixWorld(),
      i.makeTranslation(-sa.x, -sa.y, -sa.z),
      _0.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse),
      this._frustum.setFromProjectionMatrix(_0);
  }
}
class B_ extends Fr {
  constructor(e, t, n = 0, i = 2) {
    super(e, t),
      (this.isPointLight = !0),
      (this.type = "PointLight"),
      (this.distance = n),
      (this.decay = i),
      (this.shadow = new MA());
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return (
      super.copy(e, t), (this.distance = e.distance), (this.decay = e.decay), (this.shadow = e.shadow.clone()), this
    );
  }
}
class wA extends mp {
  constructor() {
    super(new Wa(-5, 5, 5, -5, 0.5, 500)), (this.isDirectionalLightShadow = !0);
  }
}
class z_ extends Fr {
  constructor(e, t) {
    super(e, t),
      (this.isDirectionalLight = !0),
      (this.type = "DirectionalLight"),
      this.position.copy(Rt.DEFAULT_UP),
      this.updateMatrix(),
      (this.target = new Rt()),
      (this.shadow = new wA());
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), (this.target = e.target.clone()), (this.shadow = e.shadow.clone()), this;
  }
}
class k_ extends Fr {
  constructor(e, t) {
    super(e, t), (this.isAmbientLight = !0), (this.type = "AmbientLight");
  }
}
class V_ extends Fr {
  constructor(e, t, n = 10, i = 10) {
    super(e, t), (this.isRectAreaLight = !0), (this.type = "RectAreaLight"), (this.width = n), (this.height = i);
  }
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    return super.copy(e), (this.width = e.width), (this.height = e.height), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return (t.object.width = this.width), (t.object.height = this.height), t;
  }
}
class H_ {
  constructor() {
    (this.isSphericalHarmonics3 = !0), (this.coefficients = []);
    for (let e = 0; e < 9; e++) this.coefficients.push(new N());
  }
  set(e) {
    for (let t = 0; t < 9; t++) this.coefficients[t].copy(e[t]);
    return this;
  }
  zero() {
    for (let e = 0; e < 9; e++) this.coefficients[e].set(0, 0, 0);
    return this;
  }
  getAt(e, t) {
    const n = e.x,
      i = e.y,
      s = e.z,
      l = this.coefficients;
    return (
      t.copy(l[0]).multiplyScalar(0.282095),
      t.addScaledVector(l[1], 0.488603 * i),
      t.addScaledVector(l[2], 0.488603 * s),
      t.addScaledVector(l[3], 0.488603 * n),
      t.addScaledVector(l[4], 1.092548 * (n * i)),
      t.addScaledVector(l[5], 1.092548 * (i * s)),
      t.addScaledVector(l[6], 0.315392 * (3 * s * s - 1)),
      t.addScaledVector(l[7], 1.092548 * (n * s)),
      t.addScaledVector(l[8], 0.546274 * (n * n - i * i)),
      t
    );
  }
  getIrradianceAt(e, t) {
    const n = e.x,
      i = e.y,
      s = e.z,
      l = this.coefficients;
    return (
      t.copy(l[0]).multiplyScalar(0.886227),
      t.addScaledVector(l[1], 2 * 0.511664 * i),
      t.addScaledVector(l[2], 2 * 0.511664 * s),
      t.addScaledVector(l[3], 2 * 0.511664 * n),
      t.addScaledVector(l[4], 2 * 0.429043 * n * i),
      t.addScaledVector(l[5], 2 * 0.429043 * i * s),
      t.addScaledVector(l[6], 0.743125 * s * s - 0.247708),
      t.addScaledVector(l[7], 2 * 0.429043 * n * s),
      t.addScaledVector(l[8], 0.429043 * (n * n - i * i)),
      t
    );
  }
  add(e) {
    for (let t = 0; t < 9; t++) this.coefficients[t].add(e.coefficients[t]);
    return this;
  }
  addScaledSH(e, t) {
    for (let n = 0; n < 9; n++) this.coefficients[n].addScaledVector(e.coefficients[n], t);
    return this;
  }
  scale(e) {
    for (let t = 0; t < 9; t++) this.coefficients[t].multiplyScalar(e);
    return this;
  }
  lerp(e, t) {
    for (let n = 0; n < 9; n++) this.coefficients[n].lerp(e.coefficients[n], t);
    return this;
  }
  equals(e) {
    for (let t = 0; t < 9; t++) if (!this.coefficients[t].equals(e.coefficients[t])) return !1;
    return !0;
  }
  copy(e) {
    return this.set(e.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(e, t = 0) {
    const n = this.coefficients;
    for (let i = 0; i < 9; i++) n[i].fromArray(e, t + i * 3);
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.coefficients;
    for (let i = 0; i < 9; i++) n[i].toArray(e, t + i * 3);
    return e;
  }
  static getBasisAt(e, t) {
    const n = e.x,
      i = e.y,
      s = e.z;
    (t[0] = 0.282095),
      (t[1] = 0.488603 * i),
      (t[2] = 0.488603 * s),
      (t[3] = 0.488603 * n),
      (t[4] = 1.092548 * n * i),
      (t[5] = 1.092548 * i * s),
      (t[6] = 0.315392 * (3 * s * s - 1)),
      (t[7] = 1.092548 * n * s),
      (t[8] = 0.546274 * (n * n - i * i));
  }
}
class G_ extends Fr {
  constructor(e = new H_(), t = 1) {
    super(void 0, t), (this.isLightProbe = !0), (this.sh = e);
  }
  copy(e) {
    return super.copy(e), this.sh.copy(e.sh), this;
  }
  fromJSON(e) {
    return (this.intensity = e.intensity), this.sh.fromArray(e.sh), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return (t.object.sh = this.sh.toArray()), t;
  }
}
class uh extends Zn {
  constructor(e) {
    super(e), (this.textures = {});
  }
  load(e, t, n, i) {
    const s = this,
      l = new ur(s.manager);
    l.setPath(s.path),
      l.setRequestHeader(s.requestHeader),
      l.setWithCredentials(s.withCredentials),
      l.load(
        e,
        function (c) {
          try {
            t(s.parse(JSON.parse(c)));
          } catch (u) {
            i ? i(u) : console.error(u), s.manager.itemError(e);
          }
        },
        n,
        i
      );
  }
  parse(e) {
    const t = this.textures;
    function n(s) {
      return t[s] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", s), t[s];
    }
    const i = this.createMaterialFromType(e.type);
    if (
      (e.uuid !== void 0 && (i.uuid = e.uuid),
      e.name !== void 0 && (i.name = e.name),
      e.color !== void 0 && i.color !== void 0 && i.color.setHex(e.color),
      e.roughness !== void 0 && (i.roughness = e.roughness),
      e.metalness !== void 0 && (i.metalness = e.metalness),
      e.sheen !== void 0 && (i.sheen = e.sheen),
      e.sheenColor !== void 0 && (i.sheenColor = new Ne().setHex(e.sheenColor)),
      e.sheenRoughness !== void 0 && (i.sheenRoughness = e.sheenRoughness),
      e.emissive !== void 0 && i.emissive !== void 0 && i.emissive.setHex(e.emissive),
      e.specular !== void 0 && i.specular !== void 0 && i.specular.setHex(e.specular),
      e.specularIntensity !== void 0 && (i.specularIntensity = e.specularIntensity),
      e.specularColor !== void 0 && i.specularColor !== void 0 && i.specularColor.setHex(e.specularColor),
      e.shininess !== void 0 && (i.shininess = e.shininess),
      e.clearcoat !== void 0 && (i.clearcoat = e.clearcoat),
      e.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = e.clearcoatRoughness),
      e.dispersion !== void 0 && (i.dispersion = e.dispersion),
      e.iridescence !== void 0 && (i.iridescence = e.iridescence),
      e.iridescenceIOR !== void 0 && (i.iridescenceIOR = e.iridescenceIOR),
      e.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = e.iridescenceThicknessRange),
      e.transmission !== void 0 && (i.transmission = e.transmission),
      e.thickness !== void 0 && (i.thickness = e.thickness),
      e.attenuationDistance !== void 0 && (i.attenuationDistance = e.attenuationDistance),
      e.attenuationColor !== void 0 && i.attenuationColor !== void 0 && i.attenuationColor.setHex(e.attenuationColor),
      e.anisotropy !== void 0 && (i.anisotropy = e.anisotropy),
      e.anisotropyRotation !== void 0 && (i.anisotropyRotation = e.anisotropyRotation),
      e.fog !== void 0 && (i.fog = e.fog),
      e.flatShading !== void 0 && (i.flatShading = e.flatShading),
      e.blending !== void 0 && (i.blending = e.blending),
      e.combine !== void 0 && (i.combine = e.combine),
      e.side !== void 0 && (i.side = e.side),
      e.shadowSide !== void 0 && (i.shadowSide = e.shadowSide),
      e.opacity !== void 0 && (i.opacity = e.opacity),
      e.transparent !== void 0 && (i.transparent = e.transparent),
      e.alphaTest !== void 0 && (i.alphaTest = e.alphaTest),
      e.alphaHash !== void 0 && (i.alphaHash = e.alphaHash),
      e.depthFunc !== void 0 && (i.depthFunc = e.depthFunc),
      e.depthTest !== void 0 && (i.depthTest = e.depthTest),
      e.depthWrite !== void 0 && (i.depthWrite = e.depthWrite),
      e.colorWrite !== void 0 && (i.colorWrite = e.colorWrite),
      e.blendSrc !== void 0 && (i.blendSrc = e.blendSrc),
      e.blendDst !== void 0 && (i.blendDst = e.blendDst),
      e.blendEquation !== void 0 && (i.blendEquation = e.blendEquation),
      e.blendSrcAlpha !== void 0 && (i.blendSrcAlpha = e.blendSrcAlpha),
      e.blendDstAlpha !== void 0 && (i.blendDstAlpha = e.blendDstAlpha),
      e.blendEquationAlpha !== void 0 && (i.blendEquationAlpha = e.blendEquationAlpha),
      e.blendColor !== void 0 && i.blendColor !== void 0 && i.blendColor.setHex(e.blendColor),
      e.blendAlpha !== void 0 && (i.blendAlpha = e.blendAlpha),
      e.stencilWriteMask !== void 0 && (i.stencilWriteMask = e.stencilWriteMask),
      e.stencilFunc !== void 0 && (i.stencilFunc = e.stencilFunc),
      e.stencilRef !== void 0 && (i.stencilRef = e.stencilRef),
      e.stencilFuncMask !== void 0 && (i.stencilFuncMask = e.stencilFuncMask),
      e.stencilFail !== void 0 && (i.stencilFail = e.stencilFail),
      e.stencilZFail !== void 0 && (i.stencilZFail = e.stencilZFail),
      e.stencilZPass !== void 0 && (i.stencilZPass = e.stencilZPass),
      e.stencilWrite !== void 0 && (i.stencilWrite = e.stencilWrite),
      e.wireframe !== void 0 && (i.wireframe = e.wireframe),
      e.wireframeLinewidth !== void 0 && (i.wireframeLinewidth = e.wireframeLinewidth),
      e.wireframeLinecap !== void 0 && (i.wireframeLinecap = e.wireframeLinecap),
      e.wireframeLinejoin !== void 0 && (i.wireframeLinejoin = e.wireframeLinejoin),
      e.rotation !== void 0 && (i.rotation = e.rotation),
      e.linewidth !== void 0 && (i.linewidth = e.linewidth),
      e.dashSize !== void 0 && (i.dashSize = e.dashSize),
      e.gapSize !== void 0 && (i.gapSize = e.gapSize),
      e.scale !== void 0 && (i.scale = e.scale),
      e.polygonOffset !== void 0 && (i.polygonOffset = e.polygonOffset),
      e.polygonOffsetFactor !== void 0 && (i.polygonOffsetFactor = e.polygonOffsetFactor),
      e.polygonOffsetUnits !== void 0 && (i.polygonOffsetUnits = e.polygonOffsetUnits),
      e.dithering !== void 0 && (i.dithering = e.dithering),
      e.alphaToCoverage !== void 0 && (i.alphaToCoverage = e.alphaToCoverage),
      e.premultipliedAlpha !== void 0 && (i.premultipliedAlpha = e.premultipliedAlpha),
      e.forceSinglePass !== void 0 && (i.forceSinglePass = e.forceSinglePass),
      e.visible !== void 0 && (i.visible = e.visible),
      e.toneMapped !== void 0 && (i.toneMapped = e.toneMapped),
      e.userData !== void 0 && (i.userData = e.userData),
      e.vertexColors !== void 0 &&
        (typeof e.vertexColors == "number" ? (i.vertexColors = e.vertexColors > 0) : (i.vertexColors = e.vertexColors)),
      e.uniforms !== void 0)
    )
      for (const s in e.uniforms) {
        const l = e.uniforms[s];
        switch (((i.uniforms[s] = {}), l.type)) {
          case "t":
            i.uniforms[s].value = n(l.value);
            break;
          case "c":
            i.uniforms[s].value = new Ne().setHex(l.value);
            break;
          case "v2":
            i.uniforms[s].value = new fe().fromArray(l.value);
            break;
          case "v3":
            i.uniforms[s].value = new N().fromArray(l.value);
            break;
          case "v4":
            i.uniforms[s].value = new Ct().fromArray(l.value);
            break;
          case "m3":
            i.uniforms[s].value = new dt().fromArray(l.value);
            break;
          case "m4":
            i.uniforms[s].value = new st().fromArray(l.value);
            break;
          default:
            i.uniforms[s].value = l.value;
        }
      }
    if (
      (e.defines !== void 0 && (i.defines = e.defines),
      e.vertexShader !== void 0 && (i.vertexShader = e.vertexShader),
      e.fragmentShader !== void 0 && (i.fragmentShader = e.fragmentShader),
      e.glslVersion !== void 0 && (i.glslVersion = e.glslVersion),
      e.extensions !== void 0)
    )
      for (const s in e.extensions) i.extensions[s] = e.extensions[s];
    if (
      (e.lights !== void 0 && (i.lights = e.lights),
      e.clipping !== void 0 && (i.clipping = e.clipping),
      e.size !== void 0 && (i.size = e.size),
      e.sizeAttenuation !== void 0 && (i.sizeAttenuation = e.sizeAttenuation),
      e.map !== void 0 && (i.map = n(e.map)),
      e.matcap !== void 0 && (i.matcap = n(e.matcap)),
      e.alphaMap !== void 0 && (i.alphaMap = n(e.alphaMap)),
      e.bumpMap !== void 0 && (i.bumpMap = n(e.bumpMap)),
      e.bumpScale !== void 0 && (i.bumpScale = e.bumpScale),
      e.normalMap !== void 0 && (i.normalMap = n(e.normalMap)),
      e.normalMapType !== void 0 && (i.normalMapType = e.normalMapType),
      e.normalScale !== void 0)
    ) {
      let s = e.normalScale;
      Array.isArray(s) === !1 && (s = [s, s]), (i.normalScale = new fe().fromArray(s));
    }
    return (
      e.displacementMap !== void 0 && (i.displacementMap = n(e.displacementMap)),
      e.displacementScale !== void 0 && (i.displacementScale = e.displacementScale),
      e.displacementBias !== void 0 && (i.displacementBias = e.displacementBias),
      e.roughnessMap !== void 0 && (i.roughnessMap = n(e.roughnessMap)),
      e.metalnessMap !== void 0 && (i.metalnessMap = n(e.metalnessMap)),
      e.emissiveMap !== void 0 && (i.emissiveMap = n(e.emissiveMap)),
      e.emissiveIntensity !== void 0 && (i.emissiveIntensity = e.emissiveIntensity),
      e.specularMap !== void 0 && (i.specularMap = n(e.specularMap)),
      e.specularIntensityMap !== void 0 && (i.specularIntensityMap = n(e.specularIntensityMap)),
      e.specularColorMap !== void 0 && (i.specularColorMap = n(e.specularColorMap)),
      e.envMap !== void 0 && (i.envMap = n(e.envMap)),
      e.envMapRotation !== void 0 && i.envMapRotation.fromArray(e.envMapRotation),
      e.envMapIntensity !== void 0 && (i.envMapIntensity = e.envMapIntensity),
      e.reflectivity !== void 0 && (i.reflectivity = e.reflectivity),
      e.refractionRatio !== void 0 && (i.refractionRatio = e.refractionRatio),
      e.lightMap !== void 0 && (i.lightMap = n(e.lightMap)),
      e.lightMapIntensity !== void 0 && (i.lightMapIntensity = e.lightMapIntensity),
      e.aoMap !== void 0 && (i.aoMap = n(e.aoMap)),
      e.aoMapIntensity !== void 0 && (i.aoMapIntensity = e.aoMapIntensity),
      e.gradientMap !== void 0 && (i.gradientMap = n(e.gradientMap)),
      e.clearcoatMap !== void 0 && (i.clearcoatMap = n(e.clearcoatMap)),
      e.clearcoatRoughnessMap !== void 0 && (i.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)),
      e.clearcoatNormalMap !== void 0 && (i.clearcoatNormalMap = n(e.clearcoatNormalMap)),
      e.clearcoatNormalScale !== void 0 && (i.clearcoatNormalScale = new fe().fromArray(e.clearcoatNormalScale)),
      e.iridescenceMap !== void 0 && (i.iridescenceMap = n(e.iridescenceMap)),
      e.iridescenceThicknessMap !== void 0 && (i.iridescenceThicknessMap = n(e.iridescenceThicknessMap)),
      e.transmissionMap !== void 0 && (i.transmissionMap = n(e.transmissionMap)),
      e.thicknessMap !== void 0 && (i.thicknessMap = n(e.thicknessMap)),
      e.anisotropyMap !== void 0 && (i.anisotropyMap = n(e.anisotropyMap)),
      e.sheenColorMap !== void 0 && (i.sheenColorMap = n(e.sheenColorMap)),
      e.sheenRoughnessMap !== void 0 && (i.sheenRoughnessMap = n(e.sheenRoughnessMap)),
      i
    );
  }
  setTextures(e) {
    return (this.textures = e), this;
  }
  createMaterialFromType(e) {
    return uh.createMaterialFromType(e);
  }
  static createMaterialFromType(e) {
    const t = {
      ShadowMaterial: S_,
      SpriteMaterial: tp,
      RawShaderMaterial: M_,
      ShaderMaterial: Ei,
      PointsMaterial: ip,
      MeshPhysicalMaterial: w_,
      MeshStandardMaterial: up,
      MeshPhongMaterial: E_,
      MeshToonMaterial: T_,
      MeshNormalMaterial: A_,
      MeshLambertMaterial: b_,
      MeshDepthMaterial: Qd,
      MeshDistanceMaterial: $d,
      MeshBasicMaterial: Ur,
      MeshMatcapMaterial: C_,
      LineDashedMaterial: R_,
      LineBasicMaterial: On,
      Material: Cn,
    };
    return new t[e]();
  }
}
class Cd {
  static decodeText(e) {
    if (
      (console.warn(
        "THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead."
      ),
      typeof TextDecoder < "u")
    )
      return new TextDecoder().decode(e);
    let t = "";
    for (let n = 0, i = e.length; n < i; n++) t += String.fromCharCode(e[n]);
    try {
      return decodeURIComponent(escape(t));
    } catch {
      return t;
    }
  }
  static extractUrlBase(e) {
    const t = e.lastIndexOf("/");
    return t === -1 ? "./" : e.slice(0, t + 1);
  }
  static resolveURL(e, t) {
    return typeof e != "string" || e === ""
      ? ""
      : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")),
        /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
  }
}
class W_ extends vt {
  constructor() {
    super(),
      (this.isInstancedBufferGeometry = !0),
      (this.type = "InstancedBufferGeometry"),
      (this.instanceCount = 1 / 0);
  }
  copy(e) {
    return super.copy(e), (this.instanceCount = e.instanceCount), this;
  }
  toJSON() {
    const e = super.toJSON();
    return (e.instanceCount = this.instanceCount), (e.isInstancedBufferGeometry = !0), e;
  }
}
class X_ extends Zn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this,
      l = new ur(s.manager);
    l.setPath(s.path),
      l.setRequestHeader(s.requestHeader),
      l.setWithCredentials(s.withCredentials),
      l.load(
        e,
        function (c) {
          try {
            t(s.parse(JSON.parse(c)));
          } catch (u) {
            i ? i(u) : console.error(u), s.manager.itemError(e);
          }
        },
        n,
        i
      );
  }
  parse(e) {
    const t = {},
      n = {};
    function i(v, x) {
      if (t[x] !== void 0) return t[x];
      const y = v.interleavedBuffers[x],
        _ = s(v, y.buffer),
        w = ho(y.type, _),
        E = new qu(w, y.stride);
      return (E.uuid = y.uuid), (t[x] = E), E;
    }
    function s(v, x) {
      if (n[x] !== void 0) return n[x];
      const y = v.arrayBuffers[x],
        _ = new Uint32Array(y).buffer;
      return (n[x] = _), _;
    }
    const l = e.isInstancedBufferGeometry ? new W_() : new vt(),
      c = e.data.index;
    if (c !== void 0) {
      const v = ho(c.type, c.array);
      l.setIndex(new Ot(v, 1));
    }
    const u = e.data.attributes;
    for (const v in u) {
      const x = u[v];
      let M;
      if (x.isInterleavedBufferAttribute) {
        const y = i(e.data, x.data);
        M = new Ss(y, x.itemSize, x.offset, x.normalized);
      } else {
        const y = ho(x.type, x.array),
          _ = x.isInstancedBufferAttribute ? So : Ot;
        M = new _(y, x.itemSize, x.normalized);
      }
      x.name !== void 0 && (M.name = x.name), x.usage !== void 0 && M.setUsage(x.usage), l.setAttribute(v, M);
    }
    const h = e.data.morphAttributes;
    if (h)
      for (const v in h) {
        const x = h[v],
          M = [];
        for (let y = 0, _ = x.length; y < _; y++) {
          const w = x[y];
          let E;
          if (w.isInterleavedBufferAttribute) {
            const A = i(e.data, w.data);
            E = new Ss(A, w.itemSize, w.offset, w.normalized);
          } else {
            const A = ho(w.type, w.array);
            E = new Ot(A, w.itemSize, w.normalized);
          }
          w.name !== void 0 && (E.name = w.name), M.push(E);
        }
        l.morphAttributes[v] = M;
      }
    e.data.morphTargetsRelative && (l.morphTargetsRelative = !0);
    const p = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (p !== void 0)
      for (let v = 0, x = p.length; v !== x; ++v) {
        const M = p[v];
        l.addGroup(M.start, M.count, M.materialIndex);
      }
    const m = e.data.boundingSphere;
    if (m !== void 0) {
      const v = new N();
      m.center !== void 0 && v.fromArray(m.center), (l.boundingSphere = new bn(v, m.radius));
    }
    return e.name && (l.name = e.name), e.userData && (l.userData = e.userData), l;
  }
}
class EA extends Zn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this,
      l = this.path === "" ? Cd.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || l;
    const c = new ur(this.manager);
    c.setPath(this.path),
      c.setRequestHeader(this.requestHeader),
      c.setWithCredentials(this.withCredentials),
      c.load(
        e,
        function (u) {
          let h = null;
          try {
            h = JSON.parse(u);
          } catch (p) {
            i !== void 0 && i(p), console.error("THREE:ObjectLoader: Can't parse " + e + ".", p.message);
            return;
          }
          const d = h.metadata;
          if (d === void 0 || d.type === void 0 || d.type.toLowerCase() === "geometry") {
            i !== void 0 && i(new Error("THREE.ObjectLoader: Can't load " + e)),
              console.error("THREE.ObjectLoader: Can't load " + e);
            return;
          }
          s.parse(h, t);
        },
        n,
        i
      );
  }
  async loadAsync(e, t) {
    const n = this,
      i = this.path === "" ? Cd.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || i;
    const s = new ur(this.manager);
    s.setPath(this.path), s.setRequestHeader(this.requestHeader), s.setWithCredentials(this.withCredentials);
    const l = await s.loadAsync(e, t),
      c = JSON.parse(l),
      u = c.metadata;
    if (u === void 0 || u.type === void 0 || u.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    return await n.parseAsync(c);
  }
  parse(e, t) {
    const n = this.parseAnimations(e.animations),
      i = this.parseShapes(e.shapes),
      s = this.parseGeometries(e.geometries, i),
      l = this.parseImages(e.images, function () {
        t !== void 0 && t(h);
      }),
      c = this.parseTextures(e.textures, l),
      u = this.parseMaterials(e.materials, c),
      h = this.parseObject(e.object, s, u, c, n),
      d = this.parseSkeletons(e.skeletons, h);
    if ((this.bindSkeletons(h, d), this.bindLightTargets(h), t !== void 0)) {
      let p = !1;
      for (const m in l)
        if (l[m].data instanceof HTMLImageElement) {
          p = !0;
          break;
        }
      p === !1 && t(h);
    }
    return h;
  }
  async parseAsync(e) {
    const t = this.parseAnimations(e.animations),
      n = this.parseShapes(e.shapes),
      i = this.parseGeometries(e.geometries, n),
      s = await this.parseImagesAsync(e.images),
      l = this.parseTextures(e.textures, s),
      c = this.parseMaterials(e.materials, l),
      u = this.parseObject(e.object, i, c, l, t),
      h = this.parseSkeletons(e.skeletons, u);
    return this.bindSkeletons(u, h), this.bindLightTargets(u), u;
  }
  parseShapes(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0, i = e.length; n < i; n++) {
        const s = new vs().fromJSON(e[n]);
        t[s.uuid] = s;
      }
    return t;
  }
  parseSkeletons(e, t) {
    const n = {},
      i = {};
    if (
      (t.traverse(function (s) {
        s.isBone && (i[s.uuid] = s);
      }),
      e !== void 0)
    )
      for (let s = 0, l = e.length; s < l; s++) {
        const c = new Zu().fromJSON(e[s], i);
        n[c.uuid] = c;
      }
    return n;
  }
  parseGeometries(e, t) {
    const n = {};
    if (e !== void 0) {
      const i = new X_();
      for (let s = 0, l = e.length; s < l; s++) {
        let c;
        const u = e[s];
        switch (u.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            c = i.parse(u);
            break;
          default:
            u.type in m0
              ? (c = m0[u.type].fromJSON(u, t))
              : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${u.type}"`);
        }
        (c.uuid = u.uuid),
          u.name !== void 0 && (c.name = u.name),
          u.userData !== void 0 && (c.userData = u.userData),
          (n[u.uuid] = c);
      }
    }
    return n;
  }
  parseMaterials(e, t) {
    const n = {},
      i = {};
    if (e !== void 0) {
      const s = new uh();
      s.setTextures(t);
      for (let l = 0, c = e.length; l < c; l++) {
        const u = e[l];
        n[u.uuid] === void 0 && (n[u.uuid] = s.parse(u)), (i[u.uuid] = n[u.uuid]);
      }
    }
    return i;
  }
  parseAnimations(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0; n < e.length; n++) {
        const i = e[n],
          s = Fa.parse(i);
        t[s.uuid] = s;
      }
    return t;
  }
  parseImages(e, t) {
    const n = this,
      i = {};
    let s;
    function l(u) {
      return (
        n.manager.itemStart(u),
        s.load(
          u,
          function () {
            n.manager.itemEnd(u);
          },
          void 0,
          function () {
            n.manager.itemError(u), n.manager.itemEnd(u);
          }
        )
      );
    }
    function c(u) {
      if (typeof u == "string") {
        const h = u,
          d = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h) ? h : n.resourcePath + h;
        return l(d);
      } else return u.data ? { data: ho(u.type, u.data), width: u.width, height: u.height } : null;
    }
    if (e !== void 0 && e.length > 0) {
      const u = new pp(t);
      (s = new Oa(u)), s.setCrossOrigin(this.crossOrigin);
      for (let h = 0, d = e.length; h < d; h++) {
        const p = e[h],
          m = p.url;
        if (Array.isArray(m)) {
          const v = [];
          for (let x = 0, M = m.length; x < M; x++) {
            const y = m[x],
              _ = c(y);
            _ !== null && (_ instanceof HTMLImageElement ? v.push(_) : v.push(new ki(_.data, _.width, _.height)));
          }
          i[p.uuid] = new hs(v);
        } else {
          const v = c(p.url);
          i[p.uuid] = new hs(v);
        }
      }
    }
    return i;
  }
  async parseImagesAsync(e) {
    const t = this,
      n = {};
    let i;
    async function s(l) {
      if (typeof l == "string") {
        const c = l,
          u = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c) ? c : t.resourcePath + c;
        return await i.loadAsync(u);
      } else return l.data ? { data: ho(l.type, l.data), width: l.width, height: l.height } : null;
    }
    if (e !== void 0 && e.length > 0) {
      (i = new Oa(this.manager)), i.setCrossOrigin(this.crossOrigin);
      for (let l = 0, c = e.length; l < c; l++) {
        const u = e[l],
          h = u.url;
        if (Array.isArray(h)) {
          const d = [];
          for (let p = 0, m = h.length; p < m; p++) {
            const v = h[p],
              x = await s(v);
            x !== null && (x instanceof HTMLImageElement ? d.push(x) : d.push(new ki(x.data, x.width, x.height)));
          }
          n[u.uuid] = new hs(d);
        } else {
          const d = await s(u.url);
          n[u.uuid] = new hs(d);
        }
      }
    }
    return n;
  }
  parseTextures(e, t) {
    function n(s, l) {
      return typeof s == "number"
        ? s
        : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", s), l[s]);
    }
    const i = {};
    if (e !== void 0)
      for (let s = 0, l = e.length; s < l; s++) {
        const c = e[s];
        c.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', c.uuid),
          t[c.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", c.image);
        const u = t[c.image],
          h = u.data;
        let d;
        Array.isArray(h)
          ? ((d = new Ha()), h.length === 6 && (d.needsUpdate = !0))
          : (h && h.data ? (d = new ki()) : (d = new Kt()), h && (d.needsUpdate = !0)),
          (d.source = u),
          (d.uuid = c.uuid),
          c.name !== void 0 && (d.name = c.name),
          c.mapping !== void 0 && (d.mapping = n(c.mapping, TA)),
          c.channel !== void 0 && (d.channel = c.channel),
          c.offset !== void 0 && d.offset.fromArray(c.offset),
          c.repeat !== void 0 && d.repeat.fromArray(c.repeat),
          c.center !== void 0 && d.center.fromArray(c.center),
          c.rotation !== void 0 && (d.rotation = c.rotation),
          c.wrap !== void 0 && ((d.wrapS = n(c.wrap[0], x0)), (d.wrapT = n(c.wrap[1], x0))),
          c.format !== void 0 && (d.format = c.format),
          c.internalFormat !== void 0 && (d.internalFormat = c.internalFormat),
          c.type !== void 0 && (d.type = c.type),
          c.colorSpace !== void 0 && (d.colorSpace = c.colorSpace),
          c.minFilter !== void 0 && (d.minFilter = n(c.minFilter, y0)),
          c.magFilter !== void 0 && (d.magFilter = n(c.magFilter, y0)),
          c.anisotropy !== void 0 && (d.anisotropy = c.anisotropy),
          c.flipY !== void 0 && (d.flipY = c.flipY),
          c.generateMipmaps !== void 0 && (d.generateMipmaps = c.generateMipmaps),
          c.premultiplyAlpha !== void 0 && (d.premultiplyAlpha = c.premultiplyAlpha),
          c.unpackAlignment !== void 0 && (d.unpackAlignment = c.unpackAlignment),
          c.compareFunction !== void 0 && (d.compareFunction = c.compareFunction),
          c.userData !== void 0 && (d.userData = c.userData),
          (i[c.uuid] = d);
      }
    return i;
  }
  parseObject(e, t, n, i, s) {
    let l;
    function c(m) {
      return t[m] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", m), t[m];
    }
    function u(m) {
      if (m !== void 0) {
        if (Array.isArray(m)) {
          const v = [];
          for (let x = 0, M = m.length; x < M; x++) {
            const y = m[x];
            n[y] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", y), v.push(n[y]);
          }
          return v;
        }
        return n[m] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", m), n[m];
      }
    }
    function h(m) {
      return i[m] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", m), i[m];
    }
    let d, p;
    switch (e.type) {
      case "Scene":
        (l = new ep()),
          e.background !== void 0 &&
            (Number.isInteger(e.background) ? (l.background = new Ne(e.background)) : (l.background = h(e.background))),
          e.environment !== void 0 && (l.environment = h(e.environment)),
          e.fog !== void 0 &&
            (e.fog.type === "Fog"
              ? (l.fog = new Yu(e.fog.color, e.fog.near, e.fog.far))
              : e.fog.type === "FogExp2" && (l.fog = new Xu(e.fog.color, e.fog.density)),
            e.fog.name !== "" && (l.fog.name = e.fog.name)),
          e.backgroundBlurriness !== void 0 && (l.backgroundBlurriness = e.backgroundBlurriness),
          e.backgroundIntensity !== void 0 && (l.backgroundIntensity = e.backgroundIntensity),
          e.backgroundRotation !== void 0 && l.backgroundRotation.fromArray(e.backgroundRotation),
          e.environmentIntensity !== void 0 && (l.environmentIntensity = e.environmentIntensity),
          e.environmentRotation !== void 0 && l.environmentRotation.fromArray(e.environmentRotation);
        break;
      case "PerspectiveCamera":
        (l = new gn(e.fov, e.aspect, e.near, e.far)),
          e.focus !== void 0 && (l.focus = e.focus),
          e.zoom !== void 0 && (l.zoom = e.zoom),
          e.filmGauge !== void 0 && (l.filmGauge = e.filmGauge),
          e.filmOffset !== void 0 && (l.filmOffset = e.filmOffset),
          e.view !== void 0 && (l.view = Object.assign({}, e.view));
        break;
      case "OrthographicCamera":
        (l = new Wa(e.left, e.right, e.top, e.bottom, e.near, e.far)),
          e.zoom !== void 0 && (l.zoom = e.zoom),
          e.view !== void 0 && (l.view = Object.assign({}, e.view));
        break;
      case "AmbientLight":
        l = new k_(e.color, e.intensity);
        break;
      case "DirectionalLight":
        (l = new z_(e.color, e.intensity)), (l.target = e.target || "");
        break;
      case "PointLight":
        l = new B_(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        l = new V_(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        (l = new O_(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay)), (l.target = e.target || "");
        break;
      case "HemisphereLight":
        l = new F_(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        l = new G_().fromJSON(e);
        break;
      case "SkinnedMesh":
        (d = c(e.geometry)),
          (p = u(e.material)),
          (l = new o_(d, p)),
          e.bindMode !== void 0 && (l.bindMode = e.bindMode),
          e.bindMatrix !== void 0 && l.bindMatrix.fromArray(e.bindMatrix),
          e.skeleton !== void 0 && (l.skeleton = e.skeleton);
        break;
      case "Mesh":
        (d = c(e.geometry)), (p = u(e.material)), (l = new rn(d, p));
        break;
      case "InstancedMesh":
        (d = c(e.geometry)), (p = u(e.material));
        const m = e.count,
          v = e.instanceMatrix,
          x = e.instanceColor;
        (l = new a_(d, p, m)),
          (l.instanceMatrix = new So(new Float32Array(v.array), 16)),
          x !== void 0 && (l.instanceColor = new So(new Float32Array(x.array), x.itemSize));
        break;
      case "BatchedMesh":
        (d = c(e.geometry)),
          (p = u(e.material)),
          (l = new l_(e.maxInstanceCount, e.maxVertexCount, e.maxIndexCount, p)),
          (l.geometry = d),
          (l.perObjectFrustumCulled = e.perObjectFrustumCulled),
          (l.sortObjects = e.sortObjects),
          (l._drawRanges = e.drawRanges),
          (l._reservedRanges = e.reservedRanges),
          (l._visibility = e.visibility),
          (l._active = e.active),
          (l._bounds = e.bounds.map((M) => {
            const y = new Fn();
            y.min.fromArray(M.boxMin), y.max.fromArray(M.boxMax);
            const _ = new bn();
            return (
              (_.radius = M.sphereRadius),
              _.center.fromArray(M.sphereCenter),
              { boxInitialized: M.boxInitialized, box: y, sphereInitialized: M.sphereInitialized, sphere: _ }
            );
          })),
          (l._maxInstanceCount = e.maxInstanceCount),
          (l._maxVertexCount = e.maxVertexCount),
          (l._maxIndexCount = e.maxIndexCount),
          (l._geometryInitialized = e.geometryInitialized),
          (l._geometryCount = e.geometryCount),
          (l._matricesTexture = h(e.matricesTexture.uuid)),
          e.colorsTexture !== void 0 && (l._colorsTexture = h(e.colorsTexture.uuid));
        break;
      case "LOD":
        l = new s_();
        break;
      case "Line":
        l = new Lr(c(e.geometry), u(e.material));
        break;
      case "LineLoop":
        l = new c_(c(e.geometry), u(e.material));
        break;
      case "LineSegments":
        l = new Gi(c(e.geometry), u(e.material));
        break;
      case "PointCloud":
      case "Points":
        l = new u_(c(e.geometry), u(e.material));
        break;
      case "Sprite":
        l = new r_(u(e.material));
        break;
      case "Group":
        l = new po();
        break;
      case "Bone":
        l = new np();
        break;
      default:
        l = new Rt();
    }
    if (
      ((l.uuid = e.uuid),
      e.name !== void 0 && (l.name = e.name),
      e.matrix !== void 0
        ? (l.matrix.fromArray(e.matrix),
          e.matrixAutoUpdate !== void 0 && (l.matrixAutoUpdate = e.matrixAutoUpdate),
          l.matrixAutoUpdate && l.matrix.decompose(l.position, l.quaternion, l.scale))
        : (e.position !== void 0 && l.position.fromArray(e.position),
          e.rotation !== void 0 && l.rotation.fromArray(e.rotation),
          e.quaternion !== void 0 && l.quaternion.fromArray(e.quaternion),
          e.scale !== void 0 && l.scale.fromArray(e.scale)),
      e.up !== void 0 && l.up.fromArray(e.up),
      e.castShadow !== void 0 && (l.castShadow = e.castShadow),
      e.receiveShadow !== void 0 && (l.receiveShadow = e.receiveShadow),
      e.shadow &&
        (e.shadow.intensity !== void 0 && (l.shadow.intensity = e.shadow.intensity),
        e.shadow.bias !== void 0 && (l.shadow.bias = e.shadow.bias),
        e.shadow.normalBias !== void 0 && (l.shadow.normalBias = e.shadow.normalBias),
        e.shadow.radius !== void 0 && (l.shadow.radius = e.shadow.radius),
        e.shadow.mapSize !== void 0 && l.shadow.mapSize.fromArray(e.shadow.mapSize),
        e.shadow.camera !== void 0 && (l.shadow.camera = this.parseObject(e.shadow.camera))),
      e.visible !== void 0 && (l.visible = e.visible),
      e.frustumCulled !== void 0 && (l.frustumCulled = e.frustumCulled),
      e.renderOrder !== void 0 && (l.renderOrder = e.renderOrder),
      e.userData !== void 0 && (l.userData = e.userData),
      e.layers !== void 0 && (l.layers.mask = e.layers),
      e.children !== void 0)
    ) {
      const m = e.children;
      for (let v = 0; v < m.length; v++) l.add(this.parseObject(m[v], t, n, i, s));
    }
    if (e.animations !== void 0) {
      const m = e.animations;
      for (let v = 0; v < m.length; v++) {
        const x = m[v];
        l.animations.push(s[x]);
      }
    }
    if (e.type === "LOD") {
      e.autoUpdate !== void 0 && (l.autoUpdate = e.autoUpdate);
      const m = e.levels;
      for (let v = 0; v < m.length; v++) {
        const x = m[v],
          M = l.getObjectByProperty("uuid", x.object);
        M !== void 0 && l.addLevel(M, x.distance, x.hysteresis);
      }
    }
    return l;
  }
  bindSkeletons(e, t) {
    Object.keys(t).length !== 0 &&
      e.traverse(function (n) {
        if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) {
          const i = t[n.skeleton];
          i === void 0
            ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton)
            : n.bind(i, n.bindMatrix);
        }
      });
  }
  bindLightTargets(e) {
    e.traverse(function (t) {
      if (t.isDirectionalLight || t.isSpotLight) {
        const n = t.target,
          i = e.getObjectByProperty("uuid", n);
        i !== void 0 ? (t.target = i) : (t.target = new Rt());
      }
    });
  }
}
const TA = {
    UVMapping: Nu,
    CubeReflectionMapping: lr,
    CubeRefractionMapping: Ir,
    EquirectangularReflectionMapping: Sa,
    EquirectangularRefractionMapping: Ma,
    CubeUVReflectionMapping: wo,
  },
  x0 = { RepeatWrapping: wa, ClampToEdgeWrapping: fi, MirroredRepeatWrapping: Ea },
  y0 = {
    NearestFilter: _n,
    NearestMipmapNearestFilter: Ud,
    NearestMipmapLinearFilter: uo,
    LinearFilter: an,
    LinearMipmapNearestFilter: fa,
    LinearMipmapLinearFilter: Oi,
  };
class AA extends Zn {
  constructor(e) {
    super(e),
      (this.isImageBitmapLoader = !0),
      typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),
      typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."),
      (this.options = { premultiplyAlpha: "none" });
  }
  setOptions(e) {
    return (this.options = e), this;
  }
  load(e, t, n, i) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), (e = this.manager.resolveURL(e));
    const s = this,
      l = rr.get(e);
    if (l !== void 0) {
      if ((s.manager.itemStart(e), l.then)) {
        l.then((h) => {
          t && t(h), s.manager.itemEnd(e);
        }).catch((h) => {
          i && i(h);
        });
        return;
      }
      return (
        setTimeout(function () {
          t && t(l), s.manager.itemEnd(e);
        }, 0),
        l
      );
    }
    const c = {};
    (c.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include"), (c.headers = this.requestHeader);
    const u = fetch(e, c)
      .then(function (h) {
        return h.blob();
      })
      .then(function (h) {
        return createImageBitmap(h, Object.assign(s.options, { colorSpaceConversion: "none" }));
      })
      .then(function (h) {
        return rr.add(e, h), t && t(h), s.manager.itemEnd(e), h;
      })
      .catch(function (h) {
        i && i(h), rr.remove(e), s.manager.itemError(e), s.manager.itemEnd(e);
      });
    rr.add(e, u), s.manager.itemStart(e);
  }
}
let Nc;
class gp {
  static getContext() {
    return Nc === void 0 && (Nc = new (window.AudioContext || window.webkitAudioContext)()), Nc;
  }
  static setContext(e) {
    Nc = e;
  }
}
class bA extends Zn {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const s = this,
      l = new ur(this.manager);
    l.setResponseType("arraybuffer"),
      l.setPath(this.path),
      l.setRequestHeader(this.requestHeader),
      l.setWithCredentials(this.withCredentials),
      l.load(
        e,
        function (u) {
          try {
            const h = u.slice(0);
            gp.getContext()
              .decodeAudioData(h, function (p) {
                t(p);
              })
              .catch(c);
          } catch (h) {
            c(h);
          }
        },
        n,
        i
      );
    function c(u) {
      i ? i(u) : console.error(u), s.manager.itemError(e);
    }
  }
}
const S0 = new st(),
  M0 = new st(),
  ts = new st();
class CA {
  constructor() {
    (this.type = "StereoCamera"),
      (this.aspect = 1),
      (this.eyeSep = 0.064),
      (this.cameraL = new gn()),
      this.cameraL.layers.enable(1),
      (this.cameraL.matrixAutoUpdate = !1),
      (this.cameraR = new gn()),
      this.cameraR.layers.enable(2),
      (this.cameraR.matrixAutoUpdate = !1),
      (this._cache = { focus: null, fov: null, aspect: null, near: null, far: null, zoom: null, eyeSep: null });
  }
  update(e) {
    const t = this._cache;
    if (
      t.focus !== e.focus ||
      t.fov !== e.fov ||
      t.aspect !== e.aspect * this.aspect ||
      t.near !== e.near ||
      t.far !== e.far ||
      t.zoom !== e.zoom ||
      t.eyeSep !== this.eyeSep
    ) {
      (t.focus = e.focus),
        (t.fov = e.fov),
        (t.aspect = e.aspect * this.aspect),
        (t.near = e.near),
        (t.far = e.far),
        (t.zoom = e.zoom),
        (t.eyeSep = this.eyeSep),
        ts.copy(e.projectionMatrix);
      const i = t.eyeSep / 2,
        s = (i * t.near) / t.focus,
        l = (t.near * Math.tan(ms * t.fov * 0.5)) / t.zoom;
      let c, u;
      (M0.elements[12] = -i),
        (S0.elements[12] = i),
        (c = -l * t.aspect + s),
        (u = l * t.aspect + s),
        (ts.elements[0] = (2 * t.near) / (u - c)),
        (ts.elements[8] = (u + c) / (u - c)),
        this.cameraL.projectionMatrix.copy(ts),
        (c = -l * t.aspect - s),
        (u = l * t.aspect - s),
        (ts.elements[0] = (2 * t.near) / (u - c)),
        (ts.elements[8] = (u + c) / (u - c)),
        this.cameraR.projectionMatrix.copy(ts);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(M0),
      this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(S0);
  }
}
class vp {
  constructor(e = !0) {
    (this.autoStart = e), (this.startTime = 0), (this.oldTime = 0), (this.elapsedTime = 0), (this.running = !1);
  }
  start() {
    (this.startTime = w0()), (this.oldTime = this.startTime), (this.elapsedTime = 0), (this.running = !0);
  }
  stop() {
    this.getElapsedTime(), (this.running = !1), (this.autoStart = !1);
  }
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running) return this.start(), 0;
    if (this.running) {
      const t = w0();
      (e = (t - this.oldTime) / 1e3), (this.oldTime = t), (this.elapsedTime += e);
    }
    return e;
  }
}
function w0() {
  return performance.now();
}
const ns = new N(),
  E0 = new qn(),
  RA = new N(),
  is = new N();
class PA extends Rt {
  constructor() {
    super(),
      (this.type = "AudioListener"),
      (this.context = gp.getContext()),
      (this.gain = this.context.createGain()),
      this.gain.connect(this.context.destination),
      (this.filter = null),
      (this.timeDelta = 0),
      (this._clock = new vp());
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    return (
      this.filter !== null &&
        (this.gain.disconnect(this.filter),
        this.filter.disconnect(this.context.destination),
        this.gain.connect(this.context.destination),
        (this.filter = null)),
      this
    );
  }
  getFilter() {
    return this.filter;
  }
  setFilter(e) {
    return (
      this.filter !== null
        ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination))
        : this.gain.disconnect(this.context.destination),
      (this.filter = e),
      this.gain.connect(this.filter),
      this.filter.connect(this.context.destination),
      this
    );
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const t = this.context.listener,
      n = this.up;
    if (
      ((this.timeDelta = this._clock.getDelta()),
      this.matrixWorld.decompose(ns, E0, RA),
      is.set(0, 0, -1).applyQuaternion(E0),
      t.positionX)
    ) {
      const i = this.context.currentTime + this.timeDelta;
      t.positionX.linearRampToValueAtTime(ns.x, i),
        t.positionY.linearRampToValueAtTime(ns.y, i),
        t.positionZ.linearRampToValueAtTime(ns.z, i),
        t.forwardX.linearRampToValueAtTime(is.x, i),
        t.forwardY.linearRampToValueAtTime(is.y, i),
        t.forwardZ.linearRampToValueAtTime(is.z, i),
        t.upX.linearRampToValueAtTime(n.x, i),
        t.upY.linearRampToValueAtTime(n.y, i),
        t.upZ.linearRampToValueAtTime(n.z, i);
    } else t.setPosition(ns.x, ns.y, ns.z), t.setOrientation(is.x, is.y, is.z, n.x, n.y, n.z);
  }
}
class Y_ extends Rt {
  constructor(e) {
    super(),
      (this.type = "Audio"),
      (this.listener = e),
      (this.context = e.context),
      (this.gain = this.context.createGain()),
      this.gain.connect(e.getInput()),
      (this.autoplay = !1),
      (this.buffer = null),
      (this.detune = 0),
      (this.loop = !1),
      (this.loopStart = 0),
      (this.loopEnd = 0),
      (this.offset = 0),
      (this.duration = void 0),
      (this.playbackRate = 1),
      (this.isPlaying = !1),
      (this.hasPlaybackControl = !0),
      (this.source = null),
      (this.sourceType = "empty"),
      (this._startedAt = 0),
      (this._progress = 0),
      (this._connected = !1),
      (this.filters = []);
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(e) {
    return (this.hasPlaybackControl = !1), (this.sourceType = "audioNode"), (this.source = e), this.connect(), this;
  }
  setMediaElementSource(e) {
    return (
      (this.hasPlaybackControl = !1),
      (this.sourceType = "mediaNode"),
      (this.source = this.context.createMediaElementSource(e)),
      this.connect(),
      this
    );
  }
  setMediaStreamSource(e) {
    return (
      (this.hasPlaybackControl = !1),
      (this.sourceType = "mediaStreamNode"),
      (this.source = this.context.createMediaStreamSource(e)),
      this.connect(),
      this
    );
  }
  setBuffer(e) {
    return (this.buffer = e), (this.sourceType = "buffer"), this.autoplay && this.play(), this;
  }
  play(e = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const t = this.context.createBufferSource();
    return (
      (t.buffer = this.buffer),
      (t.loop = this.loop),
      (t.loopStart = this.loopStart),
      (t.loopEnd = this.loopEnd),
      (t.onended = this.onEnded.bind(this)),
      t.start(this._startedAt, this._progress + this.offset, this.duration),
      (this.isPlaying = !0),
      (this.source = t),
      this.setDetune(this.detune),
      this.setPlaybackRate(this.playbackRate),
      this.connect()
    );
  }
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return (
      this.isPlaying === !0 &&
        ((this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate),
        this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)),
        this.source.stop(),
        (this.source.onended = null),
        (this.isPlaying = !1)),
      this
    );
  }
  stop(e = 0) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return (
      (this._progress = 0),
      this.source !== null && (this.source.stop(this.context.currentTime + e), (this.source.onended = null)),
      (this.isPlaying = !1),
      this
    );
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++) this.filters[e - 1].connect(this.filters[e]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else this.source.connect(this.getOutput());
    return (this._connected = !0), this;
  }
  disconnect() {
    if (this._connected !== !1) {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let e = 1, t = this.filters.length; e < t; e++) this.filters[e - 1].disconnect(this.filters[e]);
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else this.source.disconnect(this.getOutput());
      return (this._connected = !1), this;
    }
  }
  getFilters() {
    return this.filters;
  }
  setFilters(e) {
    return (
      e || (e = []),
      this._connected === !0
        ? (this.disconnect(), (this.filters = e.slice()), this.connect())
        : (this.filters = e.slice()),
      this
    );
  }
  setDetune(e) {
    return (
      (this.detune = e),
      this.isPlaying === !0 &&
        this.source.detune !== void 0 &&
        this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01),
      this
    );
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return (
      (this.playbackRate = e),
      this.isPlaying === !0 &&
        this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01),
      this
    );
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = !1;
  }
  getLoop() {
    return this.hasPlaybackControl === !1
      ? (console.warn("THREE.Audio: this Audio has no playback control."), !1)
      : this.loop;
  }
  setLoop(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return (this.loop = e), this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  setLoopStart(e) {
    return (this.loopStart = e), this;
  }
  setLoopEnd(e) {
    return (this.loopEnd = e), this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
}
const rs = new N(),
  T0 = new qn(),
  IA = new N(),
  ss = new N();
class LA extends Y_ {
  constructor(e) {
    super(e),
      (this.panner = this.context.createPanner()),
      (this.panner.panningModel = "HRTF"),
      this.panner.connect(this.gain);
  }
  connect() {
    super.connect(), this.panner.connect(this.gain);
  }
  disconnect() {
    super.disconnect(), this.panner.disconnect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(e) {
    return (this.panner.refDistance = e), this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(e) {
    return (this.panner.rolloffFactor = e), this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(e) {
    return (this.panner.distanceModel = e), this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(e) {
    return (this.panner.maxDistance = e), this;
  }
  setDirectionalCone(e, t, n) {
    return (this.panner.coneInnerAngle = e), (this.panner.coneOuterAngle = t), (this.panner.coneOuterGain = n), this;
  }
  updateMatrixWorld(e) {
    if ((super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1)) return;
    this.matrixWorld.decompose(rs, T0, IA), ss.set(0, 0, 1).applyQuaternion(T0);
    const t = this.panner;
    if (t.positionX) {
      const n = this.context.currentTime + this.listener.timeDelta;
      t.positionX.linearRampToValueAtTime(rs.x, n),
        t.positionY.linearRampToValueAtTime(rs.y, n),
        t.positionZ.linearRampToValueAtTime(rs.z, n),
        t.orientationX.linearRampToValueAtTime(ss.x, n),
        t.orientationY.linearRampToValueAtTime(ss.y, n),
        t.orientationZ.linearRampToValueAtTime(ss.z, n);
    } else t.setPosition(rs.x, rs.y, rs.z), t.setOrientation(ss.x, ss.y, ss.z);
  }
}
class DA {
  constructor(e, t = 2048) {
    (this.analyser = e.context.createAnalyser()),
      (this.analyser.fftSize = t),
      (this.data = new Uint8Array(this.analyser.frequencyBinCount)),
      e.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  getAverageFrequency() {
    let e = 0;
    const t = this.getFrequencyData();
    for (let n = 0; n < t.length; n++) e += t[n];
    return e / t.length;
  }
}
class q_ {
  constructor(e, t, n) {
    (this.binding = e), (this.valueSize = n);
    let i, s, l;
    switch (t) {
      case "quaternion":
        (i = this._slerp),
          (s = this._slerpAdditive),
          (l = this._setAdditiveIdentityQuaternion),
          (this.buffer = new Float64Array(n * 6)),
          (this._workIndex = 5);
        break;
      case "string":
      case "bool":
        (i = this._select), (s = this._select), (l = this._setAdditiveIdentityOther), (this.buffer = new Array(n * 5));
        break;
      default:
        (i = this._lerp),
          (s = this._lerpAdditive),
          (l = this._setAdditiveIdentityNumeric),
          (this.buffer = new Float64Array(n * 5));
    }
    (this._mixBufferRegion = i),
      (this._mixBufferRegionAdditive = s),
      (this._setIdentity = l),
      (this._origIndex = 3),
      (this._addIndex = 4),
      (this.cumulativeWeight = 0),
      (this.cumulativeWeightAdditive = 0),
      (this.useCount = 0),
      (this.referenceCount = 0);
  }
  accumulate(e, t) {
    const n = this.buffer,
      i = this.valueSize,
      s = e * i + i;
    let l = this.cumulativeWeight;
    if (l === 0) {
      for (let c = 0; c !== i; ++c) n[s + c] = n[c];
      l = t;
    } else {
      l += t;
      const c = t / l;
      this._mixBufferRegion(n, s, 0, c, i);
    }
    this.cumulativeWeight = l;
  }
  accumulateAdditive(e) {
    const t = this.buffer,
      n = this.valueSize,
      i = n * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(),
      this._mixBufferRegionAdditive(t, i, 0, e, n),
      (this.cumulativeWeightAdditive += e);
  }
  apply(e) {
    const t = this.valueSize,
      n = this.buffer,
      i = e * t + t,
      s = this.cumulativeWeight,
      l = this.cumulativeWeightAdditive,
      c = this.binding;
    if (((this.cumulativeWeight = 0), (this.cumulativeWeightAdditive = 0), s < 1)) {
      const u = t * this._origIndex;
      this._mixBufferRegion(n, i, u, 1 - s, t);
    }
    l > 0 && this._mixBufferRegionAdditive(n, i, this._addIndex * t, 1, t);
    for (let u = t, h = t + t; u !== h; ++u)
      if (n[u] !== n[u + t]) {
        c.setValue(n, i);
        break;
      }
  }
  saveOriginalState() {
    const e = this.binding,
      t = this.buffer,
      n = this.valueSize,
      i = n * this._origIndex;
    e.getValue(t, i);
    for (let s = n, l = i; s !== l; ++s) t[s] = t[i + (s % n)];
    this._setIdentity(), (this.cumulativeWeight = 0), (this.cumulativeWeightAdditive = 0);
  }
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize,
      t = e + this.valueSize;
    for (let n = e; n < t; n++) this.buffer[n] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), (this.buffer[this._addIndex * this.valueSize + 3] = 1);
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize,
      t = this._addIndex * this.valueSize;
    for (let n = 0; n < this.valueSize; n++) this.buffer[t + n] = this.buffer[e + n];
  }
  _select(e, t, n, i, s) {
    if (i >= 0.5) for (let l = 0; l !== s; ++l) e[t + l] = e[n + l];
  }
  _slerp(e, t, n, i) {
    qn.slerpFlat(e, t, e, t, e, n, i);
  }
  _slerpAdditive(e, t, n, i, s) {
    const l = this._workIndex * s;
    qn.multiplyQuaternionsFlat(e, l, e, t, e, n), qn.slerpFlat(e, t, e, t, e, l, i);
  }
  _lerp(e, t, n, i, s) {
    const l = 1 - i;
    for (let c = 0; c !== s; ++c) {
      const u = t + c;
      e[u] = e[u] * l + e[n + c] * i;
    }
  }
  _lerpAdditive(e, t, n, i, s) {
    for (let l = 0; l !== s; ++l) {
      const c = t + l;
      e[c] = e[c] + e[n + l] * i;
    }
  }
}
const _p = "\\[\\]\\.:\\/",
  UA = new RegExp("[" + _p + "]", "g"),
  xp = "[^" + _p + "]",
  NA = "[^" + _p.replace("\\.", "") + "]",
  FA = /((?:WC+[\/:])*)/.source.replace("WC", xp),
  OA = /(WCOD+)?/.source.replace("WCOD", NA),
  BA = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", xp),
  zA = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", xp),
  kA = new RegExp("^" + FA + OA + BA + zA + "$"),
  VA = ["material", "materials", "bones", "map"];
class HA {
  constructor(e, t, n) {
    const i = n || bt.parseTrackName(t);
    (this._targetGroup = e), (this._bindings = e.subscribe_(t, i));
  }
  getValue(e, t) {
    this.bind();
    const n = this._targetGroup.nCachedObjects_,
      i = this._bindings[n];
    i !== void 0 && i.getValue(e, t);
  }
  setValue(e, t) {
    const n = this._bindings;
    for (let i = this._targetGroup.nCachedObjects_, s = n.length; i !== s; ++i) n[i].setValue(e, t);
  }
  bind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t) e[t].bind();
  }
  unbind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t) e[t].unbind();
  }
}
class bt {
  constructor(e, t, n) {
    (this.path = t),
      (this.parsedPath = n || bt.parseTrackName(t)),
      (this.node = bt.findNode(e, this.parsedPath.nodeName)),
      (this.rootNode = e),
      (this.getValue = this._getValue_unbound),
      (this.setValue = this._setValue_unbound);
  }
  static create(e, t, n) {
    return e && e.isAnimationObjectGroup ? new bt.Composite(e, t, n) : new bt(e, t, n);
  }
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace(UA, "");
  }
  static parseTrackName(e) {
    const t = kA.exec(e);
    if (t === null) throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    const n = { nodeName: t[2], objectName: t[3], objectIndex: t[4], propertyName: t[5], propertyIndex: t[6] },
      i = n.nodeName && n.nodeName.lastIndexOf(".");
    if (i !== void 0 && i !== -1) {
      const s = n.nodeName.substring(i + 1);
      VA.indexOf(s) !== -1 && ((n.nodeName = n.nodeName.substring(0, i)), (n.objectName = s));
    }
    if (n.propertyName === null || n.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    return n;
  }
  static findNode(e, t) {
    if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid) return e;
    if (e.skeleton) {
      const n = e.skeleton.getBoneByName(t);
      if (n !== void 0) return n;
    }
    if (e.children) {
      const n = function (s) {
          for (let l = 0; l < s.length; l++) {
            const c = s[l];
            if (c.name === t || c.uuid === t) return c;
            const u = n(c.children);
            if (u) return u;
          }
          return null;
        },
        i = n(e.children);
      if (i) return i;
    }
    return null;
  }
  _getValue_unavailable() {}
  _setValue_unavailable() {}
  _getValue_direct(e, t) {
    e[t] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i) e[t++] = n[i];
  }
  _getValue_arrayElement(e, t) {
    e[t] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, t) {
    this.resolvedProperty.toArray(e, t);
  }
  _setValue_direct(e, t) {
    this.targetObject[this.propertyName] = e[t];
  }
  _setValue_direct_setNeedsUpdate(e, t) {
    (this.targetObject[this.propertyName] = e[t]), (this.targetObject.needsUpdate = !0);
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
    (this.targetObject[this.propertyName] = e[t]), (this.targetObject.matrixWorldNeedsUpdate = !0);
  }
  _setValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i) n[i] = e[t++];
  }
  _setValue_array_setNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i) n[i] = e[t++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, s = n.length; i !== s; ++i) n[i] = e[t++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _setValue_arrayElement(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
  }
  _setValue_arrayElement_setNeedsUpdate(e, t) {
    (this.resolvedProperty[this.propertyIndex] = e[t]), (this.targetObject.needsUpdate = !0);
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
    (this.resolvedProperty[this.propertyIndex] = e[t]), (this.targetObject.matrixWorldNeedsUpdate = !0);
  }
  _setValue_fromArray(e, t) {
    this.resolvedProperty.fromArray(e, t);
  }
  _setValue_fromArray_setNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), (this.targetObject.needsUpdate = !0);
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), (this.targetObject.matrixWorldNeedsUpdate = !0);
  }
  _getValue_unbound(e, t) {
    this.bind(), this.getValue(e, t);
  }
  _setValue_unbound(e, t) {
    this.bind(), this.setValue(e, t);
  }
  bind() {
    let e = this.node;
    const t = this.parsedPath,
      n = t.objectName,
      i = t.propertyName;
    let s = t.propertyIndex;
    if (
      (e || ((e = bt.findNode(this.rootNode, t.nodeName)), (this.node = e)),
      (this.getValue = this._getValue_unavailable),
      (this.setValue = this._setValue_unavailable),
      !e)
    ) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (n) {
      let h = t.objectIndex;
      switch (n) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error(
              "THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",
              this
            );
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let d = 0; d < e.length; d++)
            if (e[d].name === h) {
              h = d;
              break;
            }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error(
              "THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",
              this
            );
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[n] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[n];
      }
      if (h !== void 0) {
        if (e[h] === void 0) {
          console.error(
            "THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",
            this,
            e
          );
          return;
        }
        e = e[h];
      }
    }
    const l = e[i];
    if (l === void 0) {
      const h = t.nodeName;
      console.error(
        "THREE.PropertyBinding: Trying to update property for track: " + h + "." + i + " but it wasn't found.",
        e
      );
      return;
    }
    let c = this.Versioning.None;
    (this.targetObject = e),
      e.needsUpdate !== void 0
        ? (c = this.Versioning.NeedsUpdate)
        : e.matrixWorldNeedsUpdate !== void 0 && (c = this.Versioning.MatrixWorldNeedsUpdate);
    let u = this.BindingType.Direct;
    if (s !== void 0) {
      if (i === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error(
            "THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",
            this
          );
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error(
            "THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",
            this
          );
          return;
        }
        e.morphTargetDictionary[s] !== void 0 && (s = e.morphTargetDictionary[s]);
      }
      (u = this.BindingType.ArrayElement), (this.resolvedProperty = l), (this.propertyIndex = s);
    } else
      l.fromArray !== void 0 && l.toArray !== void 0
        ? ((u = this.BindingType.HasFromToArray), (this.resolvedProperty = l))
        : Array.isArray(l)
          ? ((u = this.BindingType.EntireArray), (this.resolvedProperty = l))
          : (this.propertyName = i);
    (this.getValue = this.GetterByBindingType[u]), (this.setValue = this.SetterByBindingTypeAndVersioning[u][c]);
  }
  unbind() {
    (this.node = null), (this.getValue = this._getValue_unbound), (this.setValue = this._setValue_unbound);
  }
}
bt.Composite = HA;
bt.prototype.BindingType = { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 };
bt.prototype.Versioning = { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 };
bt.prototype.GetterByBindingType = [
  bt.prototype._getValue_direct,
  bt.prototype._getValue_array,
  bt.prototype._getValue_arrayElement,
  bt.prototype._getValue_toArray,
];
bt.prototype.SetterByBindingTypeAndVersioning = [
  [
    bt.prototype._setValue_direct,
    bt.prototype._setValue_direct_setNeedsUpdate,
    bt.prototype._setValue_direct_setMatrixWorldNeedsUpdate,
  ],
  [
    bt.prototype._setValue_array,
    bt.prototype._setValue_array_setNeedsUpdate,
    bt.prototype._setValue_array_setMatrixWorldNeedsUpdate,
  ],
  [
    bt.prototype._setValue_arrayElement,
    bt.prototype._setValue_arrayElement_setNeedsUpdate,
    bt.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,
  ],
  [
    bt.prototype._setValue_fromArray,
    bt.prototype._setValue_fromArray_setNeedsUpdate,
    bt.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,
  ],
];
class GA {
  constructor() {
    (this.isAnimationObjectGroup = !0),
      (this.uuid = ti()),
      (this._objects = Array.prototype.slice.call(arguments)),
      (this.nCachedObjects_ = 0);
    const e = {};
    this._indicesByUUID = e;
    for (let n = 0, i = arguments.length; n !== i; ++n) e[arguments[n].uuid] = n;
    (this._paths = []), (this._parsedPaths = []), (this._bindings = []), (this._bindingsIndicesByPath = {});
    const t = this;
    this.stats = {
      objects: {
        get total() {
          return t._objects.length;
        },
        get inUse() {
          return this.total - t.nCachedObjects_;
        },
      },
      get bindingsPerObject() {
        return t._bindings.length;
      },
    };
  }
  add() {
    const e = this._objects,
      t = this._indicesByUUID,
      n = this._paths,
      i = this._parsedPaths,
      s = this._bindings,
      l = s.length;
    let c,
      u = e.length,
      h = this.nCachedObjects_;
    for (let d = 0, p = arguments.length; d !== p; ++d) {
      const m = arguments[d],
        v = m.uuid;
      let x = t[v];
      if (x === void 0) {
        (x = u++), (t[v] = x), e.push(m);
        for (let M = 0, y = l; M !== y; ++M) s[M].push(new bt(m, n[M], i[M]));
      } else if (x < h) {
        c = e[x];
        const M = --h,
          y = e[M];
        (t[y.uuid] = x), (e[x] = y), (t[v] = M), (e[M] = m);
        for (let _ = 0, w = l; _ !== w; ++_) {
          const E = s[_],
            A = E[M];
          let O = E[x];
          (E[x] = A), O === void 0 && (O = new bt(m, n[_], i[_])), (E[M] = O);
        }
      } else
        e[x] !== c &&
          console.error(
            "THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes."
          );
    }
    this.nCachedObjects_ = h;
  }
  remove() {
    const e = this._objects,
      t = this._indicesByUUID,
      n = this._bindings,
      i = n.length;
    let s = this.nCachedObjects_;
    for (let l = 0, c = arguments.length; l !== c; ++l) {
      const u = arguments[l],
        h = u.uuid,
        d = t[h];
      if (d !== void 0 && d >= s) {
        const p = s++,
          m = e[p];
        (t[m.uuid] = d), (e[d] = m), (t[h] = p), (e[p] = u);
        for (let v = 0, x = i; v !== x; ++v) {
          const M = n[v],
            y = M[p],
            _ = M[d];
          (M[d] = y), (M[p] = _);
        }
      }
    }
    this.nCachedObjects_ = s;
  }
  uncache() {
    const e = this._objects,
      t = this._indicesByUUID,
      n = this._bindings,
      i = n.length;
    let s = this.nCachedObjects_,
      l = e.length;
    for (let c = 0, u = arguments.length; c !== u; ++c) {
      const h = arguments[c],
        d = h.uuid,
        p = t[d];
      if (p !== void 0)
        if ((delete t[d], p < s)) {
          const m = --s,
            v = e[m],
            x = --l,
            M = e[x];
          (t[v.uuid] = p), (e[p] = v), (t[M.uuid] = m), (e[m] = M), e.pop();
          for (let y = 0, _ = i; y !== _; ++y) {
            const w = n[y],
              E = w[m],
              A = w[x];
            (w[p] = E), (w[m] = A), w.pop();
          }
        } else {
          const m = --l,
            v = e[m];
          m > 0 && (t[v.uuid] = p), (e[p] = v), e.pop();
          for (let x = 0, M = i; x !== M; ++x) {
            const y = n[x];
            (y[p] = y[m]), y.pop();
          }
        }
    }
    this.nCachedObjects_ = s;
  }
  subscribe_(e, t) {
    const n = this._bindingsIndicesByPath;
    let i = n[e];
    const s = this._bindings;
    if (i !== void 0) return s[i];
    const l = this._paths,
      c = this._parsedPaths,
      u = this._objects,
      h = u.length,
      d = this.nCachedObjects_,
      p = new Array(h);
    (i = s.length), (n[e] = i), l.push(e), c.push(t), s.push(p);
    for (let m = d, v = u.length; m !== v; ++m) {
      const x = u[m];
      p[m] = new bt(x, e, t);
    }
    return p;
  }
  unsubscribe_(e) {
    const t = this._bindingsIndicesByPath,
      n = t[e];
    if (n !== void 0) {
      const i = this._paths,
        s = this._parsedPaths,
        l = this._bindings,
        c = l.length - 1,
        u = l[c],
        h = e[c];
      (t[h] = n), (l[n] = u), l.pop(), (s[n] = s[c]), s.pop(), (i[n] = i[c]), i.pop();
    }
  }
}
class Z_ {
  constructor(e, t, n = null, i = t.blendMode) {
    (this._mixer = e), (this._clip = t), (this._localRoot = n), (this.blendMode = i);
    const s = t.tracks,
      l = s.length,
      c = new Array(l),
      u = { endingStart: cs, endingEnd: cs };
    for (let h = 0; h !== l; ++h) {
      const d = s[h].createInterpolant(null);
      (c[h] = d), (d.settings = u);
    }
    (this._interpolantSettings = u),
      (this._interpolants = c),
      (this._propertyBindings = new Array(l)),
      (this._cacheIndex = null),
      (this._byClipCacheIndex = null),
      (this._timeScaleInterpolant = null),
      (this._weightInterpolant = null),
      (this.loop = Cv),
      (this._loopCount = -1),
      (this._startTime = null),
      (this.time = 0),
      (this.timeScale = 1),
      (this._effectiveTimeScale = 1),
      (this.weight = 1),
      (this._effectiveWeight = 1),
      (this.repetitions = 1 / 0),
      (this.paused = !1),
      (this.enabled = !0),
      (this.clampWhenFinished = !1),
      (this.zeroSlopeAtStart = !0),
      (this.zeroSlopeAtEnd = !0);
  }
  play() {
    return this._mixer._activateAction(this), this;
  }
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  reset() {
    return (
      (this.paused = !1),
      (this.enabled = !0),
      (this.time = 0),
      (this._loopCount = -1),
      (this._startTime = null),
      this.stopFading().stopWarping()
    );
  }
  isRunning() {
    return (
      this.enabled &&
      !this.paused &&
      this.timeScale !== 0 &&
      this._startTime === null &&
      this._mixer._isActiveAction(this)
    );
  }
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(e) {
    return (this._startTime = e), this;
  }
  setLoop(e, t) {
    return (this.loop = e), (this.repetitions = t), this;
  }
  setEffectiveWeight(e) {
    return (this.weight = e), (this._effectiveWeight = this.enabled ? e : 0), this.stopFading();
  }
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  crossFadeFrom(e, t, n) {
    if ((e.fadeOut(t), this.fadeIn(t), n)) {
      const i = this._clip.duration,
        s = e._clip.duration,
        l = s / i,
        c = i / s;
      e.warp(1, l, t), this.warp(c, 1, t);
    }
    return this;
  }
  crossFadeTo(e, t, n) {
    return e.crossFadeFrom(this, t, n);
  }
  stopFading() {
    const e = this._weightInterpolant;
    return e !== null && ((this._weightInterpolant = null), this._mixer._takeBackControlInterpolant(e)), this;
  }
  setEffectiveTimeScale(e) {
    return (this.timeScale = e), (this._effectiveTimeScale = this.paused ? 0 : e), this.stopWarping();
  }
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(e) {
    return (this.timeScale = this._clip.duration / e), this.stopWarping();
  }
  syncWith(e) {
    return (this.time = e.time), (this.timeScale = e.timeScale), this.stopWarping();
  }
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  warp(e, t, n) {
    const i = this._mixer,
      s = i.time,
      l = this.timeScale;
    let c = this._timeScaleInterpolant;
    c === null && ((c = i._lendControlInterpolant()), (this._timeScaleInterpolant = c));
    const u = c.parameterPositions,
      h = c.sampleValues;
    return (u[0] = s), (u[1] = s + n), (h[0] = e / l), (h[1] = t / l), this;
  }
  stopWarping() {
    const e = this._timeScaleInterpolant;
    return e !== null && ((this._timeScaleInterpolant = null), this._mixer._takeBackControlInterpolant(e)), this;
  }
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  _update(e, t, n, i) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const s = this._startTime;
    if (s !== null) {
      const u = (e - s) * n;
      u < 0 || n === 0 ? (t = 0) : ((this._startTime = null), (t = n * u));
    }
    t *= this._updateTimeScale(e);
    const l = this._updateTime(t),
      c = this._updateWeight(e);
    if (c > 0) {
      const u = this._interpolants,
        h = this._propertyBindings;
      switch (this.blendMode) {
        case Wd:
          for (let d = 0, p = u.length; d !== p; ++d) u[d].evaluate(l), h[d].accumulateAdditive(c);
          break;
        case Hu:
        default:
          for (let d = 0, p = u.length; d !== p; ++d) u[d].evaluate(l), h[d].accumulate(i, c);
      }
    }
  }
  _updateWeight(e) {
    let t = 0;
    if (this.enabled) {
      t = this.weight;
      const n = this._weightInterpolant;
      if (n !== null) {
        const i = n.evaluate(e)[0];
        (t *= i), e > n.parameterPositions[1] && (this.stopFading(), i === 0 && (this.enabled = !1));
      }
    }
    return (this._effectiveWeight = t), t;
  }
  _updateTimeScale(e) {
    let t = 0;
    if (!this.paused) {
      t = this.timeScale;
      const n = this._timeScaleInterpolant;
      if (n !== null) {
        const i = n.evaluate(e)[0];
        (t *= i),
          e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? (this.paused = !0) : (this.timeScale = t));
      }
    }
    return (this._effectiveTimeScale = t), t;
  }
  _updateTime(e) {
    const t = this._clip.duration,
      n = this.loop;
    let i = this.time + e,
      s = this._loopCount;
    const l = n === Rv;
    if (e === 0) return s === -1 ? i : l && (s & 1) === 1 ? t - i : i;
    if (n === bv) {
      s === -1 && ((this._loopCount = 0), this._setEndings(!0, !0, !1));
      e: {
        if (i >= t) i = t;
        else if (i < 0) i = 0;
        else {
          this.time = i;
          break e;
        }
        this.clampWhenFinished ? (this.paused = !0) : (this.enabled = !1),
          (this.time = i),
          this._mixer.dispatchEvent({ type: "finished", action: this, direction: e < 0 ? -1 : 1 });
      }
    } else {
      if (
        (s === -1 &&
          (e >= 0
            ? ((s = 0), this._setEndings(!0, this.repetitions === 0, l))
            : this._setEndings(this.repetitions === 0, !0, l)),
        i >= t || i < 0)
      ) {
        const c = Math.floor(i / t);
        (i -= t * c), (s += Math.abs(c));
        const u = this.repetitions - s;
        if (u <= 0)
          this.clampWhenFinished ? (this.paused = !0) : (this.enabled = !1),
            (i = e > 0 ? t : 0),
            (this.time = i),
            this._mixer.dispatchEvent({ type: "finished", action: this, direction: e > 0 ? 1 : -1 });
        else {
          if (u === 1) {
            const h = e < 0;
            this._setEndings(h, !h, l);
          } else this._setEndings(!1, !1, l);
          (this._loopCount = s),
            (this.time = i),
            this._mixer.dispatchEvent({ type: "loop", action: this, loopDelta: c });
        }
      } else this.time = i;
      if (l && (s & 1) === 1) return t - i;
    }
    return i;
  }
  _setEndings(e, t, n) {
    const i = this._interpolantSettings;
    n
      ? ((i.endingStart = us), (i.endingEnd = us))
      : (e ? (i.endingStart = this.zeroSlopeAtStart ? us : cs) : (i.endingStart = Aa),
        t ? (i.endingEnd = this.zeroSlopeAtEnd ? us : cs) : (i.endingEnd = Aa));
  }
  _scheduleFading(e, t, n) {
    const i = this._mixer,
      s = i.time;
    let l = this._weightInterpolant;
    l === null && ((l = i._lendControlInterpolant()), (this._weightInterpolant = l));
    const c = l.parameterPositions,
      u = l.sampleValues;
    return (c[0] = s), (u[0] = t), (c[1] = s + e), (u[1] = n), this;
  }
}
const WA = new Float32Array(1);
class XA extends Hi {
  constructor(e) {
    super(), (this._root = e), this._initMemoryManager(), (this._accuIndex = 0), (this.time = 0), (this.timeScale = 1);
  }
  _bindAction(e, t) {
    const n = e._localRoot || this._root,
      i = e._clip.tracks,
      s = i.length,
      l = e._propertyBindings,
      c = e._interpolants,
      u = n.uuid,
      h = this._bindingsByRootAndName;
    let d = h[u];
    d === void 0 && ((d = {}), (h[u] = d));
    for (let p = 0; p !== s; ++p) {
      const m = i[p],
        v = m.name;
      let x = d[v];
      if (x !== void 0) ++x.referenceCount, (l[p] = x);
      else {
        if (((x = l[p]), x !== void 0)) {
          x._cacheIndex === null && (++x.referenceCount, this._addInactiveBinding(x, u, v));
          continue;
        }
        const M = t && t._propertyBindings[p].binding.parsedPath;
        (x = new q_(bt.create(n, v, M), m.ValueTypeName, m.getValueSize())),
          ++x.referenceCount,
          this._addInactiveBinding(x, u, v),
          (l[p] = x);
      }
      c[p].resultBuffer = x.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const n = (e._localRoot || this._root).uuid,
          i = e._clip.uuid,
          s = this._actionsByClip[i];
        this._bindAction(e, s && s.knownActions[0]), this._addInactiveAction(e, i, n);
      }
      const t = e._propertyBindings;
      for (let n = 0, i = t.length; n !== i; ++n) {
        const s = t[n];
        s.useCount++ === 0 && (this._lendBinding(s), s.saveOriginalState());
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const t = e._propertyBindings;
      for (let n = 0, i = t.length; n !== i; ++n) {
        const s = t[n];
        --s.useCount === 0 && (s.restoreOriginalState(), this._takeBackBinding(s));
      }
      this._takeBackAction(e);
    }
  }
  _initMemoryManager() {
    (this._actions = []),
      (this._nActiveActions = 0),
      (this._actionsByClip = {}),
      (this._bindings = []),
      (this._nActiveBindings = 0),
      (this._bindingsByRootAndName = {}),
      (this._controlInterpolants = []),
      (this._nActiveControlInterpolants = 0);
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        },
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        },
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        },
      },
    };
  }
  _isActiveAction(e) {
    const t = e._cacheIndex;
    return t !== null && t < this._nActiveActions;
  }
  _addInactiveAction(e, t, n) {
    const i = this._actions,
      s = this._actionsByClip;
    let l = s[t];
    if (l === void 0) (l = { knownActions: [e], actionByRoot: {} }), (e._byClipCacheIndex = 0), (s[t] = l);
    else {
      const c = l.knownActions;
      (e._byClipCacheIndex = c.length), c.push(e);
    }
    (e._cacheIndex = i.length), i.push(e), (l.actionByRoot[n] = e);
  }
  _removeInactiveAction(e) {
    const t = this._actions,
      n = t[t.length - 1],
      i = e._cacheIndex;
    (n._cacheIndex = i), (t[i] = n), t.pop(), (e._cacheIndex = null);
    const s = e._clip.uuid,
      l = this._actionsByClip,
      c = l[s],
      u = c.knownActions,
      h = u[u.length - 1],
      d = e._byClipCacheIndex;
    (h._byClipCacheIndex = d), (u[d] = h), u.pop(), (e._byClipCacheIndex = null);
    const p = c.actionByRoot,
      m = (e._localRoot || this._root).uuid;
    delete p[m], u.length === 0 && delete l[s], this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const t = e._propertyBindings;
    for (let n = 0, i = t.length; n !== i; ++n) {
      const s = t[n];
      --s.referenceCount === 0 && this._removeInactiveBinding(s);
    }
  }
  _lendAction(e) {
    const t = this._actions,
      n = e._cacheIndex,
      i = this._nActiveActions++,
      s = t[i];
    (e._cacheIndex = i), (t[i] = e), (s._cacheIndex = n), (t[n] = s);
  }
  _takeBackAction(e) {
    const t = this._actions,
      n = e._cacheIndex,
      i = --this._nActiveActions,
      s = t[i];
    (e._cacheIndex = i), (t[i] = e), (s._cacheIndex = n), (t[n] = s);
  }
  _addInactiveBinding(e, t, n) {
    const i = this._bindingsByRootAndName,
      s = this._bindings;
    let l = i[t];
    l === void 0 && ((l = {}), (i[t] = l)), (l[n] = e), (e._cacheIndex = s.length), s.push(e);
  }
  _removeInactiveBinding(e) {
    const t = this._bindings,
      n = e.binding,
      i = n.rootNode.uuid,
      s = n.path,
      l = this._bindingsByRootAndName,
      c = l[i],
      u = t[t.length - 1],
      h = e._cacheIndex;
    (u._cacheIndex = h), (t[h] = u), t.pop(), delete c[s], Object.keys(c).length === 0 && delete l[i];
  }
  _lendBinding(e) {
    const t = this._bindings,
      n = e._cacheIndex,
      i = this._nActiveBindings++,
      s = t[i];
    (e._cacheIndex = i), (t[i] = e), (s._cacheIndex = n), (t[n] = s);
  }
  _takeBackBinding(e) {
    const t = this._bindings,
      n = e._cacheIndex,
      i = --this._nActiveBindings,
      s = t[i];
    (e._cacheIndex = i), (t[i] = e), (s._cacheIndex = n), (t[n] = s);
  }
  _lendControlInterpolant() {
    const e = this._controlInterpolants,
      t = this._nActiveControlInterpolants++;
    let n = e[t];
    return (
      n === void 0 && ((n = new fp(new Float32Array(2), new Float32Array(2), 1, WA)), (n.__cacheIndex = t), (e[t] = n)),
      n
    );
  }
  _takeBackControlInterpolant(e) {
    const t = this._controlInterpolants,
      n = e.__cacheIndex,
      i = --this._nActiveControlInterpolants,
      s = t[i];
    (e.__cacheIndex = i), (t[i] = e), (s.__cacheIndex = n), (t[n] = s);
  }
  clipAction(e, t, n) {
    const i = t || this._root,
      s = i.uuid;
    let l = typeof e == "string" ? Fa.findByName(i, e) : e;
    const c = l !== null ? l.uuid : e,
      u = this._actionsByClip[c];
    let h = null;
    if ((n === void 0 && (l !== null ? (n = l.blendMode) : (n = Hu)), u !== void 0)) {
      const p = u.actionByRoot[s];
      if (p !== void 0 && p.blendMode === n) return p;
      (h = u.knownActions[0]), l === null && (l = h._clip);
    }
    if (l === null) return null;
    const d = new Z_(this, l, t, n);
    return this._bindAction(d, h), this._addInactiveAction(d, c, s), d;
  }
  existingAction(e, t) {
    const n = t || this._root,
      i = n.uuid,
      s = typeof e == "string" ? Fa.findByName(n, e) : e,
      l = s ? s.uuid : e,
      c = this._actionsByClip[l];
    return (c !== void 0 && c.actionByRoot[i]) || null;
  }
  stopAllAction() {
    const e = this._actions,
      t = this._nActiveActions;
    for (let n = t - 1; n >= 0; --n) e[n].stop();
    return this;
  }
  update(e) {
    e *= this.timeScale;
    const t = this._actions,
      n = this._nActiveActions,
      i = (this.time += e),
      s = Math.sign(e),
      l = (this._accuIndex ^= 1);
    for (let h = 0; h !== n; ++h) t[h]._update(i, e, s, l);
    const c = this._bindings,
      u = this._nActiveBindings;
    for (let h = 0; h !== u; ++h) c[h].apply(l);
    return this;
  }
  setTime(e) {
    this.time = 0;
    for (let t = 0; t < this._actions.length; t++) this._actions[t].time = 0;
    return this.update(e);
  }
  getRoot() {
    return this._root;
  }
  uncacheClip(e) {
    const t = this._actions,
      n = e.uuid,
      i = this._actionsByClip,
      s = i[n];
    if (s !== void 0) {
      const l = s.knownActions;
      for (let c = 0, u = l.length; c !== u; ++c) {
        const h = l[c];
        this._deactivateAction(h);
        const d = h._cacheIndex,
          p = t[t.length - 1];
        (h._cacheIndex = null),
          (h._byClipCacheIndex = null),
          (p._cacheIndex = d),
          (t[d] = p),
          t.pop(),
          this._removeInactiveBindingsForAction(h);
      }
      delete i[n];
    }
  }
  uncacheRoot(e) {
    const t = e.uuid,
      n = this._actionsByClip;
    for (const l in n) {
      const c = n[l].actionByRoot,
        u = c[t];
      u !== void 0 && (this._deactivateAction(u), this._removeInactiveAction(u));
    }
    const i = this._bindingsByRootAndName,
      s = i[t];
    if (s !== void 0)
      for (const l in s) {
        const c = s[l];
        c.restoreOriginalState(), this._removeInactiveBinding(c);
      }
  }
  uncacheAction(e, t) {
    const n = this.existingAction(e, t);
    n !== null && (this._deactivateAction(n), this._removeInactiveAction(n));
  }
}
class yp {
  constructor(e) {
    this.value = e;
  }
  clone() {
    return new yp(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let YA = 0;
class qA extends Hi {
  constructor() {
    super(),
      (this.isUniformsGroup = !0),
      Object.defineProperty(this, "id", { value: YA++ }),
      (this.name = ""),
      (this.usage = ba),
      (this.uniforms = []);
  }
  add(e) {
    return this.uniforms.push(e), this;
  }
  remove(e) {
    const t = this.uniforms.indexOf(e);
    return t !== -1 && this.uniforms.splice(t, 1), this;
  }
  setName(e) {
    return (this.name = e), this;
  }
  setUsage(e) {
    return (this.usage = e), this;
  }
  dispose() {
    return this.dispatchEvent({ type: "dispose" }), this;
  }
  copy(e) {
    (this.name = e.name), (this.usage = e.usage);
    const t = e.uniforms;
    this.uniforms.length = 0;
    for (let n = 0, i = t.length; n < i; n++) {
      const s = Array.isArray(t[n]) ? t[n] : [t[n]];
      for (let l = 0; l < s.length; l++) this.uniforms.push(s[l].clone());
    }
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class ZA extends qu {
  constructor(e, t, n = 1) {
    super(e, t), (this.isInstancedInterleavedBuffer = !0), (this.meshPerAttribute = n);
  }
  copy(e) {
    return super.copy(e), (this.meshPerAttribute = e.meshPerAttribute), this;
  }
  clone(e) {
    const t = super.clone(e);
    return (t.meshPerAttribute = this.meshPerAttribute), t;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return (t.isInstancedInterleavedBuffer = !0), (t.meshPerAttribute = this.meshPerAttribute), t;
  }
}
class JA {
  constructor(e, t, n, i, s) {
    (this.isGLBufferAttribute = !0),
      (this.name = ""),
      (this.buffer = e),
      (this.type = t),
      (this.itemSize = n),
      (this.elementSize = i),
      (this.count = s),
      (this.version = 0);
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setBuffer(e) {
    return (this.buffer = e), this;
  }
  setType(e, t) {
    return (this.type = e), (this.elementSize = t), this;
  }
  setItemSize(e) {
    return (this.itemSize = e), this;
  }
  setCount(e) {
    return (this.count = e), this;
  }
}
const A0 = new st();
class J_ {
  constructor(e, t, n = 0, i = 1 / 0) {
    (this.ray = new To(e, t)),
      (this.near = n),
      (this.far = i),
      (this.camera = null),
      (this.layers = new gs()),
      (this.params = { Mesh: {}, Line: { threshold: 1 }, LOD: {}, Points: { threshold: 1 }, Sprite: {} });
  }
  set(e, t) {
    this.ray.set(e, t);
  }
  setFromCamera(e, t) {
    t.isPerspectiveCamera
      ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld),
        this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(),
        (this.camera = t))
      : t.isOrthographicCamera
        ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t),
          this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld),
          (this.camera = t))
        : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
  }
  setFromXRController(e) {
    return (
      A0.identity().extractRotation(e.matrixWorld),
      this.ray.origin.setFromMatrixPosition(e.matrixWorld),
      this.ray.direction.set(0, 0, -1).applyMatrix4(A0),
      this
    );
  }
  intersectObject(e, t = !0, n = []) {
    return Rd(e, this, n, t), n.sort(b0), n;
  }
  intersectObjects(e, t = !0, n = []) {
    for (let i = 0, s = e.length; i < s; i++) Rd(e[i], this, n, t);
    return n.sort(b0), n;
  }
}
function b0(r, e) {
  return r.distance - e.distance;
}
function Rd(r, e, t, n) {
  let i = !0;
  if ((r.layers.test(e.layers) && r.raycast(e, t) === !1 && (i = !1), i === !0 && n === !0)) {
    const s = r.children;
    for (let l = 0, c = s.length; l < c; l++) Rd(s[l], e, t, !0);
  }
}
class KA {
  constructor(e = 1, t = 0, n = 0) {
    return (this.radius = e), (this.phi = t), (this.theta = n), this;
  }
  set(e, t, n) {
    return (this.radius = e), (this.phi = t), (this.theta = n), this;
  }
  copy(e) {
    return (this.radius = e.radius), (this.phi = e.phi), (this.theta = e.theta), this;
  }
  makeSafe() {
    return (this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi))), this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return (
      (this.radius = Math.sqrt(e * e + t * t + n * n)),
      this.radius === 0
        ? ((this.theta = 0), (this.phi = 0))
        : ((this.theta = Math.atan2(e, n)), (this.phi = Math.acos(Jt(t / this.radius, -1, 1)))),
      this
    );
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class jA {
  constructor(e = 1, t = 0, n = 0) {
    return (this.radius = e), (this.theta = t), (this.y = n), this;
  }
  set(e, t, n) {
    return (this.radius = e), (this.theta = t), (this.y = n), this;
  }
  copy(e) {
    return (this.radius = e.radius), (this.theta = e.theta), (this.y = e.y), this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return (this.radius = Math.sqrt(e * e + n * n)), (this.theta = Math.atan2(e, n)), (this.y = t), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class Sp {
  constructor(e, t, n, i) {
    (Sp.prototype.isMatrix2 = !0), (this.elements = [1, 0, 0, 1]), e !== void 0 && this.set(e, t, n, i);
  }
  identity() {
    return this.set(1, 0, 0, 1), this;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 4; n++) this.elements[n] = e[n + t];
    return this;
  }
  set(e, t, n, i) {
    const s = this.elements;
    return (s[0] = e), (s[2] = t), (s[1] = n), (s[3] = i), this;
  }
}
const C0 = new fe();
class QA {
  constructor(e = new fe(1 / 0, 1 / 0), t = new fe(-1 / 0, -1 / 0)) {
    (this.isBox2 = !0), (this.min = e), (this.max = t);
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++) this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = C0.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return (this.min.x = this.min.y = 1 / 0), (this.max.x = this.max.y = -1 / 0), this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  containsPoint(e) {
    return e.x >= this.min.x && e.x <= this.max.x && e.y >= this.min.y && e.y <= this.max.y;
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  getParameter(e, t) {
    return t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y));
  }
  intersectsBox(e) {
    return e.max.x >= this.min.x && e.min.x <= this.max.x && e.max.y >= this.min.y && e.min.y <= this.max.y;
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, C0).distanceTo(e);
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const R0 = new N(),
  Fc = new N();
class $A {
  constructor(e = new N(), t = new N()) {
    (this.start = e), (this.end = t);
  }
  set(e, t) {
    return this.start.copy(e), this.end.copy(t), this;
  }
  copy(e) {
    return this.start.copy(e.start), this.end.copy(e.end), this;
  }
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(e, t) {
    return this.delta(t).multiplyScalar(e).add(this.start);
  }
  closestPointToPointParameter(e, t) {
    R0.subVectors(e, this.start), Fc.subVectors(this.end, this.start);
    const n = Fc.dot(Fc);
    let s = Fc.dot(R0) / n;
    return t && (s = Jt(s, 0, 1)), s;
  }
  closestPointToPoint(e, t, n) {
    const i = this.closestPointToPointParameter(e, t);
    return this.delta(n).multiplyScalar(i).add(this.start);
  }
  applyMatrix4(e) {
    return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
  }
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const P0 = new N();
class eb extends Rt {
  constructor(e, t) {
    super(), (this.light = e), (this.matrixAutoUpdate = !1), (this.color = t), (this.type = "SpotLightHelper");
    const n = new vt(),
      i = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
    for (let l = 0, c = 1, u = 32; l < u; l++, c++) {
      const h = (l / u) * Math.PI * 2,
        d = (c / u) * Math.PI * 2;
      i.push(Math.cos(h), Math.sin(h), 1, Math.cos(d), Math.sin(d), 1);
    }
    n.setAttribute("position", new Xe(i, 3));
    const s = new On({ fog: !1, toneMapped: !1 });
    (this.cone = new Gi(n, s)), this.add(this.cone), this.update();
  }
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1),
      this.light.target.updateWorldMatrix(!0, !1),
      this.parent
        ? (this.parent.updateWorldMatrix(!0),
          this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld))
        : this.matrix.copy(this.light.matrixWorld),
      this.matrixWorld.copy(this.light.matrixWorld);
    const e = this.light.distance ? this.light.distance : 1e3,
      t = e * Math.tan(this.light.angle);
    this.cone.scale.set(t, t, e),
      P0.setFromMatrixPosition(this.light.target.matrixWorld),
      this.cone.lookAt(P0),
      this.color !== void 0
        ? this.cone.material.color.set(this.color)
        : this.cone.material.color.copy(this.light.color);
  }
}
const Cr = new N(),
  Oc = new st(),
  rd = new st();
class tb extends Gi {
  constructor(e) {
    const t = K_(e),
      n = new vt(),
      i = [],
      s = [],
      l = new Ne(0, 0, 1),
      c = new Ne(0, 1, 0);
    for (let h = 0; h < t.length; h++) {
      const d = t[h];
      d.parent && d.parent.isBone && (i.push(0, 0, 0), i.push(0, 0, 0), s.push(l.r, l.g, l.b), s.push(c.r, c.g, c.b));
    }
    n.setAttribute("position", new Xe(i, 3)), n.setAttribute("color", new Xe(s, 3));
    const u = new On({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(n, u),
      (this.isSkeletonHelper = !0),
      (this.type = "SkeletonHelper"),
      (this.root = e),
      (this.bones = t),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1);
  }
  updateMatrixWorld(e) {
    const t = this.bones,
      n = this.geometry,
      i = n.getAttribute("position");
    rd.copy(this.root.matrixWorld).invert();
    for (let s = 0, l = 0; s < t.length; s++) {
      const c = t[s];
      c.parent &&
        c.parent.isBone &&
        (Oc.multiplyMatrices(rd, c.matrixWorld),
        Cr.setFromMatrixPosition(Oc),
        i.setXYZ(l, Cr.x, Cr.y, Cr.z),
        Oc.multiplyMatrices(rd, c.parent.matrixWorld),
        Cr.setFromMatrixPosition(Oc),
        i.setXYZ(l + 1, Cr.x, Cr.y, Cr.z),
        (l += 2));
    }
    (n.getAttribute("position").needsUpdate = !0), super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function K_(r) {
  const e = [];
  r.isBone === !0 && e.push(r);
  for (let t = 0; t < r.children.length; t++) e.push.apply(e, K_(r.children[t]));
  return e;
}
class nb extends rn {
  constructor(e, t, n) {
    const i = new qa(t, 4, 2),
      s = new Ur({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(i, s),
      (this.light = e),
      (this.color = n),
      (this.type = "PointLightHelper"),
      (this.matrix = this.light.matrixWorld),
      (this.matrixAutoUpdate = !1),
      this.update();
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1),
      this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const ib = new N(),
  I0 = new Ne(),
  L0 = new Ne();
class rb extends Rt {
  constructor(e, t, n) {
    super(),
      (this.light = e),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1),
      (this.color = n),
      (this.type = "HemisphereLightHelper");
    const i = new Ya(t);
    i.rotateY(Math.PI * 0.5),
      (this.material = new Ur({ wireframe: !0, fog: !1, toneMapped: !1 })),
      this.color === void 0 && (this.material.vertexColors = !0);
    const s = i.getAttribute("position"),
      l = new Float32Array(s.count * 3);
    i.setAttribute("color", new Ot(l, 3)), this.add(new rn(i, this.material)), this.update();
  }
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  update() {
    const e = this.children[0];
    if (this.color !== void 0) this.material.color.set(this.color);
    else {
      const t = e.geometry.getAttribute("color");
      I0.copy(this.light.color), L0.copy(this.light.groundColor);
      for (let n = 0, i = t.count; n < i; n++) {
        const s = n < i / 2 ? I0 : L0;
        t.setXYZ(n, s.r, s.g, s.b);
      }
      t.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), e.lookAt(ib.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class sb extends Gi {
  constructor(e = 10, t = 10, n = 4473924, i = 8947848) {
    (n = new Ne(n)), (i = new Ne(i));
    const s = t / 2,
      l = e / t,
      c = e / 2,
      u = [],
      h = [];
    for (let m = 0, v = 0, x = -c; m <= t; m++, x += l) {
      u.push(-c, 0, x, c, 0, x), u.push(x, 0, -c, x, 0, c);
      const M = m === s ? n : i;
      M.toArray(h, v), (v += 3), M.toArray(h, v), (v += 3), M.toArray(h, v), (v += 3), M.toArray(h, v), (v += 3);
    }
    const d = new vt();
    d.setAttribute("position", new Xe(u, 3)), d.setAttribute("color", new Xe(h, 3));
    const p = new On({ vertexColors: !0, toneMapped: !1 });
    super(d, p), (this.type = "GridHelper");
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class ob extends Gi {
  constructor(e = 10, t = 16, n = 8, i = 64, s = 4473924, l = 8947848) {
    (s = new Ne(s)), (l = new Ne(l));
    const c = [],
      u = [];
    if (t > 1)
      for (let p = 0; p < t; p++) {
        const m = (p / t) * (Math.PI * 2),
          v = Math.sin(m) * e,
          x = Math.cos(m) * e;
        c.push(0, 0, 0), c.push(v, 0, x);
        const M = p & 1 ? s : l;
        u.push(M.r, M.g, M.b), u.push(M.r, M.g, M.b);
      }
    for (let p = 0; p < n; p++) {
      const m = p & 1 ? s : l,
        v = e - (e / n) * p;
      for (let x = 0; x < i; x++) {
        let M = (x / i) * (Math.PI * 2),
          y = Math.sin(M) * v,
          _ = Math.cos(M) * v;
        c.push(y, 0, _),
          u.push(m.r, m.g, m.b),
          (M = ((x + 1) / i) * (Math.PI * 2)),
          (y = Math.sin(M) * v),
          (_ = Math.cos(M) * v),
          c.push(y, 0, _),
          u.push(m.r, m.g, m.b);
      }
    }
    const h = new vt();
    h.setAttribute("position", new Xe(c, 3)), h.setAttribute("color", new Xe(u, 3));
    const d = new On({ vertexColors: !0, toneMapped: !1 });
    super(h, d), (this.type = "PolarGridHelper");
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const D0 = new N(),
  Bc = new N(),
  U0 = new N();
class ab extends Rt {
  constructor(e, t, n) {
    super(),
      (this.light = e),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1),
      (this.color = n),
      (this.type = "DirectionalLightHelper"),
      t === void 0 && (t = 1);
    let i = new vt();
    i.setAttribute("position", new Xe([-t, t, 0, t, t, 0, t, -t, 0, -t, -t, 0, -t, t, 0], 3));
    const s = new On({ fog: !1, toneMapped: !1 });
    (this.lightPlane = new Lr(i, s)),
      this.add(this.lightPlane),
      (i = new vt()),
      i.setAttribute("position", new Xe([0, 0, 0, 0, 0, 1], 3)),
      (this.targetLine = new Lr(i, s)),
      this.add(this.targetLine),
      this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose(),
      this.lightPlane.material.dispose(),
      this.targetLine.geometry.dispose(),
      this.targetLine.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1),
      this.light.target.updateWorldMatrix(!0, !1),
      D0.setFromMatrixPosition(this.light.matrixWorld),
      Bc.setFromMatrixPosition(this.light.target.matrixWorld),
      U0.subVectors(Bc, D0),
      this.lightPlane.lookAt(Bc),
      this.color !== void 0
        ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color))
        : (this.lightPlane.material.color.copy(this.light.color),
          this.targetLine.material.color.copy(this.light.color)),
      this.targetLine.lookAt(Bc),
      (this.targetLine.scale.z = U0.length());
  }
}
const zc = new N(),
  Zt = new Va();
class lb extends Gi {
  constructor(e) {
    const t = new vt(),
      n = new On({ color: 16777215, vertexColors: !0, toneMapped: !1 }),
      i = [],
      s = [],
      l = {};
    c("n1", "n2"),
      c("n2", "n4"),
      c("n4", "n3"),
      c("n3", "n1"),
      c("f1", "f2"),
      c("f2", "f4"),
      c("f4", "f3"),
      c("f3", "f1"),
      c("n1", "f1"),
      c("n2", "f2"),
      c("n3", "f3"),
      c("n4", "f4"),
      c("p", "n1"),
      c("p", "n2"),
      c("p", "n3"),
      c("p", "n4"),
      c("u1", "u2"),
      c("u2", "u3"),
      c("u3", "u1"),
      c("c", "t"),
      c("p", "c"),
      c("cn1", "cn2"),
      c("cn3", "cn4"),
      c("cf1", "cf2"),
      c("cf3", "cf4");
    function c(x, M) {
      u(x), u(M);
    }
    function u(x) {
      i.push(0, 0, 0), s.push(0, 0, 0), l[x] === void 0 && (l[x] = []), l[x].push(i.length / 3 - 1);
    }
    t.setAttribute("position", new Xe(i, 3)),
      t.setAttribute("color", new Xe(s, 3)),
      super(t, n),
      (this.type = "CameraHelper"),
      (this.camera = e),
      this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(),
      (this.matrix = e.matrixWorld),
      (this.matrixAutoUpdate = !1),
      (this.pointMap = l),
      this.update();
    const h = new Ne(16755200),
      d = new Ne(16711680),
      p = new Ne(43775),
      m = new Ne(16777215),
      v = new Ne(3355443);
    this.setColors(h, d, p, m, v);
  }
  setColors(e, t, n, i, s) {
    const c = this.geometry.getAttribute("color");
    c.setXYZ(0, e.r, e.g, e.b),
      c.setXYZ(1, e.r, e.g, e.b),
      c.setXYZ(2, e.r, e.g, e.b),
      c.setXYZ(3, e.r, e.g, e.b),
      c.setXYZ(4, e.r, e.g, e.b),
      c.setXYZ(5, e.r, e.g, e.b),
      c.setXYZ(6, e.r, e.g, e.b),
      c.setXYZ(7, e.r, e.g, e.b),
      c.setXYZ(8, e.r, e.g, e.b),
      c.setXYZ(9, e.r, e.g, e.b),
      c.setXYZ(10, e.r, e.g, e.b),
      c.setXYZ(11, e.r, e.g, e.b),
      c.setXYZ(12, e.r, e.g, e.b),
      c.setXYZ(13, e.r, e.g, e.b),
      c.setXYZ(14, e.r, e.g, e.b),
      c.setXYZ(15, e.r, e.g, e.b),
      c.setXYZ(16, e.r, e.g, e.b),
      c.setXYZ(17, e.r, e.g, e.b),
      c.setXYZ(18, e.r, e.g, e.b),
      c.setXYZ(19, e.r, e.g, e.b),
      c.setXYZ(20, e.r, e.g, e.b),
      c.setXYZ(21, e.r, e.g, e.b),
      c.setXYZ(22, e.r, e.g, e.b),
      c.setXYZ(23, e.r, e.g, e.b),
      c.setXYZ(24, t.r, t.g, t.b),
      c.setXYZ(25, t.r, t.g, t.b),
      c.setXYZ(26, t.r, t.g, t.b),
      c.setXYZ(27, t.r, t.g, t.b),
      c.setXYZ(28, t.r, t.g, t.b),
      c.setXYZ(29, t.r, t.g, t.b),
      c.setXYZ(30, t.r, t.g, t.b),
      c.setXYZ(31, t.r, t.g, t.b),
      c.setXYZ(32, n.r, n.g, n.b),
      c.setXYZ(33, n.r, n.g, n.b),
      c.setXYZ(34, n.r, n.g, n.b),
      c.setXYZ(35, n.r, n.g, n.b),
      c.setXYZ(36, n.r, n.g, n.b),
      c.setXYZ(37, n.r, n.g, n.b),
      c.setXYZ(38, i.r, i.g, i.b),
      c.setXYZ(39, i.r, i.g, i.b),
      c.setXYZ(40, s.r, s.g, s.b),
      c.setXYZ(41, s.r, s.g, s.b),
      c.setXYZ(42, s.r, s.g, s.b),
      c.setXYZ(43, s.r, s.g, s.b),
      c.setXYZ(44, s.r, s.g, s.b),
      c.setXYZ(45, s.r, s.g, s.b),
      c.setXYZ(46, s.r, s.g, s.b),
      c.setXYZ(47, s.r, s.g, s.b),
      c.setXYZ(48, s.r, s.g, s.b),
      c.setXYZ(49, s.r, s.g, s.b),
      (c.needsUpdate = !0);
  }
  update() {
    const e = this.geometry,
      t = this.pointMap,
      n = 1,
      i = 1;
    Zt.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),
      $t("c", t, e, Zt, 0, 0, -1),
      $t("t", t, e, Zt, 0, 0, 1),
      $t("n1", t, e, Zt, -1, -1, -1),
      $t("n2", t, e, Zt, n, -1, -1),
      $t("n3", t, e, Zt, -1, i, -1),
      $t("n4", t, e, Zt, n, i, -1),
      $t("f1", t, e, Zt, -1, -1, 1),
      $t("f2", t, e, Zt, n, -1, 1),
      $t("f3", t, e, Zt, -1, i, 1),
      $t("f4", t, e, Zt, n, i, 1),
      $t("u1", t, e, Zt, n * 0.7, i * 1.1, -1),
      $t("u2", t, e, Zt, -1 * 0.7, i * 1.1, -1),
      $t("u3", t, e, Zt, 0, i * 2, -1),
      $t("cf1", t, e, Zt, -1, 0, 1),
      $t("cf2", t, e, Zt, n, 0, 1),
      $t("cf3", t, e, Zt, 0, -1, 1),
      $t("cf4", t, e, Zt, 0, i, 1),
      $t("cn1", t, e, Zt, -1, 0, -1),
      $t("cn2", t, e, Zt, n, 0, -1),
      $t("cn3", t, e, Zt, 0, -1, -1),
      $t("cn4", t, e, Zt, 0, i, -1),
      (e.getAttribute("position").needsUpdate = !0);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function $t(r, e, t, n, i, s, l) {
  zc.set(i, s, l).unproject(n);
  const c = e[r];
  if (c !== void 0) {
    const u = t.getAttribute("position");
    for (let h = 0, d = c.length; h < d; h++) u.setXYZ(c[h], zc.x, zc.y, zc.z);
  }
}
const kc = new Fn();
class cb extends Gi {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
      i = new Float32Array(8 * 3),
      s = new vt();
    s.setIndex(new Ot(n, 1)),
      s.setAttribute("position", new Ot(i, 3)),
      super(s, new On({ color: t, toneMapped: !1 })),
      (this.object = e),
      (this.type = "BoxHelper"),
      (this.matrixAutoUpdate = !1),
      this.update();
  }
  update(e) {
    if (
      (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."),
      this.object !== void 0 && kc.setFromObject(this.object),
      kc.isEmpty())
    )
      return;
    const t = kc.min,
      n = kc.max,
      i = this.geometry.attributes.position,
      s = i.array;
    (s[0] = n.x),
      (s[1] = n.y),
      (s[2] = n.z),
      (s[3] = t.x),
      (s[4] = n.y),
      (s[5] = n.z),
      (s[6] = t.x),
      (s[7] = t.y),
      (s[8] = n.z),
      (s[9] = n.x),
      (s[10] = t.y),
      (s[11] = n.z),
      (s[12] = n.x),
      (s[13] = n.y),
      (s[14] = t.z),
      (s[15] = t.x),
      (s[16] = n.y),
      (s[17] = t.z),
      (s[18] = t.x),
      (s[19] = t.y),
      (s[20] = t.z),
      (s[21] = n.x),
      (s[22] = t.y),
      (s[23] = t.z),
      (i.needsUpdate = !0),
      this.geometry.computeBoundingSphere();
  }
  setFromObject(e) {
    return (this.object = e), this.update(), this;
  }
  copy(e, t) {
    return super.copy(e, t), (this.object = e.object), this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class ub extends Gi {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]),
      i = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1],
      s = new vt();
    s.setIndex(new Ot(n, 1)),
      s.setAttribute("position", new Xe(i, 3)),
      super(s, new On({ color: t, toneMapped: !1 })),
      (this.box = e),
      (this.type = "Box3Helper"),
      this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const t = this.box;
    t.isEmpty() ||
      (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(e));
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class hb extends Lr {
  constructor(e, t = 1, n = 16776960) {
    const i = n,
      s = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0],
      l = new vt();
    l.setAttribute("position", new Xe(s, 3)),
      l.computeBoundingSphere(),
      super(l, new On({ color: i, toneMapped: !1 })),
      (this.type = "PlaneHelper"),
      (this.plane = e),
      (this.size = t);
    const c = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0],
      u = new vt();
    u.setAttribute("position", new Xe(c, 3)),
      u.computeBoundingSphere(),
      this.add(new rn(u, new Ur({ color: i, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0),
      this.scale.set(0.5 * this.size, 0.5 * this.size, 1),
      this.lookAt(this.plane.normal),
      this.translateZ(-this.plane.constant),
      super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(),
      this.material.dispose(),
      this.children[0].geometry.dispose(),
      this.children[0].material.dispose();
  }
}
const N0 = new N();
let Vc, sd;
class fb extends Rt {
  constructor(e = new N(0, 0, 1), t = new N(0, 0, 0), n = 1, i = 16776960, s = n * 0.2, l = s * 0.2) {
    super(),
      (this.type = "ArrowHelper"),
      Vc === void 0 &&
        ((Vc = new vt()),
        Vc.setAttribute("position", new Xe([0, 0, 0, 0, 1, 0], 3)),
        (sd = new Co(0, 0.5, 1, 5, 1)),
        sd.translate(0, -0.5, 0)),
      this.position.copy(t),
      (this.line = new Lr(Vc, new On({ color: i, toneMapped: !1 }))),
      (this.line.matrixAutoUpdate = !1),
      this.add(this.line),
      (this.cone = new rn(sd, new Ur({ color: i, toneMapped: !1 }))),
      (this.cone.matrixAutoUpdate = !1),
      this.add(this.cone),
      this.setDirection(e),
      this.setLength(n, s, l);
  }
  setDirection(e) {
    if (e.y > 0.99999) this.quaternion.set(0, 0, 0, 1);
    else if (e.y < -0.99999) this.quaternion.set(1, 0, 0, 0);
    else {
      N0.set(e.z, 0, -e.x).normalize();
      const t = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(N0, t);
    }
  }
  setLength(e, t = e * 0.2, n = t * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - t), 1),
      this.line.updateMatrix(),
      this.cone.scale.set(n, t, n),
      (this.cone.position.y = e),
      this.cone.updateMatrix();
  }
  setColor(e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }
  copy(e) {
    return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
  }
  dispose() {
    this.line.geometry.dispose(),
      this.line.material.dispose(),
      this.cone.geometry.dispose(),
      this.cone.material.dispose();
  }
}
class db extends Gi {
  constructor(e = 1) {
    const t = [0, 0, 0, e, 0, 0, 0, 0, 0, 0, e, 0, 0, 0, 0, 0, 0, e],
      n = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1],
      i = new vt();
    i.setAttribute("position", new Xe(t, 3)), i.setAttribute("color", new Xe(n, 3));
    const s = new On({ vertexColors: !0, toneMapped: !1 });
    super(i, s), (this.type = "AxesHelper");
  }
  setColors(e, t, n) {
    const i = new Ne(),
      s = this.geometry.attributes.color.array;
    return (
      i.set(e),
      i.toArray(s, 0),
      i.toArray(s, 3),
      i.set(t),
      i.toArray(s, 6),
      i.toArray(s, 9),
      i.set(n),
      i.toArray(s, 12),
      i.toArray(s, 15),
      (this.geometry.attributes.color.needsUpdate = !0),
      this
    );
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class pb {
  constructor() {
    (this.type = "ShapePath"), (this.color = new Ne()), (this.subPaths = []), (this.currentPath = null);
  }
  moveTo(e, t) {
    return (this.currentPath = new Pa()), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
  }
  lineTo(e, t) {
    return this.currentPath.lineTo(e, t), this;
  }
  quadraticCurveTo(e, t, n, i) {
    return this.currentPath.quadraticCurveTo(e, t, n, i), this;
  }
  bezierCurveTo(e, t, n, i, s, l) {
    return this.currentPath.bezierCurveTo(e, t, n, i, s, l), this;
  }
  splineThru(e) {
    return this.currentPath.splineThru(e), this;
  }
  toShapes(e) {
    function t(_) {
      const w = [];
      for (let E = 0, A = _.length; E < A; E++) {
        const O = _[E],
          P = new vs();
        (P.curves = O.curves), w.push(P);
      }
      return w;
    }
    function n(_, w) {
      const E = w.length;
      let A = !1;
      for (let O = E - 1, P = 0; P < E; O = P++) {
        let L = w[O],
          F = w[P],
          C = F.x - L.x,
          b = F.y - L.y;
        if (Math.abs(b) > Number.EPSILON) {
          if ((b < 0 && ((L = w[P]), (C = -C), (F = w[O]), (b = -b)), _.y < L.y || _.y > F.y)) continue;
          if (_.y === L.y) {
            if (_.x === L.x) return !0;
          } else {
            const D = b * (_.x - L.x) - C * (_.y - L.y);
            if (D === 0) return !0;
            if (D < 0) continue;
            A = !A;
          }
        } else {
          if (_.y !== L.y) continue;
          if ((F.x <= _.x && _.x <= L.x) || (L.x <= _.x && _.x <= F.x)) return !0;
        }
      }
      return A;
    }
    const i = Vi.isClockWise,
      s = this.subPaths;
    if (s.length === 0) return [];
    let l, c, u;
    const h = [];
    if (s.length === 1) return (c = s[0]), (u = new vs()), (u.curves = c.curves), h.push(u), h;
    let d = !i(s[0].getPoints());
    d = e ? !d : d;
    const p = [],
      m = [];
    let v = [],
      x = 0,
      M;
    (m[x] = void 0), (v[x] = []);
    for (let _ = 0, w = s.length; _ < w; _++)
      (c = s[_]),
        (M = c.getPoints()),
        (l = i(M)),
        (l = e ? !l : l),
        l
          ? (!d && m[x] && x++, (m[x] = { s: new vs(), p: M }), (m[x].s.curves = c.curves), d && x++, (v[x] = []))
          : v[x].push({ h: c, p: M[0] });
    if (!m[0]) return t(s);
    if (m.length > 1) {
      let _ = !1,
        w = 0;
      for (let E = 0, A = m.length; E < A; E++) p[E] = [];
      for (let E = 0, A = m.length; E < A; E++) {
        const O = v[E];
        for (let P = 0; P < O.length; P++) {
          const L = O[P];
          let F = !0;
          for (let C = 0; C < m.length; C++)
            n(L.p, m[C].p) && (E !== C && w++, F ? ((F = !1), p[C].push(L)) : (_ = !0));
          F && p[E].push(L);
        }
      }
      w > 0 && _ === !1 && (v = p);
    }
    let y;
    for (let _ = 0, w = m.length; _ < w; _++) {
      (u = m[_].s), h.push(u), (y = v[_]);
      for (let E = 0, A = y.length; E < A; E++) u.holes.push(y[E].h);
    }
    return h;
  }
}
class mb extends Hi {
  constructor(e, t = null) {
    super(),
      (this.object = e),
      (this.domElement = t),
      (this.enabled = !0),
      (this.state = -1),
      (this.keys = {}),
      (this.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null }),
      (this.touches = { ONE: null, TWO: null });
  }
  connect() {}
  disconnect() {}
  dispose() {}
  update() {}
}
class gb extends wi {
  constructor(e = 1, t = 1, n = 1, i = {}) {
    console.warn(
      'THREE.WebGLMultipleRenderTargets has been deprecated and will be removed in r172. Use THREE.WebGLRenderTarget and set the "count" parameter to enable MRT.'
    ),
      super(e, t, { ...i, count: n }),
      (this.isWebGLMultipleRenderTargets = !0);
  }
  get texture() {
    return this.textures;
  }
}
typeof __THREE_DEVTOOLS__ < "u" &&
  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: { revision: Du } }));
typeof window < "u" &&
  (window.__THREE__
    ? console.warn("WARNING: Multiple instances of Three.js being imported.")
    : (window.__THREE__ = Du));
const vb = Object.freeze(
  Object.defineProperty(
    {
      __proto__: null,
      ACESFilmicToneMapping: Dd,
      AddEquation: Pr,
      AddOperation: xv,
      AdditiveAnimationBlendMode: Wd,
      AdditiveBlending: md,
      AgXToneMapping: Ev,
      AlphaFormat: Bd,
      AlwaysCompare: zv,
      AlwaysDepth: Kc,
      AlwaysStencilFunc: xd,
      AmbientLight: k_,
      AnimationAction: Z_,
      AnimationClip: Fa,
      AnimationLoader: gA,
      AnimationMixer: XA,
      AnimationObjectGroup: GA,
      AnimationUtils: fA,
      ArcCurve: h_,
      ArrayCamera: t_,
      ArrowHelper: fb,
      AttachedBindMode: _d,
      Audio: Y_,
      AudioAnalyser: DA,
      AudioContext: gp,
      AudioListener: PA,
      AudioLoader: bA,
      AxesHelper: db,
      BackSide: Nn,
      BasicDepthPacking: Pv,
      BasicShadowMap: $0,
      BatchedMesh: l_,
      Bone: np,
      BooleanKeyframeTrack: Ts,
      Box2: QA,
      Box3: Fn,
      Box3Helper: ub,
      BoxGeometry: Es,
      BoxHelper: cb,
      BufferAttribute: Ot,
      BufferGeometry: vt,
      BufferGeometryLoader: X_,
      ByteType: Nd,
      Cache: rr,
      Camera: Va,
      CameraHelper: lb,
      CanvasTexture: FT,
      CapsuleGeometry: ju,
      CatmullRomCurve3: f_,
      CineonToneMapping: Mv,
      CircleGeometry: Qu,
      ClampToEdgeWrapping: fi,
      Clock: vp,
      Color: Ne,
      ColorKeyframeTrack: dp,
      ColorManagement: At,
      CompressedArrayTexture: UT,
      CompressedCubeTexture: NT,
      CompressedTexture: Ju,
      CompressedTextureLoader: vA,
      ConeGeometry: $u,
      ConstantAlphaFactor: gv,
      ConstantColorFactor: pv,
      Controls: mb,
      CubeCamera: qv,
      CubeReflectionMapping: lr,
      CubeRefractionMapping: Ir,
      CubeTexture: Ha,
      CubeTextureLoader: _A,
      CubeUVReflectionMapping: wo,
      CubicBezierCurve: sp,
      CubicBezierCurve3: d_,
      CubicInterpolant: L_,
      CullFaceBack: pd,
      CullFaceFront: Q0,
      CullFaceFrontBack: uy,
      CullFaceNone: j0,
      Curve: Ti,
      CurvePath: m_,
      CustomBlending: ev,
      CustomToneMapping: wv,
      CylinderGeometry: Co,
      Cylindrical: jA,
      Data3DTexture: qd,
      DataArrayTexture: Gu,
      DataTexture: ki,
      DataTextureLoader: xA,
      DataUtils: ES,
      DecrementStencilOp: Ey,
      DecrementWrapStencilOp: Ay,
      DefaultLoadingManager: N_,
      DepthFormat: ps,
      DepthStencilFormat: ys,
      DepthTexture: jd,
      DetachedBindMode: Av,
      DirectionalLight: z_,
      DirectionalLightHelper: ab,
      DiscreteInterpolant: D_,
      DodecahedronGeometry: eh,
      DoubleSide: Si,
      DstAlphaFactor: cv,
      DstColorFactor: hv,
      DynamicCopyUsage: Vy,
      DynamicDrawUsage: Ny,
      DynamicReadUsage: By,
      EdgesGeometry: g_,
      EllipseCurve: Ku,
      EqualCompare: Nv,
      EqualDepth: Qc,
      EqualStencilFunc: Py,
      EquirectangularReflectionMapping: Sa,
      EquirectangularRefractionMapping: Ma,
      Euler: ni,
      EventDispatcher: Hi,
      ExtrudeGeometry: nh,
      FileLoader: ur,
      Float16BufferAttribute: PS,
      Float32BufferAttribute: Xe,
      FloatType: Yn,
      Fog: Yu,
      FogExp2: Xu,
      FramebufferTexture: DT,
      FrontSide: ar,
      Frustum: Ga,
      GLBufferAttribute: JA,
      GLSL1: Gy,
      GLSL3: yd,
      GreaterCompare: Fv,
      GreaterDepth: eu,
      GreaterEqualCompare: Bv,
      GreaterEqualDepth: $c,
      GreaterEqualStencilFunc: Uy,
      GreaterStencilFunc: Ly,
      GridHelper: sb,
      Group: po,
      HalfFloatType: Eo,
      HemisphereLight: F_,
      HemisphereLightHelper: rb,
      IcosahedronGeometry: ih,
      ImageBitmapLoader: AA,
      ImageLoader: Oa,
      ImageUtils: Hv,
      IncrementStencilOp: wy,
      IncrementWrapStencilOp: Ty,
      InstancedBufferAttribute: So,
      InstancedBufferGeometry: W_,
      InstancedInterleavedBuffer: ZA,
      InstancedMesh: a_,
      Int16BufferAttribute: CS,
      Int32BufferAttribute: RS,
      Int8BufferAttribute: TS,
      IntType: Fu,
      InterleavedBuffer: qu,
      InterleavedBufferAttribute: Ss,
      Interpolant: Za,
      InterpolateDiscrete: Ta,
      InterpolateLinear: Cu,
      InterpolateSmooth: Wc,
      InvertStencilOp: by,
      KeepStencilOp: os,
      KeyframeTrack: Ai,
      LOD: s_,
      LatheGeometry: Xa,
      Layers: gs,
      LessCompare: Uv,
      LessDepth: jc,
      LessEqualCompare: Xd,
      LessEqualDepth: _s,
      LessEqualStencilFunc: Iy,
      LessStencilFunc: Ry,
      Light: Fr,
      LightProbe: G_,
      Line: Lr,
      Line3: $A,
      LineBasicMaterial: On,
      LineCurve: op,
      LineCurve3: p_,
      LineDashedMaterial: R_,
      LineLoop: c_,
      LineSegments: Gi,
      LinearFilter: an,
      LinearInterpolant: fp,
      LinearMipMapLinearFilter: py,
      LinearMipMapNearestFilter: dy,
      LinearMipmapLinearFilter: Oi,
      LinearMipmapNearestFilter: fa,
      LinearSRGBColorSpace: ws,
      LinearToneMapping: yv,
      LinearTransfer: ka,
      Loader: Zn,
      LoaderUtils: Cd,
      LoadingManager: pp,
      LoopOnce: bv,
      LoopPingPong: Rv,
      LoopRepeat: Cv,
      LuminanceAlphaFormat: Vd,
      LuminanceFormat: kd,
      MOUSE: ly,
      Material: Cn,
      MaterialLoader: uh,
      MathUtils: oS,
      Matrix2: Sp,
      Matrix3: dt,
      Matrix4: st,
      MaxEquation: rv,
      Mesh: rn,
      MeshBasicMaterial: Ur,
      MeshDepthMaterial: Qd,
      MeshDistanceMaterial: $d,
      MeshLambertMaterial: b_,
      MeshMatcapMaterial: C_,
      MeshNormalMaterial: A_,
      MeshPhongMaterial: E_,
      MeshPhysicalMaterial: w_,
      MeshStandardMaterial: up,
      MeshToonMaterial: T_,
      MinEquation: iv,
      MirroredRepeatWrapping: Ea,
      MixOperation: _v,
      MultiplyBlending: vd,
      MultiplyOperation: Ba,
      NearestFilter: _n,
      NearestMipMapLinearFilter: fy,
      NearestMipMapNearestFilter: hy,
      NearestMipmapLinearFilter: uo,
      NearestMipmapNearestFilter: Ud,
      NeutralToneMapping: Tv,
      NeverCompare: Dv,
      NeverDepth: Jc,
      NeverStencilFunc: Cy,
      NoBlending: sr,
      NoColorSpace: nr,
      NoToneMapping: zi,
      NormalAnimationBlendMode: Hu,
      NormalBlending: ds,
      NotEqualCompare: Ov,
      NotEqualDepth: tu,
      NotEqualStencilFunc: Dy,
      NumberKeyframeTrack: Ua,
      Object3D: Rt,
      ObjectLoader: EA,
      ObjectSpaceNormalMap: Lv,
      OctahedronGeometry: Ya,
      OneFactor: ov,
      OneMinusConstantAlphaFactor: vv,
      OneMinusConstantColorFactor: mv,
      OneMinusDstAlphaFactor: uv,
      OneMinusDstColorFactor: fv,
      OneMinusSrcAlphaFactor: Zc,
      OneMinusSrcColorFactor: lv,
      OrthographicCamera: Wa,
      PCFShadowMap: Uu,
      PCFSoftShadowMap: ha,
      PMREMGenerator: Sd,
      Path: Pa,
      PerspectiveCamera: gn,
      Plane: Rr,
      PlaneGeometry: Ao,
      PlaneHelper: hb,
      PointLight: B_,
      PointLightHelper: nb,
      Points: u_,
      PointsMaterial: ip,
      PolarGridHelper: ob,
      PolyhedronGeometry: Nr,
      PositionalAudio: LA,
      PropertyBinding: bt,
      PropertyMixer: q_,
      QuadraticBezierCurve: ap,
      QuadraticBezierCurve3: lp,
      Quaternion: qn,
      QuaternionKeyframeTrack: Ja,
      QuaternionLinearInterpolant: U_,
      RED_GREEN_RGTC2_Format: Au,
      RED_RGTC1_Format: Gd,
      REVISION: Du,
      RGBADepthPacking: Iv,
      RGBAFormat: An,
      RGBAIntegerFormat: Vu,
      RGBA_ASTC_10x10_Format: yu,
      RGBA_ASTC_10x5_Format: vu,
      RGBA_ASTC_10x6_Format: _u,
      RGBA_ASTC_10x8_Format: xu,
      RGBA_ASTC_12x10_Format: Su,
      RGBA_ASTC_12x12_Format: Mu,
      RGBA_ASTC_4x4_Format: cu,
      RGBA_ASTC_5x4_Format: uu,
      RGBA_ASTC_5x5_Format: hu,
      RGBA_ASTC_6x5_Format: fu,
      RGBA_ASTC_6x6_Format: du,
      RGBA_ASTC_8x5_Format: pu,
      RGBA_ASTC_8x6_Format: mu,
      RGBA_ASTC_8x8_Format: gu,
      RGBA_BPTC_Format: va,
      RGBA_ETC2_EAC_Format: lu,
      RGBA_PVRTC_2BPPV1_Format: su,
      RGBA_PVRTC_4BPPV1_Format: ru,
      RGBA_S3TC_DXT1_Format: pa,
      RGBA_S3TC_DXT3_Format: ma,
      RGBA_S3TC_DXT5_Format: ga,
      RGBDepthPacking: xy,
      RGBFormat: zd,
      RGBIntegerFormat: my,
      RGB_BPTC_SIGNED_Format: wu,
      RGB_BPTC_UNSIGNED_Format: Eu,
      RGB_ETC1_Format: ou,
      RGB_ETC2_Format: au,
      RGB_PVRTC_2BPPV1_Format: iu,
      RGB_PVRTC_4BPPV1_Format: nu,
      RGB_S3TC_DXT1_Format: da,
      RGDepthPacking: yy,
      RGFormat: Hd,
      RGIntegerFormat: ku,
      RawShaderMaterial: M_,
      Ray: To,
      Raycaster: J_,
      RectAreaLight: V_,
      RedFormat: zu,
      RedIntegerFormat: za,
      ReinhardToneMapping: Sv,
      RenderTarget: Gv,
      RepeatWrapping: wa,
      ReplaceStencilOp: My,
      ReverseSubtractEquation: nv,
      RingGeometry: rh,
      SIGNED_RED_GREEN_RGTC2_Format: bu,
      SIGNED_RED_RGTC1_Format: Tu,
      SRGBColorSpace: Wn,
      SRGBTransfer: Ut,
      Scene: ep,
      ShaderChunk: gt,
      ShaderLib: yi,
      ShaderMaterial: Ei,
      ShadowMaterial: S_,
      Shape: vs,
      ShapeGeometry: sh,
      ShapePath: pb,
      ShapeUtils: Vi,
      ShortType: Fd,
      Skeleton: Zu,
      SkeletonHelper: tb,
      SkinnedMesh: o_,
      Source: hs,
      Sphere: bn,
      SphereGeometry: qa,
      Spherical: KA,
      SphericalHarmonics3: H_,
      SplineCurve: cp,
      SpotLight: O_,
      SpotLightHelper: eb,
      Sprite: r_,
      SpriteMaterial: tp,
      SrcAlphaFactor: qc,
      SrcAlphaSaturateFactor: dv,
      SrcColorFactor: av,
      StaticCopyUsage: ky,
      StaticDrawUsage: ba,
      StaticReadUsage: Oy,
      StereoCamera: CA,
      StreamCopyUsage: Hy,
      StreamDrawUsage: Fy,
      StreamReadUsage: zy,
      StringKeyframeTrack: As,
      SubtractEquation: tv,
      SubtractiveBlending: gd,
      TOUCH: cy,
      TangentSpaceNormalMap: Dr,
      TetrahedronGeometry: oh,
      Texture: Kt,
      TextureLoader: yA,
      TextureUtils: dT,
      TorusGeometry: ah,
      TorusKnotGeometry: lh,
      Triangle: Xn,
      TriangleFanDrawMode: _y,
      TriangleStripDrawMode: vy,
      TrianglesDrawMode: gy,
      TubeGeometry: ch,
      UVMapping: Nu,
      Uint16BufferAttribute: Zd,
      Uint32BufferAttribute: Jd,
      Uint8BufferAttribute: AS,
      Uint8ClampedBufferAttribute: bS,
      Uniform: yp,
      UniformsGroup: qA,
      UniformsLib: we,
      UniformsUtils: Yv,
      UnsignedByteType: Mi,
      UnsignedInt248Type: xs,
      UnsignedInt5999Type: Od,
      UnsignedIntType: cr,
      UnsignedShort4444Type: Ou,
      UnsignedShort5551Type: Bu,
      UnsignedShortType: _o,
      VSMShadowMap: xi,
      Vector2: fe,
      Vector3: N,
      Vector4: Ct,
      VectorKeyframeTrack: Na,
      VideoTexture: LT,
      WebGL3DRenderTarget: pS,
      WebGLArrayRenderTarget: dS,
      WebGLCoordinateSystem: Bi,
      WebGLCubeRenderTarget: Zv,
      WebGLMultipleRenderTargets: gb,
      WebGLRenderTarget: wi,
      WebGLRenderer: n_,
      WebGLUtils: e_,
      WebGPUCoordinateSystem: Ca,
      WireframeGeometry: y_,
      WrapAroundEnding: Aa,
      ZeroCurvatureEnding: cs,
      ZeroFactor: sv,
      ZeroSlopeEnding: us,
      ZeroStencilOp: Sy,
      createCanvasElement: Vv,
    },
    Symbol.toStringTag,
    { value: "Module" }
  )
);
var j_ = { exports: {} },
  bs = {};
/**
 * @license React
 * react-reconciler-constants.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ bs.ConcurrentRoot = 1;
bs.ContinuousEventPriority = 4;
bs.DefaultEventPriority = 16;
bs.DiscreteEventPriority = 1;
bs.IdleEventPriority = 536870912;
bs.LegacyRoot = 0;
j_.exports = bs;
var go = j_.exports;
function _b(r) {
  let e;
  const t = new Set(),
    n = (h, d) => {
      const p = typeof h == "function" ? h(e) : h;
      if (p !== e) {
        const m = e;
        (e = d ? p : Object.assign({}, e, p)), t.forEach((v) => v(e, m));
      }
    },
    i = () => e,
    s = (h, d = i, p = Object.is) => {
      console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
      let m = d(e);
      function v() {
        const x = d(e);
        if (!p(m, x)) {
          const M = m;
          h((m = x), M);
        }
      }
      return t.add(v), () => t.delete(v);
    },
    u = {
      setState: n,
      getState: i,
      subscribe: (h, d, p) => (d || p ? s(h, d, p) : (t.add(h), () => t.delete(h))),
      destroy: () => t.clear(),
    };
  return (e = r(n, i, u)), u;
}
const xb = typeof window > "u" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent),
  F0 = xb ? Ke.useEffect : Ke.useLayoutEffect;
function yb(r) {
  const e = typeof r == "function" ? _b(r) : r,
    t = (n = e.getState, i = Object.is) => {
      const [, s] = Ke.useReducer((y) => y + 1, 0),
        l = e.getState(),
        c = Ke.useRef(l),
        u = Ke.useRef(n),
        h = Ke.useRef(i),
        d = Ke.useRef(!1),
        p = Ke.useRef();
      p.current === void 0 && (p.current = n(l));
      let m,
        v = !1;
      (c.current !== l || u.current !== n || h.current !== i || d.current) && ((m = n(l)), (v = !i(p.current, m))),
        F0(() => {
          v && (p.current = m), (c.current = l), (u.current = n), (h.current = i), (d.current = !1);
        });
      const x = Ke.useRef(l);
      F0(() => {
        const y = () => {
            try {
              const w = e.getState(),
                E = u.current(w);
              h.current(p.current, E) || ((c.current = w), (p.current = E), s());
            } catch {
              (d.current = !0), s();
            }
          },
          _ = e.subscribe(y);
        return e.getState() !== x.current && y(), _;
      }, []);
      const M = v ? m : p.current;
      return Ke.useDebugValue(M), M;
    };
  return (
    Object.assign(t, e),
    (t[Symbol.iterator] = function () {
      console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
      const n = [t, e];
      return {
        next() {
          const i = n.length <= 0;
          return { value: n.shift(), done: i };
        },
      };
    }),
    t
  );
}
var Q_ = { exports: {} },
  $_ = { exports: {} },
  ex = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ (function (r) {
  function e(k, ne) {
    var te = k.length;
    k.push(ne);
    e: for (; 0 < te; ) {
      var ce = (te - 1) >>> 1,
        Ce = k[ce];
      if (0 < i(Ce, ne)) (k[ce] = ne), (k[te] = Ce), (te = ce);
      else break e;
    }
  }
  function t(k) {
    return k.length === 0 ? null : k[0];
  }
  function n(k) {
    if (k.length === 0) return null;
    var ne = k[0],
      te = k.pop();
    if (te !== ne) {
      k[0] = te;
      e: for (var ce = 0, Ce = k.length, Ye = Ce >>> 1; ce < Ye; ) {
        var re = 2 * (ce + 1) - 1,
          ge = k[re],
          De = re + 1,
          xe = k[De];
        if (0 > i(ge, te))
          De < Ce && 0 > i(xe, ge) ? ((k[ce] = xe), (k[De] = te), (ce = De)) : ((k[ce] = ge), (k[re] = te), (ce = re));
        else if (De < Ce && 0 > i(xe, te)) (k[ce] = xe), (k[De] = te), (ce = De);
        else break e;
      }
    }
    return ne;
  }
  function i(k, ne) {
    var te = k.sortIndex - ne.sortIndex;
    return te !== 0 ? te : k.id - ne.id;
  }
  if (typeof performance == "object" && typeof performance.now == "function") {
    var s = performance;
    r.unstable_now = function () {
      return s.now();
    };
  } else {
    var l = Date,
      c = l.now();
    r.unstable_now = function () {
      return l.now() - c;
    };
  }
  var u = [],
    h = [],
    d = 1,
    p = null,
    m = 3,
    v = !1,
    x = !1,
    M = !1,
    y = typeof setTimeout == "function" ? setTimeout : null,
    _ = typeof clearTimeout == "function" ? clearTimeout : null,
    w = typeof setImmediate < "u" ? setImmediate : null;
  typeof navigator < "u" &&
    navigator.scheduling !== void 0 &&
    navigator.scheduling.isInputPending !== void 0 &&
    navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function E(k) {
    for (var ne = t(h); ne !== null; ) {
      if (ne.callback === null) n(h);
      else if (ne.startTime <= k) n(h), (ne.sortIndex = ne.expirationTime), e(u, ne);
      else break;
      ne = t(h);
    }
  }
  function A(k) {
    if (((M = !1), E(k), !x))
      if (t(u) !== null) (x = !0), j(O);
      else {
        var ne = t(h);
        ne !== null && me(A, ne.startTime - k);
      }
  }
  function O(k, ne) {
    (x = !1), M && ((M = !1), _(F), (F = -1)), (v = !0);
    var te = m;
    try {
      for (E(ne), p = t(u); p !== null && (!(p.expirationTime > ne) || (k && !D())); ) {
        var ce = p.callback;
        if (typeof ce == "function") {
          (p.callback = null), (m = p.priorityLevel);
          var Ce = ce(p.expirationTime <= ne);
          (ne = r.unstable_now()), typeof Ce == "function" ? (p.callback = Ce) : p === t(u) && n(u), E(ne);
        } else n(u);
        p = t(u);
      }
      if (p !== null) var Ye = !0;
      else {
        var re = t(h);
        re !== null && me(A, re.startTime - ne), (Ye = !1);
      }
      return Ye;
    } finally {
      (p = null), (m = te), (v = !1);
    }
  }
  var P = !1,
    L = null,
    F = -1,
    C = 5,
    b = -1;
  function D() {
    return !(r.unstable_now() - b < C);
  }
  function Y() {
    if (L !== null) {
      var k = r.unstable_now();
      b = k;
      var ne = !0;
      try {
        ne = L(!0, k);
      } finally {
        ne ? q() : ((P = !1), (L = null));
      }
    } else P = !1;
  }
  var q;
  if (typeof w == "function")
    q = function () {
      w(Y);
    };
  else if (typeof MessageChannel < "u") {
    var K = new MessageChannel(),
      ae = K.port2;
    (K.port1.onmessage = Y),
      (q = function () {
        ae.postMessage(null);
      });
  } else
    q = function () {
      y(Y, 0);
    };
  function j(k) {
    (L = k), P || ((P = !0), q());
  }
  function me(k, ne) {
    F = y(function () {
      k(r.unstable_now());
    }, ne);
  }
  (r.unstable_IdlePriority = 5),
    (r.unstable_ImmediatePriority = 1),
    (r.unstable_LowPriority = 4),
    (r.unstable_NormalPriority = 3),
    (r.unstable_Profiling = null),
    (r.unstable_UserBlockingPriority = 2),
    (r.unstable_cancelCallback = function (k) {
      k.callback = null;
    }),
    (r.unstable_continueExecution = function () {
      x || v || ((x = !0), j(O));
    }),
    (r.unstable_forceFrameRate = function (k) {
      0 > k || 125 < k
        ? console.error(
            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
          )
        : (C = 0 < k ? Math.floor(1e3 / k) : 5);
    }),
    (r.unstable_getCurrentPriorityLevel = function () {
      return m;
    }),
    (r.unstable_getFirstCallbackNode = function () {
      return t(u);
    }),
    (r.unstable_next = function (k) {
      switch (m) {
        case 1:
        case 2:
        case 3:
          var ne = 3;
          break;
        default:
          ne = m;
      }
      var te = m;
      m = ne;
      try {
        return k();
      } finally {
        m = te;
      }
    }),
    (r.unstable_pauseExecution = function () {}),
    (r.unstable_requestPaint = function () {}),
    (r.unstable_runWithPriority = function (k, ne) {
      switch (k) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          k = 3;
      }
      var te = m;
      m = k;
      try {
        return ne();
      } finally {
        m = te;
      }
    }),
    (r.unstable_scheduleCallback = function (k, ne, te) {
      var ce = r.unstable_now();
      switch (
        (typeof te == "object" && te !== null
          ? ((te = te.delay), (te = typeof te == "number" && 0 < te ? ce + te : ce))
          : (te = ce),
        k)
      ) {
        case 1:
          var Ce = -1;
          break;
        case 2:
          Ce = 250;
          break;
        case 5:
          Ce = 1073741823;
          break;
        case 4:
          Ce = 1e4;
          break;
        default:
          Ce = 5e3;
      }
      return (
        (Ce = te + Ce),
        (k = { id: d++, callback: ne, priorityLevel: k, startTime: te, expirationTime: Ce, sortIndex: -1 }),
        te > ce
          ? ((k.sortIndex = te),
            e(h, k),
            t(u) === null && k === t(h) && (M ? (_(F), (F = -1)) : (M = !0), me(A, te - ce)))
          : ((k.sortIndex = Ce), e(u, k), x || v || ((x = !0), j(O))),
        k
      );
    }),
    (r.unstable_shouldYield = D),
    (r.unstable_wrapCallback = function (k) {
      var ne = m;
      return function () {
        var te = m;
        m = ne;
        try {
          return k.apply(this, arguments);
        } finally {
          m = te;
        }
      };
    });
})(ex);
$_.exports = ex;
var Pd = $_.exports;
/**
 * @license React
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var Sb = function (e) {
  var t = {},
    n = Ke,
    i = Pd,
    s = Object.assign;
  function l(o) {
    for (var a = "https://reactjs.org/docs/error-decoder.html?invariant=" + o, f = 1; f < arguments.length; f++)
      a += "&args[]=" + encodeURIComponent(arguments[f]);
    return (
      "Minified React error #" +
      o +
      "; visit " +
      a +
      " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
    );
  }
  var c = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    u = Symbol.for("react.element"),
    h = Symbol.for("react.portal"),
    d = Symbol.for("react.fragment"),
    p = Symbol.for("react.strict_mode"),
    m = Symbol.for("react.profiler"),
    v = Symbol.for("react.provider"),
    x = Symbol.for("react.context"),
    M = Symbol.for("react.forward_ref"),
    y = Symbol.for("react.suspense"),
    _ = Symbol.for("react.suspense_list"),
    w = Symbol.for("react.memo"),
    E = Symbol.for("react.lazy"),
    A = Symbol.for("react.offscreen"),
    O = Symbol.iterator;
  function P(o) {
    return o === null || typeof o != "object"
      ? null
      : ((o = (O && o[O]) || o["@@iterator"]), typeof o == "function" ? o : null);
  }
  function L(o) {
    if (o == null) return null;
    if (typeof o == "function") return o.displayName || o.name || null;
    if (typeof o == "string") return o;
    switch (o) {
      case d:
        return "Fragment";
      case h:
        return "Portal";
      case m:
        return "Profiler";
      case p:
        return "StrictMode";
      case y:
        return "Suspense";
      case _:
        return "SuspenseList";
    }
    if (typeof o == "object")
      switch (o.$$typeof) {
        case x:
          return (o.displayName || "Context") + ".Consumer";
        case v:
          return (o._context.displayName || "Context") + ".Provider";
        case M:
          var a = o.render;
          return (
            (o = o.displayName),
            o || ((o = a.displayName || a.name || ""), (o = o !== "" ? "ForwardRef(" + o + ")" : "ForwardRef")),
            o
          );
        case w:
          return (a = o.displayName || null), a !== null ? a : L(o.type) || "Memo";
        case E:
          (a = o._payload), (o = o._init);
          try {
            return L(o(a));
          } catch {}
      }
    return null;
  }
  function F(o) {
    var a = o.type;
    switch (o.tag) {
      case 24:
        return "Cache";
      case 9:
        return (a.displayName || "Context") + ".Consumer";
      case 10:
        return (a._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return (
          (o = a.render),
          (o = o.displayName || o.name || ""),
          a.displayName || (o !== "" ? "ForwardRef(" + o + ")" : "ForwardRef")
        );
      case 7:
        return "Fragment";
      case 5:
        return a;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return L(a);
      case 8:
        return a === p ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if (typeof a == "function") return a.displayName || a.name || null;
        if (typeof a == "string") return a;
    }
    return null;
  }
  function C(o) {
    var a = o,
      f = o;
    if (o.alternate) for (; a.return; ) a = a.return;
    else {
      o = a;
      do (a = o), a.flags & 4098 && (f = a.return), (o = a.return);
      while (o);
    }
    return a.tag === 3 ? f : null;
  }
  function b(o) {
    if (C(o) !== o) throw Error(l(188));
  }
  function D(o) {
    var a = o.alternate;
    if (!a) {
      if (((a = C(o)), a === null)) throw Error(l(188));
      return a !== o ? null : o;
    }
    for (var f = o, g = a; ; ) {
      var S = f.return;
      if (S === null) break;
      var T = S.alternate;
      if (T === null) {
        if (((g = S.return), g !== null)) {
          f = g;
          continue;
        }
        break;
      }
      if (S.child === T.child) {
        for (T = S.child; T; ) {
          if (T === f) return b(S), o;
          if (T === g) return b(S), a;
          T = T.sibling;
        }
        throw Error(l(188));
      }
      if (f.return !== g.return) (f = S), (g = T);
      else {
        for (var B = !1, V = S.child; V; ) {
          if (V === f) {
            (B = !0), (f = S), (g = T);
            break;
          }
          if (V === g) {
            (B = !0), (g = S), (f = T);
            break;
          }
          V = V.sibling;
        }
        if (!B) {
          for (V = T.child; V; ) {
            if (V === f) {
              (B = !0), (f = T), (g = S);
              break;
            }
            if (V === g) {
              (B = !0), (g = T), (f = S);
              break;
            }
            V = V.sibling;
          }
          if (!B) throw Error(l(189));
        }
      }
      if (f.alternate !== g) throw Error(l(190));
    }
    if (f.tag !== 3) throw Error(l(188));
    return f.stateNode.current === f ? o : a;
  }
  function Y(o) {
    return (o = D(o)), o !== null ? q(o) : null;
  }
  function q(o) {
    if (o.tag === 5 || o.tag === 6) return o;
    for (o = o.child; o !== null; ) {
      var a = q(o);
      if (a !== null) return a;
      o = o.sibling;
    }
    return null;
  }
  function K(o) {
    if (o.tag === 5 || o.tag === 6) return o;
    for (o = o.child; o !== null; ) {
      if (o.tag !== 4) {
        var a = K(o);
        if (a !== null) return a;
      }
      o = o.sibling;
    }
    return null;
  }
  var ae = Array.isArray,
    j = e.getPublicInstance,
    me = e.getRootHostContext,
    k = e.getChildHostContext,
    ne = e.prepareForCommit,
    te = e.resetAfterCommit,
    ce = e.createInstance,
    Ce = e.appendInitialChild,
    Ye = e.finalizeInitialChildren,
    re = e.prepareUpdate,
    ge = e.shouldSetTextContent,
    De = e.createTextInstance,
    xe = e.scheduleTimeout,
    je = e.cancelTimeout,
    it = e.noTimeout,
    Qe = e.isPrimaryRenderer,
    at = e.supportsMutation,
    ue = e.supportsPersistence,
    pe = e.supportsHydration,
    z = e.getInstanceFromNode,
    qe = e.preparePortalMount,
    ve = e.getCurrentEventPriority,
    Oe = e.detachDeletedInstance,
    Me = e.supportsMicrotasks,
    tt = e.scheduleMicrotask,
    Ie = e.supportsTestSelectors,
    U = e.findFiberRoot,
    R = e.getBoundingRect,
    Z = e.getTextContent,
    oe = e.isHiddenSubtree,
    de = e.matchAccessibilityRole,
    le = e.setFocusIfFocusable,
    We = e.setupIntersectionObserver,
    Ee = e.appendChild,
    Fe = e.appendChildToContainer,
    Mt = e.commitTextUpdate,
    _e = e.commitMount,
    Be = e.commitUpdate,
    nt = e.insertBefore,
    ot = e.insertInContainerBefore,
    ze = e.removeChild,
    Et = e.removeChildFromContainer,
    ct = e.resetTextContent,
    Nt = e.hideInstance,
    H = e.hideTextInstance,
    Te = e.unhideInstance,
    se = e.unhideTextInstance,
    he = e.clearContainer,
    Ue = e.cloneInstance,
    Re = e.createContainerChildSet,
    lt = e.appendChildToContainerChildSet,
    kt = e.finalizeContainerChildren,
    sn = e.replaceContainerChildren,
    Pt = e.cloneHiddenInstance,
    Bn = e.cloneHiddenTextInstance,
    di = e.canHydrateInstance,
    ja = e.canHydrateTextInstance,
    Qa = e.canHydrateSuspenseInstance,
    bi = e.isSuspenseInstancePending,
    Or = e.isSuspenseInstanceFallback,
    $a = e.registerSuspenseInstanceRetry,
    hr = e.getNextHydratableSibling,
    Cs = e.getFirstHydratableChild,
    el = e.getFirstHydratableChildWithinContainer,
    Rs = e.getFirstHydratableChildWithinSuspenseInstance,
    tl = e.hydrateInstance,
    nl = e.hydrateTextInstance,
    hh = e.hydrateSuspenseInstance,
    fh = e.getNextHydratableInstanceAfterSuspenseInstance,
    il = e.commitHydratedContainer,
    I = e.commitHydratedSuspenseInstance,
    G = e.clearSuspenseBoundary,
    Q = e.clearSuspenseBoundaryFromContainer,
    $ = e.shouldDeleteUnhydratedTailInstances,
    X = e.didNotMatchHydratedContainerTextInstance,
    Se = e.didNotMatchHydratedTextInstance,
    Ae;
  function Ve(o) {
    if (Ae === void 0)
      try {
        throw Error();
      } catch (f) {
        var a = f.stack.trim().match(/\n( *(at )?)/);
        Ae = (a && a[1]) || "";
      }
    return (
      `
` +
      Ae +
      o
    );
  }
  var He = !1;
  function rt(o, a) {
    if (!o || He) return "";
    He = !0;
    var f = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (a)
        if (
          ((a = function () {
            throw Error();
          }),
          Object.defineProperty(a.prototype, "props", {
            set: function () {
              throw Error();
            },
          }),
          typeof Reflect == "object" && Reflect.construct)
        ) {
          try {
            Reflect.construct(a, []);
          } catch (ye) {
            var g = ye;
          }
          Reflect.construct(o, [], a);
        } else {
          try {
            a.call();
          } catch (ye) {
            g = ye;
          }
          o.call(a.prototype);
        }
      else {
        try {
          throw Error();
        } catch (ye) {
          g = ye;
        }
        o();
      }
    } catch (ye) {
      if (ye && g && typeof ye.stack == "string") {
        for (
          var S = ye.stack.split(`
`),
            T = g.stack.split(`
`),
            B = S.length - 1,
            V = T.length - 1;
          1 <= B && 0 <= V && S[B] !== T[V];

        )
          V--;
        for (; 1 <= B && 0 <= V; B--, V--)
          if (S[B] !== T[V]) {
            if (B !== 1 || V !== 1)
              do
                if ((B--, V--, 0 > V || S[B] !== T[V])) {
                  var ie =
                    `
` + S[B].replace(" at new ", " at ");
                  return (
                    o.displayName && ie.includes("<anonymous>") && (ie = ie.replace("<anonymous>", o.displayName)), ie
                  );
                }
              while (1 <= B && 0 <= V);
            break;
          }
      }
    } finally {
      (He = !1), (Error.prepareStackTrace = f);
    }
    return (o = o ? o.displayName || o.name : "") ? Ve(o) : "";
  }
  var ut = Object.prototype.hasOwnProperty,
    Ge = [],
    xt = -1;
  function Tt(o) {
    return { current: o };
  }
  function et(o) {
    0 > xt || ((o.current = Ge[xt]), (Ge[xt] = null), xt--);
  }
  function mt(o, a) {
    xt++, (Ge[xt] = o.current), (o.current = a);
  }
  var yt = {},
    Pe = Tt(yt),
    Vt = Tt(!1),
    wt = yt;
  function un(o, a) {
    var f = o.type.contextTypes;
    if (!f) return yt;
    var g = o.stateNode;
    if (g && g.__reactInternalMemoizedUnmaskedChildContext === a) return g.__reactInternalMemoizedMaskedChildContext;
    var S = {},
      T;
    for (T in f) S[T] = a[T];
    return (
      g &&
        ((o = o.stateNode),
        (o.__reactInternalMemoizedUnmaskedChildContext = a),
        (o.__reactInternalMemoizedMaskedChildContext = S)),
      S
    );
  }
  function jt(o) {
    return (o = o.childContextTypes), o != null;
  }
  function hn() {
    et(Vt), et(Pe);
  }
  function fr(o, a, f) {
    if (Pe.current !== yt) throw Error(l(168));
    mt(Pe, a), mt(Vt, f);
  }
  function Ft(o, a, f) {
    var g = o.stateNode;
    if (((a = a.childContextTypes), typeof g.getChildContext != "function")) return f;
    g = g.getChildContext();
    for (var S in g) if (!(S in a)) throw Error(l(108, F(o) || "Unknown", S));
    return s({}, f, g);
  }
  function Rn(o) {
    return (
      (o = ((o = o.stateNode) && o.__reactInternalMemoizedMergedChildContext) || yt),
      (wt = Pe.current),
      mt(Pe, o),
      mt(Vt, Vt.current),
      !0
    );
  }
  function dr(o, a, f) {
    var g = o.stateNode;
    if (!g) throw Error(l(169));
    f ? ((o = Ft(o, a, wt)), (g.__reactInternalMemoizedMergedChildContext = o), et(Vt), et(Pe), mt(Pe, o)) : et(Vt),
      mt(Vt, f);
  }
  var Ht = Math.clz32 ? Math.clz32 : rl,
    Ci = Math.log,
    Ri = Math.LN2;
  function rl(o) {
    return (o >>>= 0), o === 0 ? 32 : (31 - ((Ci(o) / Ri) | 0)) | 0;
  }
  var sl = 64,
    ol = 4194304;
  function Ro(o) {
    switch (o & -o) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return o & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return o & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return o;
    }
  }
  function al(o, a) {
    var f = o.pendingLanes;
    if (f === 0) return 0;
    var g = 0,
      S = o.suspendedLanes,
      T = o.pingedLanes,
      B = f & 268435455;
    if (B !== 0) {
      var V = B & ~S;
      V !== 0 ? (g = Ro(V)) : ((T &= B), T !== 0 && (g = Ro(T)));
    } else (B = f & ~S), B !== 0 ? (g = Ro(B)) : T !== 0 && (g = Ro(T));
    if (g === 0) return 0;
    if (a !== 0 && a !== g && !(a & S) && ((S = g & -g), (T = a & -a), S >= T || (S === 16 && (T & 4194240) !== 0)))
      return a;
    if ((g & 4 && (g |= f & 16), (a = o.entangledLanes), a !== 0))
      for (o = o.entanglements, a &= g; 0 < a; ) (f = 31 - Ht(a)), (S = 1 << f), (g |= o[f]), (a &= ~S);
    return g;
  }
  function gx(o, a) {
    switch (o) {
      case 1:
      case 2:
      case 4:
        return a + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return a + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function vx(o, a) {
    for (var f = o.suspendedLanes, g = o.pingedLanes, S = o.expirationTimes, T = o.pendingLanes; 0 < T; ) {
      var B = 31 - Ht(T),
        V = 1 << B,
        ie = S[B];
      ie === -1 ? (!(V & f) || V & g) && (S[B] = gx(V, a)) : ie <= a && (o.expiredLanes |= V), (T &= ~V);
    }
  }
  function dh(o) {
    return (o = o.pendingLanes & -1073741825), o !== 0 ? o : o & 1073741824 ? 1073741824 : 0;
  }
  function ph(o) {
    for (var a = [], f = 0; 31 > f; f++) a.push(o);
    return a;
  }
  function Po(o, a, f) {
    (o.pendingLanes |= a),
      a !== 536870912 && ((o.suspendedLanes = 0), (o.pingedLanes = 0)),
      (o = o.eventTimes),
      (a = 31 - Ht(a)),
      (o[a] = f);
  }
  function _x(o, a) {
    var f = o.pendingLanes & ~a;
    (o.pendingLanes = a),
      (o.suspendedLanes = 0),
      (o.pingedLanes = 0),
      (o.expiredLanes &= a),
      (o.mutableReadLanes &= a),
      (o.entangledLanes &= a),
      (a = o.entanglements);
    var g = o.eventTimes;
    for (o = o.expirationTimes; 0 < f; ) {
      var S = 31 - Ht(f),
        T = 1 << S;
      (a[S] = 0), (g[S] = -1), (o[S] = -1), (f &= ~T);
    }
  }
  function mh(o, a) {
    var f = (o.entangledLanes |= a);
    for (o = o.entanglements; f; ) {
      var g = 31 - Ht(f),
        S = 1 << g;
      (S & a) | (o[g] & a) && (o[g] |= a), (f &= ~S);
    }
  }
  var It = 0;
  function Ep(o) {
    return (o &= -o), 1 < o ? (4 < o ? (o & 268435455 ? 16 : 536870912) : 4) : 1;
  }
  var gh = i.unstable_scheduleCallback,
    Tp = i.unstable_cancelCallback,
    xx = i.unstable_shouldYield,
    yx = i.unstable_requestPaint,
    fn = i.unstable_now,
    vh = i.unstable_ImmediatePriority,
    Sx = i.unstable_UserBlockingPriority,
    _h = i.unstable_NormalPriority,
    Mx = i.unstable_IdlePriority,
    ll = null,
    Pi = null;
  function wx(o) {
    if (Pi && typeof Pi.onCommitFiberRoot == "function")
      try {
        Pi.onCommitFiberRoot(ll, o, void 0, (o.current.flags & 128) === 128);
      } catch {}
  }
  function Ex(o, a) {
    return (o === a && (o !== 0 || 1 / o === 1 / a)) || (o !== o && a !== a);
  }
  var Ii = typeof Object.is == "function" ? Object.is : Ex,
    Wi = null,
    cl = !1,
    xh = !1;
  function Ap(o) {
    Wi === null ? (Wi = [o]) : Wi.push(o);
  }
  function Tx(o) {
    (cl = !0), Ap(o);
  }
  function Li() {
    if (!xh && Wi !== null) {
      xh = !0;
      var o = 0,
        a = It;
      try {
        var f = Wi;
        for (It = 1; o < f.length; o++) {
          var g = f[o];
          do g = g(!0);
          while (g !== null);
        }
        (Wi = null), (cl = !1);
      } catch (S) {
        throw (Wi !== null && (Wi = Wi.slice(o + 1)), gh(vh, Li), S);
      } finally {
        (It = a), (xh = !1);
      }
    }
    return null;
  }
  var Ax = c.ReactCurrentBatchConfig;
  function ul(o, a) {
    if (Ii(o, a)) return !0;
    if (typeof o != "object" || o === null || typeof a != "object" || a === null) return !1;
    var f = Object.keys(o),
      g = Object.keys(a);
    if (f.length !== g.length) return !1;
    for (g = 0; g < f.length; g++) {
      var S = f[g];
      if (!ut.call(a, S) || !Ii(o[S], a[S])) return !1;
    }
    return !0;
  }
  function bx(o) {
    switch (o.tag) {
      case 5:
        return Ve(o.type);
      case 16:
        return Ve("Lazy");
      case 13:
        return Ve("Suspense");
      case 19:
        return Ve("SuspenseList");
      case 0:
      case 2:
      case 15:
        return (o = rt(o.type, !1)), o;
      case 11:
        return (o = rt(o.type.render, !1)), o;
      case 1:
        return (o = rt(o.type, !0)), o;
      default:
        return "";
    }
  }
  function pi(o, a) {
    if (o && o.defaultProps) {
      (a = s({}, a)), (o = o.defaultProps);
      for (var f in o) a[f] === void 0 && (a[f] = o[f]);
      return a;
    }
    return a;
  }
  var hl = Tt(null),
    fl = null,
    Ps = null,
    yh = null;
  function Sh() {
    yh = Ps = fl = null;
  }
  function bp(o, a, f) {
    Qe ? (mt(hl, a._currentValue), (a._currentValue = f)) : (mt(hl, a._currentValue2), (a._currentValue2 = f));
  }
  function Mh(o) {
    var a = hl.current;
    et(hl), Qe ? (o._currentValue = a) : (o._currentValue2 = a);
  }
  function wh(o, a, f) {
    for (; o !== null; ) {
      var g = o.alternate;
      if (
        ((o.childLanes & a) !== a
          ? ((o.childLanes |= a), g !== null && (g.childLanes |= a))
          : g !== null && (g.childLanes & a) !== a && (g.childLanes |= a),
        o === f)
      )
        break;
      o = o.return;
    }
  }
  function Is(o, a) {
    (fl = o),
      (yh = Ps = null),
      (o = o.dependencies),
      o !== null && o.firstContext !== null && (o.lanes & a && (jn = !0), (o.firstContext = null));
  }
  function ii(o) {
    var a = Qe ? o._currentValue : o._currentValue2;
    if (yh !== o)
      if (((o = { context: o, memoizedValue: a, next: null }), Ps === null)) {
        if (fl === null) throw Error(l(308));
        (Ps = o), (fl.dependencies = { lanes: 0, firstContext: o });
      } else Ps = Ps.next = o;
    return a;
  }
  var Di = null,
    pr = !1;
  function Eh(o) {
    o.updateQueue = {
      baseState: o.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: { pending: null, interleaved: null, lanes: 0 },
      effects: null,
    };
  }
  function Cp(o, a) {
    (o = o.updateQueue),
      a.updateQueue === o &&
        (a.updateQueue = {
          baseState: o.baseState,
          firstBaseUpdate: o.firstBaseUpdate,
          lastBaseUpdate: o.lastBaseUpdate,
          shared: o.shared,
          effects: o.effects,
        });
  }
  function Xi(o, a) {
    return { eventTime: o, lane: a, tag: 0, payload: null, callback: null, next: null };
  }
  function mr(o, a) {
    var f = o.updateQueue;
    f !== null &&
      ((f = f.shared),
      en !== null && o.mode & 1 && !(St & 2)
        ? ((o = f.interleaved),
          o === null ? ((a.next = a), Di === null ? (Di = [f]) : Di.push(f)) : ((a.next = o.next), (o.next = a)),
          (f.interleaved = a))
        : ((o = f.pending), o === null ? (a.next = a) : ((a.next = o.next), (o.next = a)), (f.pending = a)));
  }
  function dl(o, a, f) {
    if (((a = a.updateQueue), a !== null && ((a = a.shared), (f & 4194240) !== 0))) {
      var g = a.lanes;
      (g &= o.pendingLanes), (f |= g), (a.lanes = f), mh(o, f);
    }
  }
  function Rp(o, a) {
    var f = o.updateQueue,
      g = o.alternate;
    if (g !== null && ((g = g.updateQueue), f === g)) {
      var S = null,
        T = null;
      if (((f = f.firstBaseUpdate), f !== null)) {
        do {
          var B = {
            eventTime: f.eventTime,
            lane: f.lane,
            tag: f.tag,
            payload: f.payload,
            callback: f.callback,
            next: null,
          };
          T === null ? (S = T = B) : (T = T.next = B), (f = f.next);
        } while (f !== null);
        T === null ? (S = T = a) : (T = T.next = a);
      } else S = T = a;
      (f = { baseState: g.baseState, firstBaseUpdate: S, lastBaseUpdate: T, shared: g.shared, effects: g.effects }),
        (o.updateQueue = f);
      return;
    }
    (o = f.lastBaseUpdate), o === null ? (f.firstBaseUpdate = a) : (o.next = a), (f.lastBaseUpdate = a);
  }
  function pl(o, a, f, g) {
    var S = o.updateQueue;
    pr = !1;
    var T = S.firstBaseUpdate,
      B = S.lastBaseUpdate,
      V = S.shared.pending;
    if (V !== null) {
      S.shared.pending = null;
      var ie = V,
        ye = ie.next;
      (ie.next = null), B === null ? (T = ye) : (B.next = ye), (B = ie);
      var ke = o.alternate;
      ke !== null &&
        ((ke = ke.updateQueue),
        (V = ke.lastBaseUpdate),
        V !== B && (V === null ? (ke.firstBaseUpdate = ye) : (V.next = ye), (ke.lastBaseUpdate = ie)));
    }
    if (T !== null) {
      var ht = S.baseState;
      (B = 0), (ke = ye = ie = null), (V = T);
      do {
        var $e = V.lane,
          Bt = V.eventTime;
        if ((g & $e) === $e) {
          ke !== null &&
            (ke = ke.next =
              { eventTime: Bt, lane: 0, tag: V.tag, payload: V.payload, callback: V.callback, next: null });
          e: {
            var Je = o,
              Mn = V;
            switch ((($e = a), (Bt = f), Mn.tag)) {
              case 1:
                if (((Je = Mn.payload), typeof Je == "function")) {
                  ht = Je.call(Bt, ht, $e);
                  break e;
                }
                ht = Je;
                break e;
              case 3:
                Je.flags = (Je.flags & -65537) | 128;
              case 0:
                if (((Je = Mn.payload), ($e = typeof Je == "function" ? Je.call(Bt, ht, $e) : Je), $e == null)) break e;
                ht = s({}, ht, $e);
                break e;
              case 2:
                pr = !0;
            }
          }
          V.callback !== null &&
            V.lane !== 0 &&
            ((o.flags |= 64), ($e = S.effects), $e === null ? (S.effects = [V]) : $e.push(V));
        } else
          (Bt = { eventTime: Bt, lane: $e, tag: V.tag, payload: V.payload, callback: V.callback, next: null }),
            ke === null ? ((ye = ke = Bt), (ie = ht)) : (ke = ke.next = Bt),
            (B |= $e);
        if (((V = V.next), V === null)) {
          if (((V = S.shared.pending), V === null)) break;
          ($e = V), (V = $e.next), ($e.next = null), (S.lastBaseUpdate = $e), (S.shared.pending = null);
        }
      } while (!0);
      if (
        (ke === null && (ie = ht),
        (S.baseState = ie),
        (S.firstBaseUpdate = ye),
        (S.lastBaseUpdate = ke),
        (a = S.shared.interleaved),
        a !== null)
      ) {
        S = a;
        do (B |= S.lane), (S = S.next);
        while (S !== a);
      } else T === null && (S.shared.lanes = 0);
      (ks |= B), (o.lanes = B), (o.memoizedState = ht);
    }
  }
  function Pp(o, a, f) {
    if (((o = a.effects), (a.effects = null), o !== null))
      for (a = 0; a < o.length; a++) {
        var g = o[a],
          S = g.callback;
        if (S !== null) {
          if (((g.callback = null), (g = f), typeof S != "function")) throw Error(l(191, S));
          S.call(g);
        }
      }
  }
  var Ip = new n.Component().refs;
  function Th(o, a, f, g) {
    (a = o.memoizedState),
      (f = f(g, a)),
      (f = f == null ? a : s({}, a, f)),
      (o.memoizedState = f),
      o.lanes === 0 && (o.updateQueue.baseState = f);
  }
  var ml = {
    isMounted: function (o) {
      return (o = o._reactInternals) ? C(o) === o : !1;
    },
    enqueueSetState: function (o, a, f) {
      o = o._reactInternals;
      var g = In(),
        S = _r(o),
        T = Xi(g, S);
      (T.payload = a), f != null && (T.callback = f), mr(o, T), (a = li(o, S, g)), a !== null && dl(a, o, S);
    },
    enqueueReplaceState: function (o, a, f) {
      o = o._reactInternals;
      var g = In(),
        S = _r(o),
        T = Xi(g, S);
      (T.tag = 1),
        (T.payload = a),
        f != null && (T.callback = f),
        mr(o, T),
        (a = li(o, S, g)),
        a !== null && dl(a, o, S);
    },
    enqueueForceUpdate: function (o, a) {
      o = o._reactInternals;
      var f = In(),
        g = _r(o),
        S = Xi(f, g);
      (S.tag = 2), a != null && (S.callback = a), mr(o, S), (a = li(o, g, f)), a !== null && dl(a, o, g);
    },
  };
  function Lp(o, a, f, g, S, T, B) {
    return (
      (o = o.stateNode),
      typeof o.shouldComponentUpdate == "function"
        ? o.shouldComponentUpdate(g, T, B)
        : a.prototype && a.prototype.isPureReactComponent
          ? !ul(f, g) || !ul(S, T)
          : !0
    );
  }
  function Dp(o, a, f) {
    var g = !1,
      S = yt,
      T = a.contextType;
    return (
      typeof T == "object" && T !== null
        ? (T = ii(T))
        : ((S = jt(a) ? wt : Pe.current), (g = a.contextTypes), (T = (g = g != null) ? un(o, S) : yt)),
      (a = new a(f, T)),
      (o.memoizedState = a.state !== null && a.state !== void 0 ? a.state : null),
      (a.updater = ml),
      (o.stateNode = a),
      (a._reactInternals = o),
      g &&
        ((o = o.stateNode),
        (o.__reactInternalMemoizedUnmaskedChildContext = S),
        (o.__reactInternalMemoizedMaskedChildContext = T)),
      a
    );
  }
  function Up(o, a, f, g) {
    (o = a.state),
      typeof a.componentWillReceiveProps == "function" && a.componentWillReceiveProps(f, g),
      typeof a.UNSAFE_componentWillReceiveProps == "function" && a.UNSAFE_componentWillReceiveProps(f, g),
      a.state !== o && ml.enqueueReplaceState(a, a.state, null);
  }
  function Ah(o, a, f, g) {
    var S = o.stateNode;
    (S.props = f), (S.state = o.memoizedState), (S.refs = Ip), Eh(o);
    var T = a.contextType;
    typeof T == "object" && T !== null ? (S.context = ii(T)) : ((T = jt(a) ? wt : Pe.current), (S.context = un(o, T))),
      (S.state = o.memoizedState),
      (T = a.getDerivedStateFromProps),
      typeof T == "function" && (Th(o, a, T, f), (S.state = o.memoizedState)),
      typeof a.getDerivedStateFromProps == "function" ||
        typeof S.getSnapshotBeforeUpdate == "function" ||
        (typeof S.UNSAFE_componentWillMount != "function" && typeof S.componentWillMount != "function") ||
        ((a = S.state),
        typeof S.componentWillMount == "function" && S.componentWillMount(),
        typeof S.UNSAFE_componentWillMount == "function" && S.UNSAFE_componentWillMount(),
        a !== S.state && ml.enqueueReplaceState(S, S.state, null),
        pl(o, f, S, g),
        (S.state = o.memoizedState)),
      typeof S.componentDidMount == "function" && (o.flags |= 4194308);
  }
  var Ls = [],
    Ds = 0,
    gl = null,
    vl = 0,
    ri = [],
    si = 0,
    Br = null,
    Yi = 1,
    qi = "";
  function zr(o, a) {
    (Ls[Ds++] = vl), (Ls[Ds++] = gl), (gl = o), (vl = a);
  }
  function Np(o, a, f) {
    (ri[si++] = Yi), (ri[si++] = qi), (ri[si++] = Br), (Br = o);
    var g = Yi;
    o = qi;
    var S = 32 - Ht(g) - 1;
    (g &= ~(1 << S)), (f += 1);
    var T = 32 - Ht(a) + S;
    if (30 < T) {
      var B = S - (S % 5);
      (T = (g & ((1 << B) - 1)).toString(32)),
        (g >>= B),
        (S -= B),
        (Yi = (1 << (32 - Ht(a) + S)) | (f << S) | g),
        (qi = T + o);
    } else (Yi = (1 << T) | (f << S) | g), (qi = o);
  }
  function bh(o) {
    o.return !== null && (zr(o, 1), Np(o, 1, 0));
  }
  function Ch(o) {
    for (; o === gl; ) (gl = Ls[--Ds]), (Ls[Ds] = null), (vl = Ls[--Ds]), (Ls[Ds] = null);
    for (; o === Br; )
      (Br = ri[--si]), (ri[si] = null), (qi = ri[--si]), (ri[si] = null), (Yi = ri[--si]), (ri[si] = null);
  }
  var Jn = null,
    Kn = null,
    Gt = !1,
    Io = !1,
    mi = null;
  function Fp(o, a) {
    var f = ci(5, null, null, 0);
    (f.elementType = "DELETED"),
      (f.stateNode = a),
      (f.return = o),
      (a = o.deletions),
      a === null ? ((o.deletions = [f]), (o.flags |= 16)) : a.push(f);
  }
  function Op(o, a) {
    switch (o.tag) {
      case 5:
        return (a = di(a, o.type, o.pendingProps)), a !== null ? ((o.stateNode = a), (Jn = o), (Kn = Cs(a)), !0) : !1;
      case 6:
        return (a = ja(a, o.pendingProps)), a !== null ? ((o.stateNode = a), (Jn = o), (Kn = null), !0) : !1;
      case 13:
        if (((a = Qa(a)), a !== null)) {
          var f = Br !== null ? { id: Yi, overflow: qi } : null;
          return (
            (o.memoizedState = { dehydrated: a, treeContext: f, retryLane: 1073741824 }),
            (f = ci(18, null, null, 0)),
            (f.stateNode = a),
            (f.return = o),
            (o.child = f),
            (Jn = o),
            (Kn = null),
            !0
          );
        }
        return !1;
      default:
        return !1;
    }
  }
  function Rh(o) {
    return (o.mode & 1) !== 0 && (o.flags & 128) === 0;
  }
  function Ph(o) {
    if (Gt) {
      var a = Kn;
      if (a) {
        var f = a;
        if (!Op(o, a)) {
          if (Rh(o)) throw Error(l(418));
          a = hr(f);
          var g = Jn;
          a && Op(o, a) ? Fp(g, f) : ((o.flags = (o.flags & -4097) | 2), (Gt = !1), (Jn = o));
        }
      } else {
        if (Rh(o)) throw Error(l(418));
        (o.flags = (o.flags & -4097) | 2), (Gt = !1), (Jn = o);
      }
    }
  }
  function Bp(o) {
    for (o = o.return; o !== null && o.tag !== 5 && o.tag !== 3 && o.tag !== 13; ) o = o.return;
    Jn = o;
  }
  function Lo(o) {
    if (!pe || o !== Jn) return !1;
    if (!Gt) return Bp(o), (Gt = !0), !1;
    if (o.tag !== 3 && (o.tag !== 5 || ($(o.type) && !ge(o.type, o.memoizedProps)))) {
      var a = Kn;
      if (a) {
        if (Rh(o)) {
          for (o = Kn; o; ) o = hr(o);
          throw Error(l(418));
        }
        for (; a; ) Fp(o, a), (a = hr(a));
      }
    }
    if ((Bp(o), o.tag === 13)) {
      if (!pe) throw Error(l(316));
      if (((o = o.memoizedState), (o = o !== null ? o.dehydrated : null), !o)) throw Error(l(317));
      Kn = fh(o);
    } else Kn = Jn ? hr(o.stateNode) : null;
    return !0;
  }
  function Us() {
    pe && ((Kn = Jn = null), (Io = Gt = !1));
  }
  function Ih(o) {
    mi === null ? (mi = [o]) : mi.push(o);
  }
  function Do(o, a, f) {
    if (((o = f.ref), o !== null && typeof o != "function" && typeof o != "object")) {
      if (f._owner) {
        if (((f = f._owner), f)) {
          if (f.tag !== 1) throw Error(l(309));
          var g = f.stateNode;
        }
        if (!g) throw Error(l(147, o));
        var S = g,
          T = "" + o;
        return a !== null && a.ref !== null && typeof a.ref == "function" && a.ref._stringRef === T
          ? a.ref
          : ((a = function (B) {
              var V = S.refs;
              V === Ip && (V = S.refs = {}), B === null ? delete V[T] : (V[T] = B);
            }),
            (a._stringRef = T),
            a);
      }
      if (typeof o != "string") throw Error(l(284));
      if (!f._owner) throw Error(l(290, o));
    }
    return o;
  }
  function _l(o, a) {
    throw (
      ((o = Object.prototype.toString.call(a)),
      Error(l(31, o === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : o)))
    );
  }
  function zp(o) {
    var a = o._init;
    return a(o._payload);
  }
  function kp(o) {
    function a(J, W) {
      if (o) {
        var ee = J.deletions;
        ee === null ? ((J.deletions = [W]), (J.flags |= 16)) : ee.push(W);
      }
    }
    function f(J, W) {
      if (!o) return null;
      for (; W !== null; ) a(J, W), (W = W.sibling);
      return null;
    }
    function g(J, W) {
      for (J = new Map(); W !== null; ) W.key !== null ? J.set(W.key, W) : J.set(W.index, W), (W = W.sibling);
      return J;
    }
    function S(J, W) {
      return (J = yr(J, W)), (J.index = 0), (J.sibling = null), J;
    }
    function T(J, W, ee) {
      return (
        (J.index = ee),
        o
          ? ((ee = J.alternate),
            ee !== null ? ((ee = ee.index), ee < W ? ((J.flags |= 2), W) : ee) : ((J.flags |= 2), W))
          : ((J.flags |= 1048576), W)
      );
    }
    function B(J) {
      return o && J.alternate === null && (J.flags |= 2), J;
    }
    function V(J, W, ee, Le) {
      return W === null || W.tag !== 6
        ? ((W = mf(ee, J.mode, Le)), (W.return = J), W)
        : ((W = S(W, ee)), (W.return = J), W);
    }
    function ie(J, W, ee, Le) {
      var Ze = ee.type;
      return Ze === d
        ? ke(J, W, ee.props.children, Le, ee.key)
        : W !== null &&
            (W.elementType === Ze || (typeof Ze == "object" && Ze !== null && Ze.$$typeof === E && zp(Ze) === W.type))
          ? ((Le = S(W, ee.props)), (Le.ref = Do(J, W, ee)), (Le.return = J), Le)
          : ((Le = Jl(ee.type, ee.key, ee.props, null, J.mode, Le)), (Le.ref = Do(J, W, ee)), (Le.return = J), Le);
    }
    function ye(J, W, ee, Le) {
      return W === null ||
        W.tag !== 4 ||
        W.stateNode.containerInfo !== ee.containerInfo ||
        W.stateNode.implementation !== ee.implementation
        ? ((W = gf(ee, J.mode, Le)), (W.return = J), W)
        : ((W = S(W, ee.children || [])), (W.return = J), W);
    }
    function ke(J, W, ee, Le, Ze) {
      return W === null || W.tag !== 7
        ? ((W = Yr(ee, J.mode, Le, Ze)), (W.return = J), W)
        : ((W = S(W, ee)), (W.return = J), W);
    }
    function ht(J, W, ee) {
      if ((typeof W == "string" && W !== "") || typeof W == "number")
        return (W = mf("" + W, J.mode, ee)), (W.return = J), W;
      if (typeof W == "object" && W !== null) {
        switch (W.$$typeof) {
          case u:
            return (ee = Jl(W.type, W.key, W.props, null, J.mode, ee)), (ee.ref = Do(J, null, W)), (ee.return = J), ee;
          case h:
            return (W = gf(W, J.mode, ee)), (W.return = J), W;
          case E:
            var Le = W._init;
            return ht(J, Le(W._payload), ee);
        }
        if (ae(W) || P(W)) return (W = Yr(W, J.mode, ee, null)), (W.return = J), W;
        _l(J, W);
      }
      return null;
    }
    function $e(J, W, ee, Le) {
      var Ze = W !== null ? W.key : null;
      if ((typeof ee == "string" && ee !== "") || typeof ee == "number")
        return Ze !== null ? null : V(J, W, "" + ee, Le);
      if (typeof ee == "object" && ee !== null) {
        switch (ee.$$typeof) {
          case u:
            return ee.key === Ze ? ie(J, W, ee, Le) : null;
          case h:
            return ee.key === Ze ? ye(J, W, ee, Le) : null;
          case E:
            return (Ze = ee._init), $e(J, W, Ze(ee._payload), Le);
        }
        if (ae(ee) || P(ee)) return Ze !== null ? null : ke(J, W, ee, Le, null);
        _l(J, ee);
      }
      return null;
    }
    function Bt(J, W, ee, Le, Ze) {
      if ((typeof Le == "string" && Le !== "") || typeof Le == "number")
        return (J = J.get(ee) || null), V(W, J, "" + Le, Ze);
      if (typeof Le == "object" && Le !== null) {
        switch (Le.$$typeof) {
          case u:
            return (J = J.get(Le.key === null ? ee : Le.key) || null), ie(W, J, Le, Ze);
          case h:
            return (J = J.get(Le.key === null ? ee : Le.key) || null), ye(W, J, Le, Ze);
          case E:
            var _t = Le._init;
            return Bt(J, W, ee, _t(Le._payload), Ze);
        }
        if (ae(Le) || P(Le)) return (J = J.get(ee) || null), ke(W, J, Le, Ze, null);
        _l(W, Le);
      }
      return null;
    }
    function Je(J, W, ee, Le) {
      for (var Ze = null, _t = null, ft = W, Lt = (W = 0), pn = null; ft !== null && Lt < ee.length; Lt++) {
        ft.index > Lt ? ((pn = ft), (ft = null)) : (pn = ft.sibling);
        var Dt = $e(J, ft, ee[Lt], Le);
        if (Dt === null) {
          ft === null && (ft = pn);
          break;
        }
        o && ft && Dt.alternate === null && a(J, ft),
          (W = T(Dt, W, Lt)),
          _t === null ? (Ze = Dt) : (_t.sibling = Dt),
          (_t = Dt),
          (ft = pn);
      }
      if (Lt === ee.length) return f(J, ft), Gt && zr(J, Lt), Ze;
      if (ft === null) {
        for (; Lt < ee.length; Lt++)
          (ft = ht(J, ee[Lt], Le)),
            ft !== null && ((W = T(ft, W, Lt)), _t === null ? (Ze = ft) : (_t.sibling = ft), (_t = ft));
        return Gt && zr(J, Lt), Ze;
      }
      for (ft = g(J, ft); Lt < ee.length; Lt++)
        (pn = Bt(ft, J, Lt, ee[Lt], Le)),
          pn !== null &&
            (o && pn.alternate !== null && ft.delete(pn.key === null ? Lt : pn.key),
            (W = T(pn, W, Lt)),
            _t === null ? (Ze = pn) : (_t.sibling = pn),
            (_t = pn));
      return (
        o &&
          ft.forEach(function (Sr) {
            return a(J, Sr);
          }),
        Gt && zr(J, Lt),
        Ze
      );
    }
    function Mn(J, W, ee, Le) {
      var Ze = P(ee);
      if (typeof Ze != "function") throw Error(l(150));
      if (((ee = Ze.call(ee)), ee == null)) throw Error(l(151));
      for (
        var _t = (Ze = null), ft = W, Lt = (W = 0), pn = null, Dt = ee.next();
        ft !== null && !Dt.done;
        Lt++, Dt = ee.next()
      ) {
        ft.index > Lt ? ((pn = ft), (ft = null)) : (pn = ft.sibling);
        var Sr = $e(J, ft, Dt.value, Le);
        if (Sr === null) {
          ft === null && (ft = pn);
          break;
        }
        o && ft && Sr.alternate === null && a(J, ft),
          (W = T(Sr, W, Lt)),
          _t === null ? (Ze = Sr) : (_t.sibling = Sr),
          (_t = Sr),
          (ft = pn);
      }
      if (Dt.done) return f(J, ft), Gt && zr(J, Lt), Ze;
      if (ft === null) {
        for (; !Dt.done; Lt++, Dt = ee.next())
          (Dt = ht(J, Dt.value, Le)),
            Dt !== null && ((W = T(Dt, W, Lt)), _t === null ? (Ze = Dt) : (_t.sibling = Dt), (_t = Dt));
        return Gt && zr(J, Lt), Ze;
      }
      for (ft = g(J, ft); !Dt.done; Lt++, Dt = ee.next())
        (Dt = Bt(ft, J, Lt, Dt.value, Le)),
          Dt !== null &&
            (o && Dt.alternate !== null && ft.delete(Dt.key === null ? Lt : Dt.key),
            (W = T(Dt, W, Lt)),
            _t === null ? (Ze = Dt) : (_t.sibling = Dt),
            (_t = Dt));
      return (
        o &&
          ft.forEach(function (iy) {
            return a(J, iy);
          }),
        Gt && zr(J, Lt),
        Ze
      );
    }
    function ui(J, W, ee, Le) {
      if (
        (typeof ee == "object" && ee !== null && ee.type === d && ee.key === null && (ee = ee.props.children),
        typeof ee == "object" && ee !== null)
      ) {
        switch (ee.$$typeof) {
          case u:
            e: {
              for (var Ze = ee.key, _t = W; _t !== null; ) {
                if (_t.key === Ze) {
                  if (((Ze = ee.type), Ze === d)) {
                    if (_t.tag === 7) {
                      f(J, _t.sibling), (W = S(_t, ee.props.children)), (W.return = J), (J = W);
                      break e;
                    }
                  } else if (
                    _t.elementType === Ze ||
                    (typeof Ze == "object" && Ze !== null && Ze.$$typeof === E && zp(Ze) === _t.type)
                  ) {
                    f(J, _t.sibling), (W = S(_t, ee.props)), (W.ref = Do(J, _t, ee)), (W.return = J), (J = W);
                    break e;
                  }
                  f(J, _t);
                  break;
                } else a(J, _t);
                _t = _t.sibling;
              }
              ee.type === d
                ? ((W = Yr(ee.props.children, J.mode, Le, ee.key)), (W.return = J), (J = W))
                : ((Le = Jl(ee.type, ee.key, ee.props, null, J.mode, Le)),
                  (Le.ref = Do(J, W, ee)),
                  (Le.return = J),
                  (J = Le));
            }
            return B(J);
          case h:
            e: {
              for (_t = ee.key; W !== null; ) {
                if (W.key === _t)
                  if (
                    W.tag === 4 &&
                    W.stateNode.containerInfo === ee.containerInfo &&
                    W.stateNode.implementation === ee.implementation
                  ) {
                    f(J, W.sibling), (W = S(W, ee.children || [])), (W.return = J), (J = W);
                    break e;
                  } else {
                    f(J, W);
                    break;
                  }
                else a(J, W);
                W = W.sibling;
              }
              (W = gf(ee, J.mode, Le)), (W.return = J), (J = W);
            }
            return B(J);
          case E:
            return (_t = ee._init), ui(J, W, _t(ee._payload), Le);
        }
        if (ae(ee)) return Je(J, W, ee, Le);
        if (P(ee)) return Mn(J, W, ee, Le);
        _l(J, ee);
      }
      return (typeof ee == "string" && ee !== "") || typeof ee == "number"
        ? ((ee = "" + ee),
          W !== null && W.tag === 6
            ? (f(J, W.sibling), (W = S(W, ee)), (W.return = J), (J = W))
            : (f(J, W), (W = mf(ee, J.mode, Le)), (W.return = J), (J = W)),
          B(J))
        : f(J, W);
    }
    return ui;
  }
  var Ns = kp(!0),
    Vp = kp(!1),
    Uo = {},
    oi = Tt(Uo),
    No = Tt(Uo),
    Fs = Tt(Uo);
  function Ui(o) {
    if (o === Uo) throw Error(l(174));
    return o;
  }
  function Lh(o, a) {
    mt(Fs, a), mt(No, o), mt(oi, Uo), (o = me(a)), et(oi), mt(oi, o);
  }
  function Os() {
    et(oi), et(No), et(Fs);
  }
  function Hp(o) {
    var a = Ui(Fs.current),
      f = Ui(oi.current);
    (a = k(f, o.type, a)), f !== a && (mt(No, o), mt(oi, a));
  }
  function Dh(o) {
    No.current === o && (et(oi), et(No));
  }
  var Wt = Tt(0);
  function xl(o) {
    for (var a = o; a !== null; ) {
      if (a.tag === 13) {
        var f = a.memoizedState;
        if (f !== null && ((f = f.dehydrated), f === null || bi(f) || Or(f))) return a;
      } else if (a.tag === 19 && a.memoizedProps.revealOrder !== void 0) {
        if (a.flags & 128) return a;
      } else if (a.child !== null) {
        (a.child.return = a), (a = a.child);
        continue;
      }
      if (a === o) break;
      for (; a.sibling === null; ) {
        if (a.return === null || a.return === o) return null;
        a = a.return;
      }
      (a.sibling.return = a.return), (a = a.sibling);
    }
    return null;
  }
  var Uh = [];
  function Nh() {
    for (var o = 0; o < Uh.length; o++) {
      var a = Uh[o];
      Qe ? (a._workInProgressVersionPrimary = null) : (a._workInProgressVersionSecondary = null);
    }
    Uh.length = 0;
  }
  var yl = c.ReactCurrentDispatcher,
    ai = c.ReactCurrentBatchConfig,
    Bs = 0,
    qt = null,
    xn = null,
    dn = null,
    Sl = !1,
    Fo = !1,
    Oo = 0,
    Cx = 0;
  function yn() {
    throw Error(l(321));
  }
  function Fh(o, a) {
    if (a === null) return !1;
    for (var f = 0; f < a.length && f < o.length; f++) if (!Ii(o[f], a[f])) return !1;
    return !0;
  }
  function Oh(o, a, f, g, S, T) {
    if (
      ((Bs = T),
      (qt = a),
      (a.memoizedState = null),
      (a.updateQueue = null),
      (a.lanes = 0),
      (yl.current = o === null || o.memoizedState === null ? Lx : Dx),
      (o = f(g, S)),
      Fo)
    ) {
      T = 0;
      do {
        if (((Fo = !1), (Oo = 0), 25 <= T)) throw Error(l(301));
        (T += 1), (dn = xn = null), (a.updateQueue = null), (yl.current = Ux), (o = f(g, S));
      } while (Fo);
    }
    if (((yl.current = Al), (a = xn !== null && xn.next !== null), (Bs = 0), (dn = xn = qt = null), (Sl = !1), a))
      throw Error(l(300));
    return o;
  }
  function Bh() {
    var o = Oo !== 0;
    return (Oo = 0), o;
  }
  function Zi() {
    var o = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
    return dn === null ? (qt.memoizedState = dn = o) : (dn = dn.next = o), dn;
  }
  function Ni() {
    if (xn === null) {
      var o = qt.alternate;
      o = o !== null ? o.memoizedState : null;
    } else o = xn.next;
    var a = dn === null ? qt.memoizedState : dn.next;
    if (a !== null) (dn = a), (xn = o);
    else {
      if (o === null) throw Error(l(310));
      (xn = o),
        (o = {
          memoizedState: xn.memoizedState,
          baseState: xn.baseState,
          baseQueue: xn.baseQueue,
          queue: xn.queue,
          next: null,
        }),
        dn === null ? (qt.memoizedState = dn = o) : (dn = dn.next = o);
    }
    return dn;
  }
  function kr(o, a) {
    return typeof a == "function" ? a(o) : a;
  }
  function Ml(o) {
    var a = Ni(),
      f = a.queue;
    if (f === null) throw Error(l(311));
    f.lastRenderedReducer = o;
    var g = xn,
      S = g.baseQueue,
      T = f.pending;
    if (T !== null) {
      if (S !== null) {
        var B = S.next;
        (S.next = T.next), (T.next = B);
      }
      (g.baseQueue = S = T), (f.pending = null);
    }
    if (S !== null) {
      (T = S.next), (g = g.baseState);
      var V = (B = null),
        ie = null,
        ye = T;
      do {
        var ke = ye.lane;
        if ((Bs & ke) === ke)
          ie !== null &&
            (ie = ie.next =
              { lane: 0, action: ye.action, hasEagerState: ye.hasEagerState, eagerState: ye.eagerState, next: null }),
            (g = ye.hasEagerState ? ye.eagerState : o(g, ye.action));
        else {
          var ht = {
            lane: ke,
            action: ye.action,
            hasEagerState: ye.hasEagerState,
            eagerState: ye.eagerState,
            next: null,
          };
          ie === null ? ((V = ie = ht), (B = g)) : (ie = ie.next = ht), (qt.lanes |= ke), (ks |= ke);
        }
        ye = ye.next;
      } while (ye !== null && ye !== T);
      ie === null ? (B = g) : (ie.next = V),
        Ii(g, a.memoizedState) || (jn = !0),
        (a.memoizedState = g),
        (a.baseState = B),
        (a.baseQueue = ie),
        (f.lastRenderedState = g);
    }
    if (((o = f.interleaved), o !== null)) {
      S = o;
      do (T = S.lane), (qt.lanes |= T), (ks |= T), (S = S.next);
      while (S !== o);
    } else S === null && (f.lanes = 0);
    return [a.memoizedState, f.dispatch];
  }
  function wl(o) {
    var a = Ni(),
      f = a.queue;
    if (f === null) throw Error(l(311));
    f.lastRenderedReducer = o;
    var g = f.dispatch,
      S = f.pending,
      T = a.memoizedState;
    if (S !== null) {
      f.pending = null;
      var B = (S = S.next);
      do (T = o(T, B.action)), (B = B.next);
      while (B !== S);
      Ii(T, a.memoizedState) || (jn = !0),
        (a.memoizedState = T),
        a.baseQueue === null && (a.baseState = T),
        (f.lastRenderedState = T);
    }
    return [T, g];
  }
  function Gp() {}
  function Wp(o, a) {
    var f = qt,
      g = Ni(),
      S = a(),
      T = !Ii(g.memoizedState, S);
    if (
      (T && ((g.memoizedState = S), (jn = !0)),
      (g = g.queue),
      zo(qp.bind(null, f, g, o), [o]),
      g.getSnapshot !== a || T || (dn !== null && dn.memoizedState.tag & 1))
    ) {
      if (((f.flags |= 2048), Bo(9, Yp.bind(null, f, g, S, a), void 0, null), en === null)) throw Error(l(349));
      Bs & 30 || Xp(f, a, S);
    }
    return S;
  }
  function Xp(o, a, f) {
    (o.flags |= 16384),
      (o = { getSnapshot: a, value: f }),
      (a = qt.updateQueue),
      a === null
        ? ((a = { lastEffect: null, stores: null }), (qt.updateQueue = a), (a.stores = [o]))
        : ((f = a.stores), f === null ? (a.stores = [o]) : f.push(o));
  }
  function Yp(o, a, f, g) {
    (a.value = f), (a.getSnapshot = g), Zp(a) && li(o, 1, -1);
  }
  function qp(o, a, f) {
    return f(function () {
      Zp(a) && li(o, 1, -1);
    });
  }
  function Zp(o) {
    var a = o.getSnapshot;
    o = o.value;
    try {
      var f = a();
      return !Ii(o, f);
    } catch {
      return !0;
    }
  }
  function zh(o) {
    var a = Zi();
    return (
      typeof o == "function" && (o = o()),
      (a.memoizedState = a.baseState = o),
      (o = {
        pending: null,
        interleaved: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: kr,
        lastRenderedState: o,
      }),
      (a.queue = o),
      (o = o.dispatch = Ix.bind(null, qt, o)),
      [a.memoizedState, o]
    );
  }
  function Bo(o, a, f, g) {
    return (
      (o = { tag: o, create: a, destroy: f, deps: g, next: null }),
      (a = qt.updateQueue),
      a === null
        ? ((a = { lastEffect: null, stores: null }), (qt.updateQueue = a), (a.lastEffect = o.next = o))
        : ((f = a.lastEffect),
          f === null ? (a.lastEffect = o.next = o) : ((g = f.next), (f.next = o), (o.next = g), (a.lastEffect = o))),
      o
    );
  }
  function Jp() {
    return Ni().memoizedState;
  }
  function El(o, a, f, g) {
    var S = Zi();
    (qt.flags |= o), (S.memoizedState = Bo(1 | a, f, void 0, g === void 0 ? null : g));
  }
  function Tl(o, a, f, g) {
    var S = Ni();
    g = g === void 0 ? null : g;
    var T = void 0;
    if (xn !== null) {
      var B = xn.memoizedState;
      if (((T = B.destroy), g !== null && Fh(g, B.deps))) {
        S.memoizedState = Bo(a, f, T, g);
        return;
      }
    }
    (qt.flags |= o), (S.memoizedState = Bo(1 | a, f, T, g));
  }
  function kh(o, a) {
    return El(8390656, 8, o, a);
  }
  function zo(o, a) {
    return Tl(2048, 8, o, a);
  }
  function Kp(o, a) {
    return Tl(4, 2, o, a);
  }
  function jp(o, a) {
    return Tl(4, 4, o, a);
  }
  function Qp(o, a) {
    if (typeof a == "function")
      return (
        (o = o()),
        a(o),
        function () {
          a(null);
        }
      );
    if (a != null)
      return (
        (o = o()),
        (a.current = o),
        function () {
          a.current = null;
        }
      );
  }
  function $p(o, a, f) {
    return (f = f != null ? f.concat([o]) : null), Tl(4, 4, Qp.bind(null, a, o), f);
  }
  function Vh() {}
  function em(o, a) {
    var f = Ni();
    a = a === void 0 ? null : a;
    var g = f.memoizedState;
    return g !== null && a !== null && Fh(a, g[1]) ? g[0] : ((f.memoizedState = [o, a]), o);
  }
  function tm(o, a) {
    var f = Ni();
    a = a === void 0 ? null : a;
    var g = f.memoizedState;
    return g !== null && a !== null && Fh(a, g[1]) ? g[0] : ((o = o()), (f.memoizedState = [o, a]), o);
  }
  function Rx(o, a) {
    var f = It;
    (It = f !== 0 && 4 > f ? f : 4), o(!0);
    var g = ai.transition;
    ai.transition = {};
    try {
      o(!1), a();
    } finally {
      (It = f), (ai.transition = g);
    }
  }
  function nm() {
    return Ni().memoizedState;
  }
  function Px(o, a, f) {
    var g = _r(o);
    (f = { lane: g, action: f, hasEagerState: !1, eagerState: null, next: null }),
      im(o) ? rm(a, f) : (sm(o, a, f), (f = In()), (o = li(o, g, f)), o !== null && om(o, a, g));
  }
  function Ix(o, a, f) {
    var g = _r(o),
      S = { lane: g, action: f, hasEagerState: !1, eagerState: null, next: null };
    if (im(o)) rm(a, S);
    else {
      sm(o, a, S);
      var T = o.alternate;
      if (o.lanes === 0 && (T === null || T.lanes === 0) && ((T = a.lastRenderedReducer), T !== null))
        try {
          var B = a.lastRenderedState,
            V = T(B, f);
          if (((S.hasEagerState = !0), (S.eagerState = V), Ii(V, B))) return;
        } catch {
        } finally {
        }
      (f = In()), (o = li(o, g, f)), o !== null && om(o, a, g);
    }
  }
  function im(o) {
    var a = o.alternate;
    return o === qt || (a !== null && a === qt);
  }
  function rm(o, a) {
    Fo = Sl = !0;
    var f = o.pending;
    f === null ? (a.next = a) : ((a.next = f.next), (f.next = a)), (o.pending = a);
  }
  function sm(o, a, f) {
    en !== null && o.mode & 1 && !(St & 2)
      ? ((o = a.interleaved),
        o === null ? ((f.next = f), Di === null ? (Di = [a]) : Di.push(a)) : ((f.next = o.next), (o.next = f)),
        (a.interleaved = f))
      : ((o = a.pending), o === null ? (f.next = f) : ((f.next = o.next), (o.next = f)), (a.pending = f));
  }
  function om(o, a, f) {
    if (f & 4194240) {
      var g = a.lanes;
      (g &= o.pendingLanes), (f |= g), (a.lanes = f), mh(o, f);
    }
  }
  var Al = {
      readContext: ii,
      useCallback: yn,
      useContext: yn,
      useEffect: yn,
      useImperativeHandle: yn,
      useInsertionEffect: yn,
      useLayoutEffect: yn,
      useMemo: yn,
      useReducer: yn,
      useRef: yn,
      useState: yn,
      useDebugValue: yn,
      useDeferredValue: yn,
      useTransition: yn,
      useMutableSource: yn,
      useSyncExternalStore: yn,
      useId: yn,
      unstable_isNewReconciler: !1,
    },
    Lx = {
      readContext: ii,
      useCallback: function (o, a) {
        return (Zi().memoizedState = [o, a === void 0 ? null : a]), o;
      },
      useContext: ii,
      useEffect: kh,
      useImperativeHandle: function (o, a, f) {
        return (f = f != null ? f.concat([o]) : null), El(4194308, 4, Qp.bind(null, a, o), f);
      },
      useLayoutEffect: function (o, a) {
        return El(4194308, 4, o, a);
      },
      useInsertionEffect: function (o, a) {
        return El(4, 2, o, a);
      },
      useMemo: function (o, a) {
        var f = Zi();
        return (a = a === void 0 ? null : a), (o = o()), (f.memoizedState = [o, a]), o;
      },
      useReducer: function (o, a, f) {
        var g = Zi();
        return (
          (a = f !== void 0 ? f(a) : a),
          (g.memoizedState = g.baseState = a),
          (o = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: o,
            lastRenderedState: a,
          }),
          (g.queue = o),
          (o = o.dispatch = Px.bind(null, qt, o)),
          [g.memoizedState, o]
        );
      },
      useRef: function (o) {
        var a = Zi();
        return (o = { current: o }), (a.memoizedState = o);
      },
      useState: zh,
      useDebugValue: Vh,
      useDeferredValue: function (o) {
        var a = zh(o),
          f = a[0],
          g = a[1];
        return (
          kh(
            function () {
              var S = ai.transition;
              ai.transition = {};
              try {
                g(o);
              } finally {
                ai.transition = S;
              }
            },
            [o]
          ),
          f
        );
      },
      useTransition: function () {
        var o = zh(!1),
          a = o[0];
        return (o = Rx.bind(null, o[1])), (Zi().memoizedState = o), [a, o];
      },
      useMutableSource: function () {},
      useSyncExternalStore: function (o, a, f) {
        var g = qt,
          S = Zi();
        if (Gt) {
          if (f === void 0) throw Error(l(407));
          f = f();
        } else {
          if (((f = a()), en === null)) throw Error(l(349));
          Bs & 30 || Xp(g, a, f);
        }
        S.memoizedState = f;
        var T = { value: f, getSnapshot: a };
        return (
          (S.queue = T),
          kh(qp.bind(null, g, T, o), [o]),
          (g.flags |= 2048),
          Bo(9, Yp.bind(null, g, T, f, a), void 0, null),
          f
        );
      },
      useId: function () {
        var o = Zi(),
          a = en.identifierPrefix;
        if (Gt) {
          var f = qi,
            g = Yi;
          (f = (g & ~(1 << (32 - Ht(g) - 1))).toString(32) + f),
            (a = ":" + a + "R" + f),
            (f = Oo++),
            0 < f && (a += "H" + f.toString(32)),
            (a += ":");
        } else (f = Cx++), (a = ":" + a + "r" + f.toString(32) + ":");
        return (o.memoizedState = a);
      },
      unstable_isNewReconciler: !1,
    },
    Dx = {
      readContext: ii,
      useCallback: em,
      useContext: ii,
      useEffect: zo,
      useImperativeHandle: $p,
      useInsertionEffect: Kp,
      useLayoutEffect: jp,
      useMemo: tm,
      useReducer: Ml,
      useRef: Jp,
      useState: function () {
        return Ml(kr);
      },
      useDebugValue: Vh,
      useDeferredValue: function (o) {
        var a = Ml(kr),
          f = a[0],
          g = a[1];
        return (
          zo(
            function () {
              var S = ai.transition;
              ai.transition = {};
              try {
                g(o);
              } finally {
                ai.transition = S;
              }
            },
            [o]
          ),
          f
        );
      },
      useTransition: function () {
        var o = Ml(kr)[0],
          a = Ni().memoizedState;
        return [o, a];
      },
      useMutableSource: Gp,
      useSyncExternalStore: Wp,
      useId: nm,
      unstable_isNewReconciler: !1,
    },
    Ux = {
      readContext: ii,
      useCallback: em,
      useContext: ii,
      useEffect: zo,
      useImperativeHandle: $p,
      useInsertionEffect: Kp,
      useLayoutEffect: jp,
      useMemo: tm,
      useReducer: wl,
      useRef: Jp,
      useState: function () {
        return wl(kr);
      },
      useDebugValue: Vh,
      useDeferredValue: function (o) {
        var a = wl(kr),
          f = a[0],
          g = a[1];
        return (
          zo(
            function () {
              var S = ai.transition;
              ai.transition = {};
              try {
                g(o);
              } finally {
                ai.transition = S;
              }
            },
            [o]
          ),
          f
        );
      },
      useTransition: function () {
        var o = wl(kr)[0],
          a = Ni().memoizedState;
        return [o, a];
      },
      useMutableSource: Gp,
      useSyncExternalStore: Wp,
      useId: nm,
      unstable_isNewReconciler: !1,
    };
  function Hh(o, a) {
    try {
      var f = "",
        g = a;
      do (f += bx(g)), (g = g.return);
      while (g);
      var S = f;
    } catch (T) {
      S =
        `
Error generating stack: ` +
        T.message +
        `
` +
        T.stack;
    }
    return { value: o, source: a, stack: S };
  }
  function Gh(o, a) {
    try {
      console.error(a.value);
    } catch (f) {
      setTimeout(function () {
        throw f;
      });
    }
  }
  var Nx = typeof WeakMap == "function" ? WeakMap : Map;
  function am(o, a, f) {
    (f = Xi(-1, f)), (f.tag = 3), (f.payload = { element: null });
    var g = a.value;
    return (
      (f.callback = function () {
        Hl || ((Hl = !0), (lf = g)), Gh(o, a);
      }),
      f
    );
  }
  function lm(o, a, f) {
    (f = Xi(-1, f)), (f.tag = 3);
    var g = o.type.getDerivedStateFromError;
    if (typeof g == "function") {
      var S = a.value;
      (f.payload = function () {
        return g(S);
      }),
        (f.callback = function () {
          Gh(o, a);
        });
    }
    var T = o.stateNode;
    return (
      T !== null &&
        typeof T.componentDidCatch == "function" &&
        (f.callback = function () {
          Gh(o, a), typeof g != "function" && (gr === null ? (gr = new Set([this])) : gr.add(this));
          var B = a.stack;
          this.componentDidCatch(a.value, { componentStack: B !== null ? B : "" });
        }),
      f
    );
  }
  function cm(o, a, f) {
    var g = o.pingCache;
    if (g === null) {
      g = o.pingCache = new Nx();
      var S = new Set();
      g.set(a, S);
    } else (S = g.get(a)), S === void 0 && ((S = new Set()), g.set(a, S));
    S.has(f) || (S.add(f), (o = Jx.bind(null, o, a, f)), a.then(o, o));
  }
  function um(o) {
    do {
      var a;
      if (((a = o.tag === 13) && ((a = o.memoizedState), (a = a !== null ? a.dehydrated !== null : !0)), a)) return o;
      o = o.return;
    } while (o !== null);
    return null;
  }
  function hm(o, a, f, g, S) {
    return o.mode & 1
      ? ((o.flags |= 65536), (o.lanes = S), o)
      : (o === a
          ? (o.flags |= 65536)
          : ((o.flags |= 128),
            (f.flags |= 131072),
            (f.flags &= -52805),
            f.tag === 1 && (f.alternate === null ? (f.tag = 17) : ((a = Xi(-1, 1)), (a.tag = 2), mr(f, a))),
            (f.lanes |= 1)),
        o);
  }
  function Fi(o) {
    o.flags |= 4;
  }
  function fm(o, a) {
    if (o !== null && o.child === a.child) return !0;
    if (a.flags & 16) return !1;
    for (o = a.child; o !== null; ) {
      if (o.flags & 12854 || o.subtreeFlags & 12854) return !1;
      o = o.sibling;
    }
    return !0;
  }
  var ko, Vo, bl, Cl;
  if (at)
    (ko = function (o, a) {
      for (var f = a.child; f !== null; ) {
        if (f.tag === 5 || f.tag === 6) Ce(o, f.stateNode);
        else if (f.tag !== 4 && f.child !== null) {
          (f.child.return = f), (f = f.child);
          continue;
        }
        if (f === a) break;
        for (; f.sibling === null; ) {
          if (f.return === null || f.return === a) return;
          f = f.return;
        }
        (f.sibling.return = f.return), (f = f.sibling);
      }
    }),
      (Vo = function () {}),
      (bl = function (o, a, f, g, S) {
        if (((o = o.memoizedProps), o !== g)) {
          var T = a.stateNode,
            B = Ui(oi.current);
          (f = re(T, f, o, g, S, B)), (a.updateQueue = f) && Fi(a);
        }
      }),
      (Cl = function (o, a, f, g) {
        f !== g && Fi(a);
      });
  else if (ue) {
    ko = function (o, a, f, g) {
      for (var S = a.child; S !== null; ) {
        if (S.tag === 5) {
          var T = S.stateNode;
          f && g && (T = Pt(T, S.type, S.memoizedProps, S)), Ce(o, T);
        } else if (S.tag === 6) (T = S.stateNode), f && g && (T = Bn(T, S.memoizedProps, S)), Ce(o, T);
        else if (S.tag !== 4) {
          if (S.tag === 22 && S.memoizedState !== null) (T = S.child), T !== null && (T.return = S), ko(o, S, !0, !0);
          else if (S.child !== null) {
            (S.child.return = S), (S = S.child);
            continue;
          }
        }
        if (S === a) break;
        for (; S.sibling === null; ) {
          if (S.return === null || S.return === a) return;
          S = S.return;
        }
        (S.sibling.return = S.return), (S = S.sibling);
      }
    };
    var dm = function (o, a, f, g) {
      for (var S = a.child; S !== null; ) {
        if (S.tag === 5) {
          var T = S.stateNode;
          f && g && (T = Pt(T, S.type, S.memoizedProps, S)), lt(o, T);
        } else if (S.tag === 6) (T = S.stateNode), f && g && (T = Bn(T, S.memoizedProps, S)), lt(o, T);
        else if (S.tag !== 4) {
          if (S.tag === 22 && S.memoizedState !== null) (T = S.child), T !== null && (T.return = S), dm(o, S, !0, !0);
          else if (S.child !== null) {
            (S.child.return = S), (S = S.child);
            continue;
          }
        }
        if (S === a) break;
        for (; S.sibling === null; ) {
          if (S.return === null || S.return === a) return;
          S = S.return;
        }
        (S.sibling.return = S.return), (S = S.sibling);
      }
    };
    (Vo = function (o, a) {
      var f = a.stateNode;
      if (!fm(o, a)) {
        o = f.containerInfo;
        var g = Re(o);
        dm(g, a, !1, !1), (f.pendingChildren = g), Fi(a), kt(o, g);
      }
    }),
      (bl = function (o, a, f, g, S) {
        var T = o.stateNode,
          B = o.memoizedProps;
        if ((o = fm(o, a)) && B === g) a.stateNode = T;
        else {
          var V = a.stateNode,
            ie = Ui(oi.current),
            ye = null;
          B !== g && (ye = re(V, f, B, g, S, ie)),
            o && ye === null
              ? (a.stateNode = T)
              : ((T = Ue(T, ye, f, B, g, a, o, V)),
                Ye(T, f, g, S, ie) && Fi(a),
                (a.stateNode = T),
                o ? Fi(a) : ko(T, a, !1, !1));
        }
      }),
      (Cl = function (o, a, f, g) {
        f !== g
          ? ((o = Ui(Fs.current)), (f = Ui(oi.current)), (a.stateNode = De(g, o, f, a)), Fi(a))
          : (a.stateNode = o.stateNode);
      });
  } else (Vo = function () {}), (bl = function () {}), (Cl = function () {});
  function Ho(o, a) {
    if (!Gt)
      switch (o.tailMode) {
        case "hidden":
          a = o.tail;
          for (var f = null; a !== null; ) a.alternate !== null && (f = a), (a = a.sibling);
          f === null ? (o.tail = null) : (f.sibling = null);
          break;
        case "collapsed":
          f = o.tail;
          for (var g = null; f !== null; ) f.alternate !== null && (g = f), (f = f.sibling);
          g === null ? (a || o.tail === null ? (o.tail = null) : (o.tail.sibling = null)) : (g.sibling = null);
      }
  }
  function Sn(o) {
    var a = o.alternate !== null && o.alternate.child === o.child,
      f = 0,
      g = 0;
    if (a)
      for (var S = o.child; S !== null; )
        (f |= S.lanes | S.childLanes),
          (g |= S.subtreeFlags & 14680064),
          (g |= S.flags & 14680064),
          (S.return = o),
          (S = S.sibling);
    else
      for (S = o.child; S !== null; )
        (f |= S.lanes | S.childLanes), (g |= S.subtreeFlags), (g |= S.flags), (S.return = o), (S = S.sibling);
    return (o.subtreeFlags |= g), (o.childLanes = f), a;
  }
  function Fx(o, a, f) {
    var g = a.pendingProps;
    switch ((Ch(a), a.tag)) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return Sn(a), null;
      case 1:
        return jt(a.type) && hn(), Sn(a), null;
      case 3:
        return (
          (g = a.stateNode),
          Os(),
          et(Vt),
          et(Pe),
          Nh(),
          g.pendingContext && ((g.context = g.pendingContext), (g.pendingContext = null)),
          (o === null || o.child === null) &&
            (Lo(a)
              ? Fi(a)
              : o === null ||
                (o.memoizedState.isDehydrated && !(a.flags & 256)) ||
                ((a.flags |= 1024), mi !== null && (hf(mi), (mi = null)))),
          Vo(o, a),
          Sn(a),
          null
        );
      case 5:
        Dh(a), (f = Ui(Fs.current));
        var S = a.type;
        if (o !== null && a.stateNode != null)
          bl(o, a, S, g, f), o.ref !== a.ref && ((a.flags |= 512), (a.flags |= 2097152));
        else {
          if (!g) {
            if (a.stateNode === null) throw Error(l(166));
            return Sn(a), null;
          }
          if (((o = Ui(oi.current)), Lo(a))) {
            if (!pe) throw Error(l(175));
            (o = tl(a.stateNode, a.type, a.memoizedProps, f, o, a, !Io)), (a.updateQueue = o), o !== null && Fi(a);
          } else {
            var T = ce(S, g, f, o, a);
            ko(T, a, !1, !1), (a.stateNode = T), Ye(T, S, g, f, o) && Fi(a);
          }
          a.ref !== null && ((a.flags |= 512), (a.flags |= 2097152));
        }
        return Sn(a), null;
      case 6:
        if (o && a.stateNode != null) Cl(o, a, o.memoizedProps, g);
        else {
          if (typeof g != "string" && a.stateNode === null) throw Error(l(166));
          if (((o = Ui(Fs.current)), (f = Ui(oi.current)), Lo(a))) {
            if (!pe) throw Error(l(176));
            if (((o = a.stateNode), (g = a.memoizedProps), (f = nl(o, g, a, !Io)) && ((S = Jn), S !== null)))
              switch (((T = (S.mode & 1) !== 0), S.tag)) {
                case 3:
                  X(S.stateNode.containerInfo, o, g, T);
                  break;
                case 5:
                  Se(S.type, S.memoizedProps, S.stateNode, o, g, T);
              }
            f && Fi(a);
          } else a.stateNode = De(g, o, f, a);
        }
        return Sn(a), null;
      case 13:
        if ((et(Wt), (g = a.memoizedState), Gt && Kn !== null && a.mode & 1 && !(a.flags & 128))) {
          for (o = Kn; o; ) o = hr(o);
          return Us(), (a.flags |= 98560), a;
        }
        if (g !== null && g.dehydrated !== null) {
          if (((g = Lo(a)), o === null)) {
            if (!g) throw Error(l(318));
            if (!pe) throw Error(l(344));
            if (((o = a.memoizedState), (o = o !== null ? o.dehydrated : null), !o)) throw Error(l(317));
            hh(o, a);
          } else Us(), !(a.flags & 128) && (a.memoizedState = null), (a.flags |= 4);
          return Sn(a), null;
        }
        return (
          mi !== null && (hf(mi), (mi = null)),
          a.flags & 128
            ? ((a.lanes = f), a)
            : ((g = g !== null),
              (f = !1),
              o === null ? Lo(a) : (f = o.memoizedState !== null),
              g &&
                !f &&
                ((a.child.flags |= 8192), a.mode & 1 && (o === null || Wt.current & 1 ? on === 0 && (on = 3) : df())),
              a.updateQueue !== null && (a.flags |= 4),
              Sn(a),
              null)
        );
      case 4:
        return Os(), Vo(o, a), o === null && qe(a.stateNode.containerInfo), Sn(a), null;
      case 10:
        return Mh(a.type._context), Sn(a), null;
      case 17:
        return jt(a.type) && hn(), Sn(a), null;
      case 19:
        if ((et(Wt), (S = a.memoizedState), S === null)) return Sn(a), null;
        if (((g = (a.flags & 128) !== 0), (T = S.rendering), T === null))
          if (g) Ho(S, !1);
          else {
            if (on !== 0 || (o !== null && o.flags & 128))
              for (o = a.child; o !== null; ) {
                if (((T = xl(o)), T !== null)) {
                  for (
                    a.flags |= 128,
                      Ho(S, !1),
                      o = T.updateQueue,
                      o !== null && ((a.updateQueue = o), (a.flags |= 4)),
                      a.subtreeFlags = 0,
                      o = f,
                      g = a.child;
                    g !== null;

                  )
                    (f = g),
                      (S = o),
                      (f.flags &= 14680066),
                      (T = f.alternate),
                      T === null
                        ? ((f.childLanes = 0),
                          (f.lanes = S),
                          (f.child = null),
                          (f.subtreeFlags = 0),
                          (f.memoizedProps = null),
                          (f.memoizedState = null),
                          (f.updateQueue = null),
                          (f.dependencies = null),
                          (f.stateNode = null))
                        : ((f.childLanes = T.childLanes),
                          (f.lanes = T.lanes),
                          (f.child = T.child),
                          (f.subtreeFlags = 0),
                          (f.deletions = null),
                          (f.memoizedProps = T.memoizedProps),
                          (f.memoizedState = T.memoizedState),
                          (f.updateQueue = T.updateQueue),
                          (f.type = T.type),
                          (S = T.dependencies),
                          (f.dependencies = S === null ? null : { lanes: S.lanes, firstContext: S.firstContext })),
                      (g = g.sibling);
                  return mt(Wt, (Wt.current & 1) | 2), a.child;
                }
                o = o.sibling;
              }
            S.tail !== null && fn() > af && ((a.flags |= 128), (g = !0), Ho(S, !1), (a.lanes = 4194304));
          }
        else {
          if (!g)
            if (((o = xl(T)), o !== null)) {
              if (
                ((a.flags |= 128),
                (g = !0),
                (o = o.updateQueue),
                o !== null && ((a.updateQueue = o), (a.flags |= 4)),
                Ho(S, !0),
                S.tail === null && S.tailMode === "hidden" && !T.alternate && !Gt)
              )
                return Sn(a), null;
            } else
              2 * fn() - S.renderingStartTime > af &&
                f !== 1073741824 &&
                ((a.flags |= 128), (g = !0), Ho(S, !1), (a.lanes = 4194304));
          S.isBackwards
            ? ((T.sibling = a.child), (a.child = T))
            : ((o = S.last), o !== null ? (o.sibling = T) : (a.child = T), (S.last = T));
        }
        return S.tail !== null
          ? ((a = S.tail),
            (S.rendering = a),
            (S.tail = a.sibling),
            (S.renderingStartTime = fn()),
            (a.sibling = null),
            (o = Wt.current),
            mt(Wt, g ? (o & 1) | 2 : o & 1),
            a)
          : (Sn(a), null);
      case 22:
      case 23:
        return (
          ff(),
          (g = a.memoizedState !== null),
          o !== null && (o.memoizedState !== null) !== g && (a.flags |= 8192),
          g && a.mode & 1 ? Qn & 1073741824 && (Sn(a), at && a.subtreeFlags & 6 && (a.flags |= 8192)) : Sn(a),
          null
        );
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(l(156, a.tag));
  }
  var Ox = c.ReactCurrentOwner,
    jn = !1;
  function Pn(o, a, f, g) {
    a.child = o === null ? Vp(a, null, f, g) : Ns(a, o.child, f, g);
  }
  function pm(o, a, f, g, S) {
    f = f.render;
    var T = a.ref;
    return (
      Is(a, S),
      (g = Oh(o, a, f, g, T, S)),
      (f = Bh()),
      o !== null && !jn
        ? ((a.updateQueue = o.updateQueue), (a.flags &= -2053), (o.lanes &= ~S), Ji(o, a, S))
        : (Gt && f && bh(a), (a.flags |= 1), Pn(o, a, g, S), a.child)
    );
  }
  function mm(o, a, f, g, S) {
    if (o === null) {
      var T = f.type;
      return typeof T == "function" &&
        !pf(T) &&
        T.defaultProps === void 0 &&
        f.compare === null &&
        f.defaultProps === void 0
        ? ((a.tag = 15), (a.type = T), gm(o, a, T, g, S))
        : ((o = Jl(f.type, null, g, a, a.mode, S)), (o.ref = a.ref), (o.return = a), (a.child = o));
    }
    if (((T = o.child), !(o.lanes & S))) {
      var B = T.memoizedProps;
      if (((f = f.compare), (f = f !== null ? f : ul), f(B, g) && o.ref === a.ref)) return Ji(o, a, S);
    }
    return (a.flags |= 1), (o = yr(T, g)), (o.ref = a.ref), (o.return = a), (a.child = o);
  }
  function gm(o, a, f, g, S) {
    if (o !== null && ul(o.memoizedProps, g) && o.ref === a.ref)
      if (((jn = !1), (o.lanes & S) !== 0)) o.flags & 131072 && (jn = !0);
      else return (a.lanes = o.lanes), Ji(o, a, S);
    return Wh(o, a, f, g, S);
  }
  function vm(o, a, f) {
    var g = a.pendingProps,
      S = g.children,
      T = o !== null ? o.memoizedState : null;
    if (g.mode === "hidden")
      if (!(a.mode & 1)) (a.memoizedState = { baseLanes: 0, cachePool: null }), mt(zs, Qn), (Qn |= f);
      else if (f & 1073741824)
        (a.memoizedState = { baseLanes: 0, cachePool: null }),
          (g = T !== null ? T.baseLanes : f),
          mt(zs, Qn),
          (Qn |= g);
      else
        return (
          (o = T !== null ? T.baseLanes | f : f),
          (a.lanes = a.childLanes = 1073741824),
          (a.memoizedState = { baseLanes: o, cachePool: null }),
          (a.updateQueue = null),
          mt(zs, Qn),
          (Qn |= o),
          null
        );
    else T !== null ? ((g = T.baseLanes | f), (a.memoizedState = null)) : (g = f), mt(zs, Qn), (Qn |= g);
    return Pn(o, a, S, f), a.child;
  }
  function _m(o, a) {
    var f = a.ref;
    ((o === null && f !== null) || (o !== null && o.ref !== f)) && ((a.flags |= 512), (a.flags |= 2097152));
  }
  function Wh(o, a, f, g, S) {
    var T = jt(f) ? wt : Pe.current;
    return (
      (T = un(a, T)),
      Is(a, S),
      (f = Oh(o, a, f, g, T, S)),
      (g = Bh()),
      o !== null && !jn
        ? ((a.updateQueue = o.updateQueue), (a.flags &= -2053), (o.lanes &= ~S), Ji(o, a, S))
        : (Gt && g && bh(a), (a.flags |= 1), Pn(o, a, f, S), a.child)
    );
  }
  function xm(o, a, f, g, S) {
    if (jt(f)) {
      var T = !0;
      Rn(a);
    } else T = !1;
    if ((Is(a, S), a.stateNode === null))
      o !== null && ((o.alternate = null), (a.alternate = null), (a.flags |= 2)), Dp(a, f, g), Ah(a, f, g, S), (g = !0);
    else if (o === null) {
      var B = a.stateNode,
        V = a.memoizedProps;
      B.props = V;
      var ie = B.context,
        ye = f.contextType;
      typeof ye == "object" && ye !== null ? (ye = ii(ye)) : ((ye = jt(f) ? wt : Pe.current), (ye = un(a, ye)));
      var ke = f.getDerivedStateFromProps,
        ht = typeof ke == "function" || typeof B.getSnapshotBeforeUpdate == "function";
      ht ||
        (typeof B.UNSAFE_componentWillReceiveProps != "function" && typeof B.componentWillReceiveProps != "function") ||
        ((V !== g || ie !== ye) && Up(a, B, g, ye)),
        (pr = !1);
      var $e = a.memoizedState;
      (B.state = $e),
        pl(a, g, B, S),
        (ie = a.memoizedState),
        V !== g || $e !== ie || Vt.current || pr
          ? (typeof ke == "function" && (Th(a, f, ke, g), (ie = a.memoizedState)),
            (V = pr || Lp(a, f, V, g, $e, ie, ye))
              ? (ht ||
                  (typeof B.UNSAFE_componentWillMount != "function" && typeof B.componentWillMount != "function") ||
                  (typeof B.componentWillMount == "function" && B.componentWillMount(),
                  typeof B.UNSAFE_componentWillMount == "function" && B.UNSAFE_componentWillMount()),
                typeof B.componentDidMount == "function" && (a.flags |= 4194308))
              : (typeof B.componentDidMount == "function" && (a.flags |= 4194308),
                (a.memoizedProps = g),
                (a.memoizedState = ie)),
            (B.props = g),
            (B.state = ie),
            (B.context = ye),
            (g = V))
          : (typeof B.componentDidMount == "function" && (a.flags |= 4194308), (g = !1));
    } else {
      (B = a.stateNode),
        Cp(o, a),
        (V = a.memoizedProps),
        (ye = a.type === a.elementType ? V : pi(a.type, V)),
        (B.props = ye),
        (ht = a.pendingProps),
        ($e = B.context),
        (ie = f.contextType),
        typeof ie == "object" && ie !== null ? (ie = ii(ie)) : ((ie = jt(f) ? wt : Pe.current), (ie = un(a, ie)));
      var Bt = f.getDerivedStateFromProps;
      (ke = typeof Bt == "function" || typeof B.getSnapshotBeforeUpdate == "function") ||
        (typeof B.UNSAFE_componentWillReceiveProps != "function" && typeof B.componentWillReceiveProps != "function") ||
        ((V !== ht || $e !== ie) && Up(a, B, g, ie)),
        (pr = !1),
        ($e = a.memoizedState),
        (B.state = $e),
        pl(a, g, B, S);
      var Je = a.memoizedState;
      V !== ht || $e !== Je || Vt.current || pr
        ? (typeof Bt == "function" && (Th(a, f, Bt, g), (Je = a.memoizedState)),
          (ye = pr || Lp(a, f, ye, g, $e, Je, ie) || !1)
            ? (ke ||
                (typeof B.UNSAFE_componentWillUpdate != "function" && typeof B.componentWillUpdate != "function") ||
                (typeof B.componentWillUpdate == "function" && B.componentWillUpdate(g, Je, ie),
                typeof B.UNSAFE_componentWillUpdate == "function" && B.UNSAFE_componentWillUpdate(g, Je, ie)),
              typeof B.componentDidUpdate == "function" && (a.flags |= 4),
              typeof B.getSnapshotBeforeUpdate == "function" && (a.flags |= 1024))
            : (typeof B.componentDidUpdate != "function" ||
                (V === o.memoizedProps && $e === o.memoizedState) ||
                (a.flags |= 4),
              typeof B.getSnapshotBeforeUpdate != "function" ||
                (V === o.memoizedProps && $e === o.memoizedState) ||
                (a.flags |= 1024),
              (a.memoizedProps = g),
              (a.memoizedState = Je)),
          (B.props = g),
          (B.state = Je),
          (B.context = ie),
          (g = ye))
        : (typeof B.componentDidUpdate != "function" ||
            (V === o.memoizedProps && $e === o.memoizedState) ||
            (a.flags |= 4),
          typeof B.getSnapshotBeforeUpdate != "function" ||
            (V === o.memoizedProps && $e === o.memoizedState) ||
            (a.flags |= 1024),
          (g = !1));
    }
    return Xh(o, a, f, g, T, S);
  }
  function Xh(o, a, f, g, S, T) {
    _m(o, a);
    var B = (a.flags & 128) !== 0;
    if (!g && !B) return S && dr(a, f, !1), Ji(o, a, T);
    (g = a.stateNode), (Ox.current = a);
    var V = B && typeof f.getDerivedStateFromError != "function" ? null : g.render();
    return (
      (a.flags |= 1),
      o !== null && B ? ((a.child = Ns(a, o.child, null, T)), (a.child = Ns(a, null, V, T))) : Pn(o, a, V, T),
      (a.memoizedState = g.state),
      S && dr(a, f, !0),
      a.child
    );
  }
  function ym(o) {
    var a = o.stateNode;
    a.pendingContext ? fr(o, a.pendingContext, a.pendingContext !== a.context) : a.context && fr(o, a.context, !1),
      Lh(o, a.containerInfo);
  }
  function Sm(o, a, f, g, S) {
    return Us(), Ih(S), (a.flags |= 256), Pn(o, a, f, g), a.child;
  }
  var Rl = { dehydrated: null, treeContext: null, retryLane: 0 };
  function Pl(o) {
    return { baseLanes: o, cachePool: null };
  }
  function Mm(o, a, f) {
    var g = a.pendingProps,
      S = Wt.current,
      T = !1,
      B = (a.flags & 128) !== 0,
      V;
    if (
      ((V = B) || (V = o !== null && o.memoizedState === null ? !1 : (S & 2) !== 0),
      V ? ((T = !0), (a.flags &= -129)) : (o === null || o.memoizedState !== null) && (S |= 1),
      mt(Wt, S & 1),
      o === null)
    )
      return (
        Ph(a),
        (o = a.memoizedState),
        o !== null && ((o = o.dehydrated), o !== null)
          ? (a.mode & 1 ? (Or(o) ? (a.lanes = 8) : (a.lanes = 1073741824)) : (a.lanes = 1), null)
          : ((S = g.children),
            (o = g.fallback),
            T
              ? ((g = a.mode),
                (T = a.child),
                (S = { mode: "hidden", children: S }),
                !(g & 1) && T !== null ? ((T.childLanes = 0), (T.pendingProps = S)) : (T = Kl(S, g, 0, null)),
                (o = Yr(o, g, f, null)),
                (T.return = a),
                (o.return = a),
                (T.sibling = o),
                (a.child = T),
                (a.child.memoizedState = Pl(f)),
                (a.memoizedState = Rl),
                o)
              : Yh(a, S))
      );
    if (((S = o.memoizedState), S !== null)) {
      if (((V = S.dehydrated), V !== null)) {
        if (B)
          return a.flags & 256
            ? ((a.flags &= -257), Il(o, a, f, Error(l(422))))
            : a.memoizedState !== null
              ? ((a.child = o.child), (a.flags |= 128), null)
              : ((T = g.fallback),
                (S = a.mode),
                (g = Kl({ mode: "visible", children: g.children }, S, 0, null)),
                (T = Yr(T, S, f, null)),
                (T.flags |= 2),
                (g.return = a),
                (T.return = a),
                (g.sibling = T),
                (a.child = g),
                a.mode & 1 && Ns(a, o.child, null, f),
                (a.child.memoizedState = Pl(f)),
                (a.memoizedState = Rl),
                T);
        if (!(a.mode & 1)) a = Il(o, a, f, null);
        else if (Or(V)) a = Il(o, a, f, Error(l(419)));
        else if (((g = (f & o.childLanes) !== 0), jn || g)) {
          if (((g = en), g !== null)) {
            switch (f & -f) {
              case 4:
                T = 2;
                break;
              case 16:
                T = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                T = 32;
                break;
              case 536870912:
                T = 268435456;
                break;
              default:
                T = 0;
            }
            (g = T & (g.suspendedLanes | f) ? 0 : T), g !== 0 && g !== S.retryLane && ((S.retryLane = g), li(o, g, -1));
          }
          df(), (a = Il(o, a, f, Error(l(421))));
        } else
          bi(V)
            ? ((a.flags |= 128), (a.child = o.child), (a = Kx.bind(null, o)), $a(V, a), (a = null))
            : ((f = S.treeContext),
              pe &&
                ((Kn = Rs(V)),
                (Jn = a),
                (Gt = !0),
                (mi = null),
                (Io = !1),
                f !== null &&
                  ((ri[si++] = Yi), (ri[si++] = qi), (ri[si++] = Br), (Yi = f.id), (qi = f.overflow), (Br = a))),
              (a = Yh(a, a.pendingProps.children)),
              (a.flags |= 4096));
        return a;
      }
      return T
        ? ((g = Em(o, a, g.children, g.fallback, f)),
          (T = a.child),
          (S = o.child.memoizedState),
          (T.memoizedState = S === null ? Pl(f) : { baseLanes: S.baseLanes | f, cachePool: null }),
          (T.childLanes = o.childLanes & ~f),
          (a.memoizedState = Rl),
          g)
        : ((f = wm(o, a, g.children, f)), (a.memoizedState = null), f);
    }
    return T
      ? ((g = Em(o, a, g.children, g.fallback, f)),
        (T = a.child),
        (S = o.child.memoizedState),
        (T.memoizedState = S === null ? Pl(f) : { baseLanes: S.baseLanes | f, cachePool: null }),
        (T.childLanes = o.childLanes & ~f),
        (a.memoizedState = Rl),
        g)
      : ((f = wm(o, a, g.children, f)), (a.memoizedState = null), f);
  }
  function Yh(o, a) {
    return (a = Kl({ mode: "visible", children: a }, o.mode, 0, null)), (a.return = o), (o.child = a);
  }
  function wm(o, a, f, g) {
    var S = o.child;
    return (
      (o = S.sibling),
      (f = yr(S, { mode: "visible", children: f })),
      !(a.mode & 1) && (f.lanes = g),
      (f.return = a),
      (f.sibling = null),
      o !== null && ((g = a.deletions), g === null ? ((a.deletions = [o]), (a.flags |= 16)) : g.push(o)),
      (a.child = f)
    );
  }
  function Em(o, a, f, g, S) {
    var T = a.mode;
    o = o.child;
    var B = o.sibling,
      V = { mode: "hidden", children: f };
    return (
      !(T & 1) && a.child !== o
        ? ((f = a.child), (f.childLanes = 0), (f.pendingProps = V), (a.deletions = null))
        : ((f = yr(o, V)), (f.subtreeFlags = o.subtreeFlags & 14680064)),
      B !== null ? (g = yr(B, g)) : ((g = Yr(g, T, S, null)), (g.flags |= 2)),
      (g.return = a),
      (f.return = a),
      (f.sibling = g),
      (a.child = f),
      g
    );
  }
  function Il(o, a, f, g) {
    return (
      g !== null && Ih(g),
      Ns(a, o.child, null, f),
      (o = Yh(a, a.pendingProps.children)),
      (o.flags |= 2),
      (a.memoizedState = null),
      o
    );
  }
  function Tm(o, a, f) {
    o.lanes |= a;
    var g = o.alternate;
    g !== null && (g.lanes |= a), wh(o.return, a, f);
  }
  function qh(o, a, f, g, S) {
    var T = o.memoizedState;
    T === null
      ? (o.memoizedState = { isBackwards: a, rendering: null, renderingStartTime: 0, last: g, tail: f, tailMode: S })
      : ((T.isBackwards = a),
        (T.rendering = null),
        (T.renderingStartTime = 0),
        (T.last = g),
        (T.tail = f),
        (T.tailMode = S));
  }
  function Am(o, a, f) {
    var g = a.pendingProps,
      S = g.revealOrder,
      T = g.tail;
    if ((Pn(o, a, g.children, f), (g = Wt.current), g & 2)) (g = (g & 1) | 2), (a.flags |= 128);
    else {
      if (o !== null && o.flags & 128)
        e: for (o = a.child; o !== null; ) {
          if (o.tag === 13) o.memoizedState !== null && Tm(o, f, a);
          else if (o.tag === 19) Tm(o, f, a);
          else if (o.child !== null) {
            (o.child.return = o), (o = o.child);
            continue;
          }
          if (o === a) break e;
          for (; o.sibling === null; ) {
            if (o.return === null || o.return === a) break e;
            o = o.return;
          }
          (o.sibling.return = o.return), (o = o.sibling);
        }
      g &= 1;
    }
    if ((mt(Wt, g), !(a.mode & 1))) a.memoizedState = null;
    else
      switch (S) {
        case "forwards":
          for (f = a.child, S = null; f !== null; )
            (o = f.alternate), o !== null && xl(o) === null && (S = f), (f = f.sibling);
          (f = S),
            f === null ? ((S = a.child), (a.child = null)) : ((S = f.sibling), (f.sibling = null)),
            qh(a, !1, S, f, T);
          break;
        case "backwards":
          for (f = null, S = a.child, a.child = null; S !== null; ) {
            if (((o = S.alternate), o !== null && xl(o) === null)) {
              a.child = S;
              break;
            }
            (o = S.sibling), (S.sibling = f), (f = S), (S = o);
          }
          qh(a, !0, f, null, T);
          break;
        case "together":
          qh(a, !1, null, null, void 0);
          break;
        default:
          a.memoizedState = null;
      }
    return a.child;
  }
  function Ji(o, a, f) {
    if ((o !== null && (a.dependencies = o.dependencies), (ks |= a.lanes), !(f & a.childLanes))) return null;
    if (o !== null && a.child !== o.child) throw Error(l(153));
    if (a.child !== null) {
      for (o = a.child, f = yr(o, o.pendingProps), a.child = f, f.return = a; o.sibling !== null; )
        (o = o.sibling), (f = f.sibling = yr(o, o.pendingProps)), (f.return = a);
      f.sibling = null;
    }
    return a.child;
  }
  function Bx(o, a, f) {
    switch (a.tag) {
      case 3:
        ym(a), Us();
        break;
      case 5:
        Hp(a);
        break;
      case 1:
        jt(a.type) && Rn(a);
        break;
      case 4:
        Lh(a, a.stateNode.containerInfo);
        break;
      case 10:
        bp(a, a.type._context, a.memoizedProps.value);
        break;
      case 13:
        var g = a.memoizedState;
        if (g !== null)
          return g.dehydrated !== null
            ? (mt(Wt, Wt.current & 1), (a.flags |= 128), null)
            : f & a.child.childLanes
              ? Mm(o, a, f)
              : (mt(Wt, Wt.current & 1), (o = Ji(o, a, f)), o !== null ? o.sibling : null);
        mt(Wt, Wt.current & 1);
        break;
      case 19:
        if (((g = (f & a.childLanes) !== 0), o.flags & 128)) {
          if (g) return Am(o, a, f);
          a.flags |= 128;
        }
        var S = a.memoizedState;
        if ((S !== null && ((S.rendering = null), (S.tail = null), (S.lastEffect = null)), mt(Wt, Wt.current), g))
          break;
        return null;
      case 22:
      case 23:
        return (a.lanes = 0), vm(o, a, f);
    }
    return Ji(o, a, f);
  }
  function zx(o, a) {
    switch ((Ch(a), a.tag)) {
      case 1:
        return jt(a.type) && hn(), (o = a.flags), o & 65536 ? ((a.flags = (o & -65537) | 128), a) : null;
      case 3:
        return (
          Os(),
          et(Vt),
          et(Pe),
          Nh(),
          (o = a.flags),
          o & 65536 && !(o & 128) ? ((a.flags = (o & -65537) | 128), a) : null
        );
      case 5:
        return Dh(a), null;
      case 13:
        if ((et(Wt), (o = a.memoizedState), o !== null && o.dehydrated !== null)) {
          if (a.alternate === null) throw Error(l(340));
          Us();
        }
        return (o = a.flags), o & 65536 ? ((a.flags = (o & -65537) | 128), a) : null;
      case 19:
        return et(Wt), null;
      case 4:
        return Os(), null;
      case 10:
        return Mh(a.type._context), null;
      case 22:
      case 23:
        return ff(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var Ll = !1,
    Vr = !1,
    kx = typeof WeakSet == "function" ? WeakSet : Set,
    be = null;
  function Dl(o, a) {
    var f = o.ref;
    if (f !== null)
      if (typeof f == "function")
        try {
          f(null);
        } catch (g) {
          Vn(o, a, g);
        }
      else f.current = null;
  }
  function Zh(o, a, f) {
    try {
      f();
    } catch (g) {
      Vn(o, a, g);
    }
  }
  var bm = !1;
  function Vx(o, a) {
    for (ne(o.containerInfo), be = a; be !== null; )
      if (((o = be), (a = o.child), (o.subtreeFlags & 1028) !== 0 && a !== null)) (a.return = o), (be = a);
      else
        for (; be !== null; ) {
          o = be;
          try {
            var f = o.alternate;
            if (o.flags & 1024)
              switch (o.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (f !== null) {
                    var g = f.memoizedProps,
                      S = f.memoizedState,
                      T = o.stateNode,
                      B = T.getSnapshotBeforeUpdate(o.elementType === o.type ? g : pi(o.type, g), S);
                    T.__reactInternalSnapshotBeforeUpdate = B;
                  }
                  break;
                case 3:
                  at && he(o.stateNode.containerInfo);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(l(163));
              }
          } catch (V) {
            Vn(o, o.return, V);
          }
          if (((a = o.sibling), a !== null)) {
            (a.return = o.return), (be = a);
            break;
          }
          be = o.return;
        }
    return (f = bm), (bm = !1), f;
  }
  function Hr(o, a, f) {
    var g = a.updateQueue;
    if (((g = g !== null ? g.lastEffect : null), g !== null)) {
      var S = (g = g.next);
      do {
        if ((S.tag & o) === o) {
          var T = S.destroy;
          (S.destroy = void 0), T !== void 0 && Zh(a, f, T);
        }
        S = S.next;
      } while (S !== g);
    }
  }
  function Go(o, a) {
    if (((a = a.updateQueue), (a = a !== null ? a.lastEffect : null), a !== null)) {
      var f = (a = a.next);
      do {
        if ((f.tag & o) === o) {
          var g = f.create;
          f.destroy = g();
        }
        f = f.next;
      } while (f !== a);
    }
  }
  function Jh(o) {
    var a = o.ref;
    if (a !== null) {
      var f = o.stateNode;
      switch (o.tag) {
        case 5:
          o = j(f);
          break;
        default:
          o = f;
      }
      typeof a == "function" ? a(o) : (a.current = o);
    }
  }
  function Cm(o, a, f) {
    if (Pi && typeof Pi.onCommitFiberUnmount == "function")
      try {
        Pi.onCommitFiberUnmount(ll, a);
      } catch {}
    switch (a.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        if (((o = a.updateQueue), o !== null && ((o = o.lastEffect), o !== null))) {
          var g = (o = o.next);
          do {
            var S = g,
              T = S.destroy;
            (S = S.tag), T !== void 0 && (S & 2 || S & 4) && Zh(a, f, T), (g = g.next);
          } while (g !== o);
        }
        break;
      case 1:
        if ((Dl(a, f), (o = a.stateNode), typeof o.componentWillUnmount == "function"))
          try {
            (o.props = a.memoizedProps), (o.state = a.memoizedState), o.componentWillUnmount();
          } catch (B) {
            Vn(a, f, B);
          }
        break;
      case 5:
        Dl(a, f);
        break;
      case 4:
        at ? Um(o, a, f) : ue && ue && ((a = a.stateNode.containerInfo), (f = Re(a)), sn(a, f));
    }
  }
  function Rm(o, a, f) {
    for (var g = a; ; )
      if ((Cm(o, g, f), g.child === null || (at && g.tag === 4))) {
        if (g === a) break;
        for (; g.sibling === null; ) {
          if (g.return === null || g.return === a) return;
          g = g.return;
        }
        (g.sibling.return = g.return), (g = g.sibling);
      } else (g.child.return = g), (g = g.child);
  }
  function Pm(o) {
    var a = o.alternate;
    a !== null && ((o.alternate = null), Pm(a)),
      (o.child = null),
      (o.deletions = null),
      (o.sibling = null),
      o.tag === 5 && ((a = o.stateNode), a !== null && Oe(a)),
      (o.stateNode = null),
      (o.return = null),
      (o.dependencies = null),
      (o.memoizedProps = null),
      (o.memoizedState = null),
      (o.pendingProps = null),
      (o.stateNode = null),
      (o.updateQueue = null);
  }
  function Im(o) {
    return o.tag === 5 || o.tag === 3 || o.tag === 4;
  }
  function Lm(o) {
    e: for (;;) {
      for (; o.sibling === null; ) {
        if (o.return === null || Im(o.return)) return null;
        o = o.return;
      }
      for (o.sibling.return = o.return, o = o.sibling; o.tag !== 5 && o.tag !== 6 && o.tag !== 18; ) {
        if (o.flags & 2 || o.child === null || o.tag === 4) continue e;
        (o.child.return = o), (o = o.child);
      }
      if (!(o.flags & 2)) return o.stateNode;
    }
  }
  function Dm(o) {
    if (at) {
      e: {
        for (var a = o.return; a !== null; ) {
          if (Im(a)) break e;
          a = a.return;
        }
        throw Error(l(160));
      }
      var f = a;
      switch (f.tag) {
        case 5:
          (a = f.stateNode), f.flags & 32 && (ct(a), (f.flags &= -33)), (f = Lm(o)), jh(o, f, a);
          break;
        case 3:
        case 4:
          (a = f.stateNode.containerInfo), (f = Lm(o)), Kh(o, f, a);
          break;
        default:
          throw Error(l(161));
      }
    }
  }
  function Kh(o, a, f) {
    var g = o.tag;
    if (g === 5 || g === 6) (o = o.stateNode), a ? ot(f, o, a) : Fe(f, o);
    else if (g !== 4 && ((o = o.child), o !== null))
      for (Kh(o, a, f), o = o.sibling; o !== null; ) Kh(o, a, f), (o = o.sibling);
  }
  function jh(o, a, f) {
    var g = o.tag;
    if (g === 5 || g === 6) (o = o.stateNode), a ? nt(f, o, a) : Ee(f, o);
    else if (g !== 4 && ((o = o.child), o !== null))
      for (jh(o, a, f), o = o.sibling; o !== null; ) jh(o, a, f), (o = o.sibling);
  }
  function Um(o, a, f) {
    for (var g = a, S = !1, T, B; ; ) {
      if (!S) {
        S = g.return;
        e: for (;;) {
          if (S === null) throw Error(l(160));
          switch (((T = S.stateNode), S.tag)) {
            case 5:
              B = !1;
              break e;
            case 3:
              (T = T.containerInfo), (B = !0);
              break e;
            case 4:
              (T = T.containerInfo), (B = !0);
              break e;
          }
          S = S.return;
        }
        S = !0;
      }
      if (g.tag === 5 || g.tag === 6) Rm(o, g, f), B ? Et(T, g.stateNode) : ze(T, g.stateNode);
      else if (g.tag === 18) B ? Q(T, g.stateNode) : G(T, g.stateNode);
      else if (g.tag === 4) {
        if (g.child !== null) {
          (T = g.stateNode.containerInfo), (B = !0), (g.child.return = g), (g = g.child);
          continue;
        }
      } else if ((Cm(o, g, f), g.child !== null)) {
        (g.child.return = g), (g = g.child);
        continue;
      }
      if (g === a) break;
      for (; g.sibling === null; ) {
        if (g.return === null || g.return === a) return;
        (g = g.return), g.tag === 4 && (S = !1);
      }
      (g.sibling.return = g.return), (g = g.sibling);
    }
  }
  function Qh(o, a) {
    if (at) {
      switch (a.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          Hr(3, a, a.return), Go(3, a), Hr(5, a, a.return);
          return;
        case 1:
          return;
        case 5:
          var f = a.stateNode;
          if (f != null) {
            var g = a.memoizedProps;
            o = o !== null ? o.memoizedProps : g;
            var S = a.type,
              T = a.updateQueue;
            (a.updateQueue = null), T !== null && Be(f, T, S, o, g, a);
          }
          return;
        case 6:
          if (a.stateNode === null) throw Error(l(162));
          (f = a.memoizedProps), Mt(a.stateNode, o !== null ? o.memoizedProps : f, f);
          return;
        case 3:
          pe && o !== null && o.memoizedState.isDehydrated && il(a.stateNode.containerInfo);
          return;
        case 12:
          return;
        case 13:
          Ul(a);
          return;
        case 19:
          Ul(a);
          return;
        case 17:
          return;
      }
      throw Error(l(163));
    }
    switch (a.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        Hr(3, a, a.return), Go(3, a), Hr(5, a, a.return);
        return;
      case 12:
        return;
      case 13:
        Ul(a);
        return;
      case 19:
        Ul(a);
        return;
      case 3:
        pe && o !== null && o.memoizedState.isDehydrated && il(a.stateNode.containerInfo);
        break;
      case 22:
      case 23:
        return;
    }
    e: if (ue) {
      switch (a.tag) {
        case 1:
        case 5:
        case 6:
          break e;
        case 3:
        case 4:
          (a = a.stateNode), sn(a.containerInfo, a.pendingChildren);
          break e;
      }
      throw Error(l(163));
    }
  }
  function Ul(o) {
    var a = o.updateQueue;
    if (a !== null) {
      o.updateQueue = null;
      var f = o.stateNode;
      f === null && (f = o.stateNode = new kx()),
        a.forEach(function (g) {
          var S = jx.bind(null, o, g);
          f.has(g) || (f.add(g), g.then(S, S));
        });
    }
  }
  function Hx(o, a) {
    for (be = a; be !== null; ) {
      a = be;
      var f = a.deletions;
      if (f !== null)
        for (var g = 0; g < f.length; g++) {
          var S = f[g];
          try {
            var T = o;
            at ? Um(T, S, a) : Rm(T, S, a);
            var B = S.alternate;
            B !== null && (B.return = null), (S.return = null);
          } catch (Ze) {
            Vn(S, a, Ze);
          }
        }
      if (((f = a.child), a.subtreeFlags & 12854 && f !== null)) (f.return = a), (be = f);
      else
        for (; be !== null; ) {
          a = be;
          try {
            var V = a.flags;
            if ((V & 32 && at && ct(a.stateNode), V & 512)) {
              var ie = a.alternate;
              if (ie !== null) {
                var ye = ie.ref;
                ye !== null && (typeof ye == "function" ? ye(null) : (ye.current = null));
              }
            }
            if (V & 8192)
              switch (a.tag) {
                case 13:
                  if (a.memoizedState !== null) {
                    var ke = a.alternate;
                    (ke === null || ke.memoizedState === null) && (of = fn());
                  }
                  break;
                case 22:
                  var ht = a.memoizedState !== null,
                    $e = a.alternate,
                    Bt = $e !== null && $e.memoizedState !== null;
                  if (((f = a), at)) {
                    e: if (((g = f), (S = ht), (T = null), at))
                      for (var Je = g; ; ) {
                        if (Je.tag === 5) {
                          if (T === null) {
                            T = Je;
                            var Mn = Je.stateNode;
                            S ? Nt(Mn) : Te(Je.stateNode, Je.memoizedProps);
                          }
                        } else if (Je.tag === 6) {
                          if (T === null) {
                            var ui = Je.stateNode;
                            S ? H(ui) : se(ui, Je.memoizedProps);
                          }
                        } else if (
                          ((Je.tag !== 22 && Je.tag !== 23) || Je.memoizedState === null || Je === g) &&
                          Je.child !== null
                        ) {
                          (Je.child.return = Je), (Je = Je.child);
                          continue;
                        }
                        if (Je === g) break;
                        for (; Je.sibling === null; ) {
                          if (Je.return === null || Je.return === g) break e;
                          T === Je && (T = null), (Je = Je.return);
                        }
                        T === Je && (T = null), (Je.sibling.return = Je.return), (Je = Je.sibling);
                      }
                  }
                  if (ht && !Bt && f.mode & 1) {
                    be = f;
                    for (var J = f.child; J !== null; ) {
                      for (f = be = J; be !== null; ) {
                        g = be;
                        var W = g.child;
                        switch (g.tag) {
                          case 0:
                          case 11:
                          case 14:
                          case 15:
                            Hr(4, g, g.return);
                            break;
                          case 1:
                            Dl(g, g.return);
                            var ee = g.stateNode;
                            if (typeof ee.componentWillUnmount == "function") {
                              var Le = g.return;
                              try {
                                (ee.props = g.memoizedProps), (ee.state = g.memoizedState), ee.componentWillUnmount();
                              } catch (Ze) {
                                Vn(g, Le, Ze);
                              }
                            }
                            break;
                          case 5:
                            Dl(g, g.return);
                            break;
                          case 22:
                            if (g.memoizedState !== null) {
                              Om(f);
                              continue;
                            }
                        }
                        W !== null ? ((W.return = g), (be = W)) : Om(f);
                      }
                      J = J.sibling;
                    }
                  }
              }
            switch (V & 4102) {
              case 2:
                Dm(a), (a.flags &= -3);
                break;
              case 6:
                Dm(a), (a.flags &= -3), Qh(a.alternate, a);
                break;
              case 4096:
                a.flags &= -4097;
                break;
              case 4100:
                (a.flags &= -4097), Qh(a.alternate, a);
                break;
              case 4:
                Qh(a.alternate, a);
            }
          } catch (Ze) {
            Vn(a, a.return, Ze);
          }
          if (((f = a.sibling), f !== null)) {
            (f.return = a.return), (be = f);
            break;
          }
          be = a.return;
        }
    }
  }
  function Gx(o, a, f) {
    (be = o), Nm(o);
  }
  function Nm(o, a, f) {
    for (var g = (o.mode & 1) !== 0; be !== null; ) {
      var S = be,
        T = S.child;
      if (S.tag === 22 && g) {
        var B = S.memoizedState !== null || Ll;
        if (!B) {
          var V = S.alternate,
            ie = (V !== null && V.memoizedState !== null) || Vr;
          V = Ll;
          var ye = Vr;
          if (((Ll = B), (Vr = ie) && !ye))
            for (be = S; be !== null; )
              (B = be),
                (ie = B.child),
                B.tag === 22 && B.memoizedState !== null ? Bm(S) : ie !== null ? ((ie.return = B), (be = ie)) : Bm(S);
          for (; T !== null; ) (be = T), Nm(T), (T = T.sibling);
          (be = S), (Ll = V), (Vr = ye);
        }
        Fm(o);
      } else S.subtreeFlags & 8772 && T !== null ? ((T.return = S), (be = T)) : Fm(o);
    }
  }
  function Fm(o) {
    for (; be !== null; ) {
      var a = be;
      if (a.flags & 8772) {
        var f = a.alternate;
        try {
          if (a.flags & 8772)
            switch (a.tag) {
              case 0:
              case 11:
              case 15:
                Vr || Go(5, a);
                break;
              case 1:
                var g = a.stateNode;
                if (a.flags & 4 && !Vr)
                  if (f === null) g.componentDidMount();
                  else {
                    var S = a.elementType === a.type ? f.memoizedProps : pi(a.type, f.memoizedProps);
                    g.componentDidUpdate(S, f.memoizedState, g.__reactInternalSnapshotBeforeUpdate);
                  }
                var T = a.updateQueue;
                T !== null && Pp(a, T, g);
                break;
              case 3:
                var B = a.updateQueue;
                if (B !== null) {
                  if (((f = null), a.child !== null))
                    switch (a.child.tag) {
                      case 5:
                        f = j(a.child.stateNode);
                        break;
                      case 1:
                        f = a.child.stateNode;
                    }
                  Pp(a, B, f);
                }
                break;
              case 5:
                var V = a.stateNode;
                f === null && a.flags & 4 && _e(V, a.type, a.memoizedProps, a);
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (pe && a.memoizedState === null) {
                  var ie = a.alternate;
                  if (ie !== null) {
                    var ye = ie.memoizedState;
                    if (ye !== null) {
                      var ke = ye.dehydrated;
                      ke !== null && I(ke);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
                break;
              default:
                throw Error(l(163));
            }
          Vr || (a.flags & 512 && Jh(a));
        } catch (ht) {
          Vn(a, a.return, ht);
        }
      }
      if (a === o) {
        be = null;
        break;
      }
      if (((f = a.sibling), f !== null)) {
        (f.return = a.return), (be = f);
        break;
      }
      be = a.return;
    }
  }
  function Om(o) {
    for (; be !== null; ) {
      var a = be;
      if (a === o) {
        be = null;
        break;
      }
      var f = a.sibling;
      if (f !== null) {
        (f.return = a.return), (be = f);
        break;
      }
      be = a.return;
    }
  }
  function Bm(o) {
    for (; be !== null; ) {
      var a = be;
      try {
        switch (a.tag) {
          case 0:
          case 11:
          case 15:
            var f = a.return;
            try {
              Go(4, a);
            } catch (ie) {
              Vn(a, f, ie);
            }
            break;
          case 1:
            var g = a.stateNode;
            if (typeof g.componentDidMount == "function") {
              var S = a.return;
              try {
                g.componentDidMount();
              } catch (ie) {
                Vn(a, S, ie);
              }
            }
            var T = a.return;
            try {
              Jh(a);
            } catch (ie) {
              Vn(a, T, ie);
            }
            break;
          case 5:
            var B = a.return;
            try {
              Jh(a);
            } catch (ie) {
              Vn(a, B, ie);
            }
        }
      } catch (ie) {
        Vn(a, a.return, ie);
      }
      if (a === o) {
        be = null;
        break;
      }
      var V = a.sibling;
      if (V !== null) {
        (V.return = a.return), (be = V);
        break;
      }
      be = a.return;
    }
  }
  var Nl = 0,
    Fl = 1,
    Ol = 2,
    Bl = 3,
    zl = 4;
  if (typeof Symbol == "function" && Symbol.for) {
    var Wo = Symbol.for;
    (Nl = Wo("selector.component")),
      (Fl = Wo("selector.has_pseudo_class")),
      (Ol = Wo("selector.role")),
      (Bl = Wo("selector.test_id")),
      (zl = Wo("selector.text"));
  }
  function $h(o) {
    var a = z(o);
    if (a != null) {
      if (typeof a.memoizedProps["data-testname"] != "string") throw Error(l(364));
      return a;
    }
    if (((o = U(o)), o === null)) throw Error(l(362));
    return o.stateNode.current;
  }
  function ef(o, a) {
    switch (a.$$typeof) {
      case Nl:
        if (o.type === a.value) return !0;
        break;
      case Fl:
        e: {
          (a = a.value), (o = [o, 0]);
          for (var f = 0; f < o.length; ) {
            var g = o[f++],
              S = o[f++],
              T = a[S];
            if (g.tag !== 5 || !oe(g)) {
              for (; T != null && ef(g, T); ) S++, (T = a[S]);
              if (S === a.length) {
                a = !0;
                break e;
              } else for (g = g.child; g !== null; ) o.push(g, S), (g = g.sibling);
            }
          }
          a = !1;
        }
        return a;
      case Ol:
        if (o.tag === 5 && de(o.stateNode, a.value)) return !0;
        break;
      case zl:
        if ((o.tag === 5 || o.tag === 6) && ((o = Z(o)), o !== null && 0 <= o.indexOf(a.value))) return !0;
        break;
      case Bl:
        if (
          o.tag === 5 &&
          ((o = o.memoizedProps["data-testname"]), typeof o == "string" && o.toLowerCase() === a.value.toLowerCase())
        )
          return !0;
        break;
      default:
        throw Error(l(365));
    }
    return !1;
  }
  function tf(o) {
    switch (o.$$typeof) {
      case Nl:
        return "<" + (L(o.value) || "Unknown") + ">";
      case Fl:
        return ":has(" + (tf(o) || "") + ")";
      case Ol:
        return '[role="' + o.value + '"]';
      case zl:
        return '"' + o.value + '"';
      case Bl:
        return '[data-testname="' + o.value + '"]';
      default:
        throw Error(l(365));
    }
  }
  function zm(o, a) {
    var f = [];
    o = [o, 0];
    for (var g = 0; g < o.length; ) {
      var S = o[g++],
        T = o[g++],
        B = a[T];
      if (S.tag !== 5 || !oe(S)) {
        for (; B != null && ef(S, B); ) T++, (B = a[T]);
        if (T === a.length) f.push(S);
        else for (S = S.child; S !== null; ) o.push(S, T), (S = S.sibling);
      }
    }
    return f;
  }
  function nf(o, a) {
    if (!Ie) throw Error(l(363));
    (o = $h(o)), (o = zm(o, a)), (a = []), (o = Array.from(o));
    for (var f = 0; f < o.length; ) {
      var g = o[f++];
      if (g.tag === 5) oe(g) || a.push(g.stateNode);
      else for (g = g.child; g !== null; ) o.push(g), (g = g.sibling);
    }
    return a;
  }
  var Wx = Math.ceil,
    kl = c.ReactCurrentDispatcher,
    rf = c.ReactCurrentOwner,
    Qt = c.ReactCurrentBatchConfig,
    St = 0,
    en = null,
    tn = null,
    vn = 0,
    Qn = 0,
    zs = Tt(0),
    on = 0,
    Xo = null,
    ks = 0,
    Vl = 0,
    sf = 0,
    Yo = null,
    zn = null,
    of = 0,
    af = 1 / 0;
  function Vs() {
    af = fn() + 500;
  }
  var Hl = !1,
    lf = null,
    gr = null,
    Gl = !1,
    vr = null,
    Wl = 0,
    qo = 0,
    cf = null,
    Xl = -1,
    Yl = 0;
  function In() {
    return St & 6 ? fn() : Xl !== -1 ? Xl : (Xl = fn());
  }
  function _r(o) {
    return o.mode & 1
      ? St & 2 && vn !== 0
        ? vn & -vn
        : Ax.transition !== null
          ? (Yl === 0 && ((o = sl), (sl <<= 1), !(sl & 4194240) && (sl = 64), (Yl = o)), Yl)
          : ((o = It), o !== 0 ? o : ve())
      : 1;
  }
  function li(o, a, f) {
    if (50 < qo) throw ((qo = 0), (cf = null), Error(l(185)));
    var g = ql(o, a);
    return g === null
      ? null
      : (Po(g, a, f),
        (!(St & 2) || g !== en) &&
          (g === en && (!(St & 2) && (Vl |= a), on === 4 && xr(g, vn)),
          kn(g, f),
          a === 1 && St === 0 && !(o.mode & 1) && (Vs(), cl && Li())),
        g);
  }
  function ql(o, a) {
    o.lanes |= a;
    var f = o.alternate;
    for (f !== null && (f.lanes |= a), f = o, o = o.return; o !== null; )
      (o.childLanes |= a), (f = o.alternate), f !== null && (f.childLanes |= a), (f = o), (o = o.return);
    return f.tag === 3 ? f.stateNode : null;
  }
  function kn(o, a) {
    var f = o.callbackNode;
    vx(o, a);
    var g = al(o, o === en ? vn : 0);
    if (g === 0) f !== null && Tp(f), (o.callbackNode = null), (o.callbackPriority = 0);
    else if (((a = g & -g), o.callbackPriority !== a)) {
      if ((f != null && Tp(f), a === 1))
        o.tag === 0 ? Tx(Vm.bind(null, o)) : Ap(Vm.bind(null, o)),
          Me
            ? tt(function () {
                St === 0 && Li();
              })
            : gh(vh, Li),
          (f = null);
      else {
        switch (Ep(g)) {
          case 1:
            f = vh;
            break;
          case 4:
            f = Sx;
            break;
          case 16:
            f = _h;
            break;
          case 536870912:
            f = Mx;
            break;
          default:
            f = _h;
        }
        f = Km(f, km.bind(null, o));
      }
      (o.callbackPriority = a), (o.callbackNode = f);
    }
  }
  function km(o, a) {
    if (((Xl = -1), (Yl = 0), St & 6)) throw Error(l(327));
    var f = o.callbackNode;
    if (Xr() && o.callbackNode !== f) return null;
    var g = al(o, o === en ? vn : 0);
    if (g === 0) return null;
    if (g & 30 || g & o.expiredLanes || a) a = Zl(o, g);
    else {
      a = g;
      var S = St;
      St |= 2;
      var T = Wm();
      (en !== o || vn !== a) && (Vs(), Gr(o, a));
      do
        try {
          qx();
          break;
        } catch (V) {
          Gm(o, V);
        }
      while (!0);
      Sh(), (kl.current = T), (St = S), tn !== null ? (a = 0) : ((en = null), (vn = 0), (a = on));
    }
    if (a !== 0) {
      if ((a === 2 && ((S = dh(o)), S !== 0 && ((g = S), (a = uf(o, S)))), a === 1))
        throw ((f = Xo), Gr(o, 0), xr(o, g), kn(o, fn()), f);
      if (a === 6) xr(o, g);
      else {
        if (
          ((S = o.current.alternate),
          !(g & 30) &&
            !Xx(S) &&
            ((a = Zl(o, g)), a === 2 && ((T = dh(o)), T !== 0 && ((g = T), (a = uf(o, T)))), a === 1))
        )
          throw ((f = Xo), Gr(o, 0), xr(o, g), kn(o, fn()), f);
        switch (((o.finishedWork = S), (o.finishedLanes = g), a)) {
          case 0:
          case 1:
            throw Error(l(345));
          case 2:
            Wr(o, zn);
            break;
          case 3:
            if ((xr(o, g), (g & 130023424) === g && ((a = of + 500 - fn()), 10 < a))) {
              if (al(o, 0) !== 0) break;
              if (((S = o.suspendedLanes), (S & g) !== g)) {
                In(), (o.pingedLanes |= o.suspendedLanes & S);
                break;
              }
              o.timeoutHandle = xe(Wr.bind(null, o, zn), a);
              break;
            }
            Wr(o, zn);
            break;
          case 4:
            if ((xr(o, g), (g & 4194240) === g)) break;
            for (a = o.eventTimes, S = -1; 0 < g; ) {
              var B = 31 - Ht(g);
              (T = 1 << B), (B = a[B]), B > S && (S = B), (g &= ~T);
            }
            if (
              ((g = S),
              (g = fn() - g),
              (g =
                (120 > g
                  ? 120
                  : 480 > g
                    ? 480
                    : 1080 > g
                      ? 1080
                      : 1920 > g
                        ? 1920
                        : 3e3 > g
                          ? 3e3
                          : 4320 > g
                            ? 4320
                            : 1960 * Wx(g / 1960)) - g),
              10 < g)
            ) {
              o.timeoutHandle = xe(Wr.bind(null, o, zn), g);
              break;
            }
            Wr(o, zn);
            break;
          case 5:
            Wr(o, zn);
            break;
          default:
            throw Error(l(329));
        }
      }
    }
    return kn(o, fn()), o.callbackNode === f ? km.bind(null, o) : null;
  }
  function uf(o, a) {
    var f = Yo;
    return (
      o.current.memoizedState.isDehydrated && (Gr(o, a).flags |= 256),
      (o = Zl(o, a)),
      o !== 2 && ((a = zn), (zn = f), a !== null && hf(a)),
      o
    );
  }
  function hf(o) {
    zn === null ? (zn = o) : zn.push.apply(zn, o);
  }
  function Xx(o) {
    for (var a = o; ; ) {
      if (a.flags & 16384) {
        var f = a.updateQueue;
        if (f !== null && ((f = f.stores), f !== null))
          for (var g = 0; g < f.length; g++) {
            var S = f[g],
              T = S.getSnapshot;
            S = S.value;
            try {
              if (!Ii(T(), S)) return !1;
            } catch {
              return !1;
            }
          }
      }
      if (((f = a.child), a.subtreeFlags & 16384 && f !== null)) (f.return = a), (a = f);
      else {
        if (a === o) break;
        for (; a.sibling === null; ) {
          if (a.return === null || a.return === o) return !0;
          a = a.return;
        }
        (a.sibling.return = a.return), (a = a.sibling);
      }
    }
    return !0;
  }
  function xr(o, a) {
    for (a &= ~sf, a &= ~Vl, o.suspendedLanes |= a, o.pingedLanes &= ~a, o = o.expirationTimes; 0 < a; ) {
      var f = 31 - Ht(a),
        g = 1 << f;
      (o[f] = -1), (a &= ~g);
    }
  }
  function Vm(o) {
    if (St & 6) throw Error(l(327));
    Xr();
    var a = al(o, 0);
    if (!(a & 1)) return kn(o, fn()), null;
    var f = Zl(o, a);
    if (o.tag !== 0 && f === 2) {
      var g = dh(o);
      g !== 0 && ((a = g), (f = uf(o, g)));
    }
    if (f === 1) throw ((f = Xo), Gr(o, 0), xr(o, a), kn(o, fn()), f);
    if (f === 6) throw Error(l(345));
    return (o.finishedWork = o.current.alternate), (o.finishedLanes = a), Wr(o, zn), kn(o, fn()), null;
  }
  function Hm(o) {
    vr !== null && vr.tag === 0 && !(St & 6) && Xr();
    var a = St;
    St |= 1;
    var f = Qt.transition,
      g = It;
    try {
      if (((Qt.transition = null), (It = 1), o)) return o();
    } finally {
      (It = g), (Qt.transition = f), (St = a), !(St & 6) && Li();
    }
  }
  function ff() {
    (Qn = zs.current), et(zs);
  }
  function Gr(o, a) {
    (o.finishedWork = null), (o.finishedLanes = 0);
    var f = o.timeoutHandle;
    if ((f !== it && ((o.timeoutHandle = it), je(f)), tn !== null))
      for (f = tn.return; f !== null; ) {
        var g = f;
        switch ((Ch(g), g.tag)) {
          case 1:
            (g = g.type.childContextTypes), g != null && hn();
            break;
          case 3:
            Os(), et(Vt), et(Pe), Nh();
            break;
          case 5:
            Dh(g);
            break;
          case 4:
            Os();
            break;
          case 13:
            et(Wt);
            break;
          case 19:
            et(Wt);
            break;
          case 10:
            Mh(g.type._context);
            break;
          case 22:
          case 23:
            ff();
        }
        f = f.return;
      }
    if (
      ((en = o),
      (tn = o = yr(o.current, null)),
      (vn = Qn = a),
      (on = 0),
      (Xo = null),
      (sf = Vl = ks = 0),
      (zn = Yo = null),
      Di !== null)
    ) {
      for (a = 0; a < Di.length; a++)
        if (((f = Di[a]), (g = f.interleaved), g !== null)) {
          f.interleaved = null;
          var S = g.next,
            T = f.pending;
          if (T !== null) {
            var B = T.next;
            (T.next = S), (g.next = B);
          }
          f.pending = g;
        }
      Di = null;
    }
    return o;
  }
  function Gm(o, a) {
    do {
      var f = tn;
      try {
        if ((Sh(), (yl.current = Al), Sl)) {
          for (var g = qt.memoizedState; g !== null; ) {
            var S = g.queue;
            S !== null && (S.pending = null), (g = g.next);
          }
          Sl = !1;
        }
        if (
          ((Bs = 0), (dn = xn = qt = null), (Fo = !1), (Oo = 0), (rf.current = null), f === null || f.return === null)
        ) {
          (on = 1), (Xo = a), (tn = null);
          break;
        }
        e: {
          var T = o,
            B = f.return,
            V = f,
            ie = a;
          if (((a = vn), (V.flags |= 32768), ie !== null && typeof ie == "object" && typeof ie.then == "function")) {
            var ye = ie,
              ke = V,
              ht = ke.tag;
            if (!(ke.mode & 1) && (ht === 0 || ht === 11 || ht === 15)) {
              var $e = ke.alternate;
              $e
                ? ((ke.updateQueue = $e.updateQueue), (ke.memoizedState = $e.memoizedState), (ke.lanes = $e.lanes))
                : ((ke.updateQueue = null), (ke.memoizedState = null));
            }
            var Bt = um(B);
            if (Bt !== null) {
              (Bt.flags &= -257), hm(Bt, B, V, T, a), Bt.mode & 1 && cm(T, ye, a), (a = Bt), (ie = ye);
              var Je = a.updateQueue;
              if (Je === null) {
                var Mn = new Set();
                Mn.add(ie), (a.updateQueue = Mn);
              } else Je.add(ie);
              break e;
            } else {
              if (!(a & 1)) {
                cm(T, ye, a), df();
                break e;
              }
              ie = Error(l(426));
            }
          } else if (Gt && V.mode & 1) {
            var ui = um(B);
            if (ui !== null) {
              !(ui.flags & 65536) && (ui.flags |= 256), hm(ui, B, V, T, a), Ih(ie);
              break e;
            }
          }
          (T = ie), on !== 4 && (on = 2), Yo === null ? (Yo = [T]) : Yo.push(T), (ie = Hh(ie, V)), (V = B);
          do {
            switch (V.tag) {
              case 3:
                (V.flags |= 65536), (a &= -a), (V.lanes |= a);
                var J = am(V, ie, a);
                Rp(V, J);
                break e;
              case 1:
                T = ie;
                var W = V.type,
                  ee = V.stateNode;
                if (
                  !(V.flags & 128) &&
                  (typeof W.getDerivedStateFromError == "function" ||
                    (ee !== null && typeof ee.componentDidCatch == "function" && (gr === null || !gr.has(ee))))
                ) {
                  (V.flags |= 65536), (a &= -a), (V.lanes |= a);
                  var Le = lm(V, T, a);
                  Rp(V, Le);
                  break e;
                }
            }
            V = V.return;
          } while (V !== null);
        }
        Ym(f);
      } catch (Ze) {
        (a = Ze), tn === f && f !== null && (tn = f = f.return);
        continue;
      }
      break;
    } while (!0);
  }
  function Wm() {
    var o = kl.current;
    return (kl.current = Al), o === null ? Al : o;
  }
  function df() {
    (on === 0 || on === 3 || on === 2) && (on = 4),
      en === null || (!(ks & 268435455) && !(Vl & 268435455)) || xr(en, vn);
  }
  function Zl(o, a) {
    var f = St;
    St |= 2;
    var g = Wm();
    (en === o && vn === a) || Gr(o, a);
    do
      try {
        Yx();
        break;
      } catch (S) {
        Gm(o, S);
      }
    while (!0);
    if ((Sh(), (St = f), (kl.current = g), tn !== null)) throw Error(l(261));
    return (en = null), (vn = 0), on;
  }
  function Yx() {
    for (; tn !== null; ) Xm(tn);
  }
  function qx() {
    for (; tn !== null && !xx(); ) Xm(tn);
  }
  function Xm(o) {
    var a = Jm(o.alternate, o, Qn);
    (o.memoizedProps = o.pendingProps), a === null ? Ym(o) : (tn = a), (rf.current = null);
  }
  function Ym(o) {
    var a = o;
    do {
      var f = a.alternate;
      if (((o = a.return), a.flags & 32768)) {
        if (((f = zx(f, a)), f !== null)) {
          (f.flags &= 32767), (tn = f);
          return;
        }
        if (o !== null) (o.flags |= 32768), (o.subtreeFlags = 0), (o.deletions = null);
        else {
          (on = 6), (tn = null);
          return;
        }
      } else if (((f = Fx(f, a, Qn)), f !== null)) {
        tn = f;
        return;
      }
      if (((a = a.sibling), a !== null)) {
        tn = a;
        return;
      }
      tn = a = o;
    } while (a !== null);
    on === 0 && (on = 5);
  }
  function Wr(o, a) {
    var f = It,
      g = Qt.transition;
    try {
      (Qt.transition = null), (It = 1), Zx(o, a, f);
    } finally {
      (Qt.transition = g), (It = f);
    }
    return null;
  }
  function Zx(o, a, f) {
    do Xr();
    while (vr !== null);
    if (St & 6) throw Error(l(327));
    var g = o.finishedWork,
      S = o.finishedLanes;
    if (g === null) return null;
    if (((o.finishedWork = null), (o.finishedLanes = 0), g === o.current)) throw Error(l(177));
    (o.callbackNode = null), (o.callbackPriority = 0);
    var T = g.lanes | g.childLanes;
    if (
      (_x(o, T),
      o === en && ((tn = en = null), (vn = 0)),
      (!(g.subtreeFlags & 2064) && !(g.flags & 2064)) ||
        Gl ||
        ((Gl = !0),
        Km(_h, function () {
          return Xr(), null;
        })),
      (T = (g.flags & 15990) !== 0),
      g.subtreeFlags & 15990 || T)
    ) {
      (T = Qt.transition), (Qt.transition = null);
      var B = It;
      It = 1;
      var V = St;
      (St |= 4),
        (rf.current = null),
        Vx(o, g),
        Hx(o, g),
        te(o.containerInfo),
        (o.current = g),
        Gx(g),
        yx(),
        (St = V),
        (It = B),
        (Qt.transition = T);
    } else o.current = g;
    if (
      (Gl && ((Gl = !1), (vr = o), (Wl = S)),
      (T = o.pendingLanes),
      T === 0 && (gr = null),
      wx(g.stateNode),
      kn(o, fn()),
      a !== null)
    )
      for (f = o.onRecoverableError, g = 0; g < a.length; g++) f(a[g]);
    if (Hl) throw ((Hl = !1), (o = lf), (lf = null), o);
    return (
      Wl & 1 && o.tag !== 0 && Xr(),
      (T = o.pendingLanes),
      T & 1 ? (o === cf ? qo++ : ((qo = 0), (cf = o))) : (qo = 0),
      Li(),
      null
    );
  }
  function Xr() {
    if (vr !== null) {
      var o = Ep(Wl),
        a = Qt.transition,
        f = It;
      try {
        if (((Qt.transition = null), (It = 16 > o ? 16 : o), vr === null)) var g = !1;
        else {
          if (((o = vr), (vr = null), (Wl = 0), St & 6)) throw Error(l(331));
          var S = St;
          for (St |= 4, be = o.current; be !== null; ) {
            var T = be,
              B = T.child;
            if (be.flags & 16) {
              var V = T.deletions;
              if (V !== null) {
                for (var ie = 0; ie < V.length; ie++) {
                  var ye = V[ie];
                  for (be = ye; be !== null; ) {
                    var ke = be;
                    switch (ke.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Hr(8, ke, T);
                    }
                    var ht = ke.child;
                    if (ht !== null) (ht.return = ke), (be = ht);
                    else
                      for (; be !== null; ) {
                        ke = be;
                        var $e = ke.sibling,
                          Bt = ke.return;
                        if ((Pm(ke), ke === ye)) {
                          be = null;
                          break;
                        }
                        if ($e !== null) {
                          ($e.return = Bt), (be = $e);
                          break;
                        }
                        be = Bt;
                      }
                  }
                }
                var Je = T.alternate;
                if (Je !== null) {
                  var Mn = Je.child;
                  if (Mn !== null) {
                    Je.child = null;
                    do {
                      var ui = Mn.sibling;
                      (Mn.sibling = null), (Mn = ui);
                    } while (Mn !== null);
                  }
                }
                be = T;
              }
            }
            if (T.subtreeFlags & 2064 && B !== null) (B.return = T), (be = B);
            else
              e: for (; be !== null; ) {
                if (((T = be), T.flags & 2048))
                  switch (T.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Hr(9, T, T.return);
                  }
                var J = T.sibling;
                if (J !== null) {
                  (J.return = T.return), (be = J);
                  break e;
                }
                be = T.return;
              }
          }
          var W = o.current;
          for (be = W; be !== null; ) {
            B = be;
            var ee = B.child;
            if (B.subtreeFlags & 2064 && ee !== null) (ee.return = B), (be = ee);
            else
              e: for (B = W; be !== null; ) {
                if (((V = be), V.flags & 2048))
                  try {
                    switch (V.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Go(9, V);
                    }
                  } catch (Ze) {
                    Vn(V, V.return, Ze);
                  }
                if (V === B) {
                  be = null;
                  break e;
                }
                var Le = V.sibling;
                if (Le !== null) {
                  (Le.return = V.return), (be = Le);
                  break e;
                }
                be = V.return;
              }
          }
          if (((St = S), Li(), Pi && typeof Pi.onPostCommitFiberRoot == "function"))
            try {
              Pi.onPostCommitFiberRoot(ll, o);
            } catch {}
          g = !0;
        }
        return g;
      } finally {
        (It = f), (Qt.transition = a);
      }
    }
    return !1;
  }
  function qm(o, a, f) {
    (a = Hh(f, a)), (a = am(o, a, 1)), mr(o, a), (a = In()), (o = ql(o, 1)), o !== null && (Po(o, 1, a), kn(o, a));
  }
  function Vn(o, a, f) {
    if (o.tag === 3) qm(o, o, f);
    else
      for (; a !== null; ) {
        if (a.tag === 3) {
          qm(a, o, f);
          break;
        } else if (a.tag === 1) {
          var g = a.stateNode;
          if (
            typeof a.type.getDerivedStateFromError == "function" ||
            (typeof g.componentDidCatch == "function" && (gr === null || !gr.has(g)))
          ) {
            (o = Hh(f, o)),
              (o = lm(a, o, 1)),
              mr(a, o),
              (o = In()),
              (a = ql(a, 1)),
              a !== null && (Po(a, 1, o), kn(a, o));
            break;
          }
        }
        a = a.return;
      }
  }
  function Jx(o, a, f) {
    var g = o.pingCache;
    g !== null && g.delete(a),
      (a = In()),
      (o.pingedLanes |= o.suspendedLanes & f),
      en === o &&
        (vn & f) === f &&
        (on === 4 || (on === 3 && (vn & 130023424) === vn && 500 > fn() - of) ? Gr(o, 0) : (sf |= f)),
      kn(o, a);
  }
  function Zm(o, a) {
    a === 0 && (o.mode & 1 ? ((a = ol), (ol <<= 1), !(ol & 130023424) && (ol = 4194304)) : (a = 1));
    var f = In();
    (o = ql(o, a)), o !== null && (Po(o, a, f), kn(o, f));
  }
  function Kx(o) {
    var a = o.memoizedState,
      f = 0;
    a !== null && (f = a.retryLane), Zm(o, f);
  }
  function jx(o, a) {
    var f = 0;
    switch (o.tag) {
      case 13:
        var g = o.stateNode,
          S = o.memoizedState;
        S !== null && (f = S.retryLane);
        break;
      case 19:
        g = o.stateNode;
        break;
      default:
        throw Error(l(314));
    }
    g !== null && g.delete(a), Zm(o, f);
  }
  var Jm;
  Jm = function (o, a, f) {
    if (o !== null)
      if (o.memoizedProps !== a.pendingProps || Vt.current) jn = !0;
      else {
        if (!(o.lanes & f) && !(a.flags & 128)) return (jn = !1), Bx(o, a, f);
        jn = !!(o.flags & 131072);
      }
    else (jn = !1), Gt && a.flags & 1048576 && Np(a, vl, a.index);
    switch (((a.lanes = 0), a.tag)) {
      case 2:
        var g = a.type;
        o !== null && ((o.alternate = null), (a.alternate = null), (a.flags |= 2)), (o = a.pendingProps);
        var S = un(a, Pe.current);
        Is(a, f), (S = Oh(null, a, g, o, S, f));
        var T = Bh();
        return (
          (a.flags |= 1),
          typeof S == "object" && S !== null && typeof S.render == "function" && S.$$typeof === void 0
            ? ((a.tag = 1),
              (a.memoizedState = null),
              (a.updateQueue = null),
              jt(g) ? ((T = !0), Rn(a)) : (T = !1),
              (a.memoizedState = S.state !== null && S.state !== void 0 ? S.state : null),
              Eh(a),
              (S.updater = ml),
              (a.stateNode = S),
              (S._reactInternals = a),
              Ah(a, g, o, f),
              (a = Xh(null, a, g, !0, T, f)))
            : ((a.tag = 0), Gt && T && bh(a), Pn(null, a, S, f), (a = a.child)),
          a
        );
      case 16:
        g = a.elementType;
        e: {
          switch (
            (o !== null && ((o.alternate = null), (a.alternate = null), (a.flags |= 2)),
            (o = a.pendingProps),
            (S = g._init),
            (g = S(g._payload)),
            (a.type = g),
            (S = a.tag = $x(g)),
            (o = pi(g, o)),
            S)
          ) {
            case 0:
              a = Wh(null, a, g, o, f);
              break e;
            case 1:
              a = xm(null, a, g, o, f);
              break e;
            case 11:
              a = pm(null, a, g, o, f);
              break e;
            case 14:
              a = mm(null, a, g, pi(g.type, o), f);
              break e;
          }
          throw Error(l(306, g, ""));
        }
        return a;
      case 0:
        return (g = a.type), (S = a.pendingProps), (S = a.elementType === g ? S : pi(g, S)), Wh(o, a, g, S, f);
      case 1:
        return (g = a.type), (S = a.pendingProps), (S = a.elementType === g ? S : pi(g, S)), xm(o, a, g, S, f);
      case 3:
        e: {
          if ((ym(a), o === null)) throw Error(l(387));
          (g = a.pendingProps), (T = a.memoizedState), (S = T.element), Cp(o, a), pl(a, g, null, f);
          var B = a.memoizedState;
          if (((g = B.element), pe && T.isDehydrated))
            if (
              ((T = { element: g, isDehydrated: !1, cache: B.cache, transitions: B.transitions }),
              (a.updateQueue.baseState = T),
              (a.memoizedState = T),
              a.flags & 256)
            ) {
              (S = Error(l(423))), (a = Sm(o, a, g, f, S));
              break e;
            } else if (g !== S) {
              (S = Error(l(424))), (a = Sm(o, a, g, f, S));
              break e;
            } else
              for (
                pe && ((Kn = el(a.stateNode.containerInfo)), (Jn = a), (Gt = !0), (mi = null), (Io = !1)),
                  f = Vp(a, null, g, f),
                  a.child = f;
                f;

              )
                (f.flags = (f.flags & -3) | 4096), (f = f.sibling);
          else {
            if ((Us(), g === S)) {
              a = Ji(o, a, f);
              break e;
            }
            Pn(o, a, g, f);
          }
          a = a.child;
        }
        return a;
      case 5:
        return (
          Hp(a),
          o === null && Ph(a),
          (g = a.type),
          (S = a.pendingProps),
          (T = o !== null ? o.memoizedProps : null),
          (B = S.children),
          ge(g, S) ? (B = null) : T !== null && ge(g, T) && (a.flags |= 32),
          _m(o, a),
          Pn(o, a, B, f),
          a.child
        );
      case 6:
        return o === null && Ph(a), null;
      case 13:
        return Mm(o, a, f);
      case 4:
        return (
          Lh(a, a.stateNode.containerInfo),
          (g = a.pendingProps),
          o === null ? (a.child = Ns(a, null, g, f)) : Pn(o, a, g, f),
          a.child
        );
      case 11:
        return (g = a.type), (S = a.pendingProps), (S = a.elementType === g ? S : pi(g, S)), pm(o, a, g, S, f);
      case 7:
        return Pn(o, a, a.pendingProps, f), a.child;
      case 8:
        return Pn(o, a, a.pendingProps.children, f), a.child;
      case 12:
        return Pn(o, a, a.pendingProps.children, f), a.child;
      case 10:
        e: {
          if (
            ((g = a.type._context), (S = a.pendingProps), (T = a.memoizedProps), (B = S.value), bp(a, g, B), T !== null)
          )
            if (Ii(T.value, B)) {
              if (T.children === S.children && !Vt.current) {
                a = Ji(o, a, f);
                break e;
              }
            } else
              for (T = a.child, T !== null && (T.return = a); T !== null; ) {
                var V = T.dependencies;
                if (V !== null) {
                  B = T.child;
                  for (var ie = V.firstContext; ie !== null; ) {
                    if (ie.context === g) {
                      if (T.tag === 1) {
                        (ie = Xi(-1, f & -f)), (ie.tag = 2);
                        var ye = T.updateQueue;
                        if (ye !== null) {
                          ye = ye.shared;
                          var ke = ye.pending;
                          ke === null ? (ie.next = ie) : ((ie.next = ke.next), (ke.next = ie)), (ye.pending = ie);
                        }
                      }
                      (T.lanes |= f),
                        (ie = T.alternate),
                        ie !== null && (ie.lanes |= f),
                        wh(T.return, f, a),
                        (V.lanes |= f);
                      break;
                    }
                    ie = ie.next;
                  }
                } else if (T.tag === 10) B = T.type === a.type ? null : T.child;
                else if (T.tag === 18) {
                  if (((B = T.return), B === null)) throw Error(l(341));
                  (B.lanes |= f), (V = B.alternate), V !== null && (V.lanes |= f), wh(B, f, a), (B = T.sibling);
                } else B = T.child;
                if (B !== null) B.return = T;
                else
                  for (B = T; B !== null; ) {
                    if (B === a) {
                      B = null;
                      break;
                    }
                    if (((T = B.sibling), T !== null)) {
                      (T.return = B.return), (B = T);
                      break;
                    }
                    B = B.return;
                  }
                T = B;
              }
          Pn(o, a, S.children, f), (a = a.child);
        }
        return a;
      case 9:
        return (
          (S = a.type),
          (g = a.pendingProps.children),
          Is(a, f),
          (S = ii(S)),
          (g = g(S)),
          (a.flags |= 1),
          Pn(o, a, g, f),
          a.child
        );
      case 14:
        return (g = a.type), (S = pi(g, a.pendingProps)), (S = pi(g.type, S)), mm(o, a, g, S, f);
      case 15:
        return gm(o, a, a.type, a.pendingProps, f);
      case 17:
        return (
          (g = a.type),
          (S = a.pendingProps),
          (S = a.elementType === g ? S : pi(g, S)),
          o !== null && ((o.alternate = null), (a.alternate = null), (a.flags |= 2)),
          (a.tag = 1),
          jt(g) ? ((o = !0), Rn(a)) : (o = !1),
          Is(a, f),
          Dp(a, g, S),
          Ah(a, g, S, f),
          Xh(null, a, g, !0, o, f)
        );
      case 19:
        return Am(o, a, f);
      case 22:
        return vm(o, a, f);
    }
    throw Error(l(156, a.tag));
  };
  function Km(o, a) {
    return gh(o, a);
  }
  function Qx(o, a, f, g) {
    (this.tag = o),
      (this.key = f),
      (this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null),
      (this.index = 0),
      (this.ref = null),
      (this.pendingProps = a),
      (this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null),
      (this.mode = g),
      (this.subtreeFlags = this.flags = 0),
      (this.deletions = null),
      (this.childLanes = this.lanes = 0),
      (this.alternate = null);
  }
  function ci(o, a, f, g) {
    return new Qx(o, a, f, g);
  }
  function pf(o) {
    return (o = o.prototype), !(!o || !o.isReactComponent);
  }
  function $x(o) {
    if (typeof o == "function") return pf(o) ? 1 : 0;
    if (o != null) {
      if (((o = o.$$typeof), o === M)) return 11;
      if (o === w) return 14;
    }
    return 2;
  }
  function yr(o, a) {
    var f = o.alternate;
    return (
      f === null
        ? ((f = ci(o.tag, a, o.key, o.mode)),
          (f.elementType = o.elementType),
          (f.type = o.type),
          (f.stateNode = o.stateNode),
          (f.alternate = o),
          (o.alternate = f))
        : ((f.pendingProps = a), (f.type = o.type), (f.flags = 0), (f.subtreeFlags = 0), (f.deletions = null)),
      (f.flags = o.flags & 14680064),
      (f.childLanes = o.childLanes),
      (f.lanes = o.lanes),
      (f.child = o.child),
      (f.memoizedProps = o.memoizedProps),
      (f.memoizedState = o.memoizedState),
      (f.updateQueue = o.updateQueue),
      (a = o.dependencies),
      (f.dependencies = a === null ? null : { lanes: a.lanes, firstContext: a.firstContext }),
      (f.sibling = o.sibling),
      (f.index = o.index),
      (f.ref = o.ref),
      f
    );
  }
  function Jl(o, a, f, g, S, T) {
    var B = 2;
    if (((g = o), typeof o == "function")) pf(o) && (B = 1);
    else if (typeof o == "string") B = 5;
    else
      e: switch (o) {
        case d:
          return Yr(f.children, S, T, a);
        case p:
          (B = 8), (S |= 8);
          break;
        case m:
          return (o = ci(12, f, a, S | 2)), (o.elementType = m), (o.lanes = T), o;
        case y:
          return (o = ci(13, f, a, S)), (o.elementType = y), (o.lanes = T), o;
        case _:
          return (o = ci(19, f, a, S)), (o.elementType = _), (o.lanes = T), o;
        case A:
          return Kl(f, S, T, a);
        default:
          if (typeof o == "object" && o !== null)
            switch (o.$$typeof) {
              case v:
                B = 10;
                break e;
              case x:
                B = 9;
                break e;
              case M:
                B = 11;
                break e;
              case w:
                B = 14;
                break e;
              case E:
                (B = 16), (g = null);
                break e;
            }
          throw Error(l(130, o == null ? o : typeof o, ""));
      }
    return (a = ci(B, f, a, S)), (a.elementType = o), (a.type = g), (a.lanes = T), a;
  }
  function Yr(o, a, f, g) {
    return (o = ci(7, o, g, a)), (o.lanes = f), o;
  }
  function Kl(o, a, f, g) {
    return (o = ci(22, o, g, a)), (o.elementType = A), (o.lanes = f), (o.stateNode = {}), o;
  }
  function mf(o, a, f) {
    return (o = ci(6, o, null, a)), (o.lanes = f), o;
  }
  function gf(o, a, f) {
    return (
      (a = ci(4, o.children !== null ? o.children : [], o.key, a)),
      (a.lanes = f),
      (a.stateNode = { containerInfo: o.containerInfo, pendingChildren: null, implementation: o.implementation }),
      a
    );
  }
  function ey(o, a, f, g, S) {
    (this.tag = a),
      (this.containerInfo = o),
      (this.finishedWork = this.pingCache = this.current = this.pendingChildren = null),
      (this.timeoutHandle = it),
      (this.callbackNode = this.pendingContext = this.context = null),
      (this.callbackPriority = 0),
      (this.eventTimes = ph(0)),
      (this.expirationTimes = ph(-1)),
      (this.entangledLanes =
        this.finishedLanes =
        this.mutableReadLanes =
        this.expiredLanes =
        this.pingedLanes =
        this.suspendedLanes =
        this.pendingLanes =
          0),
      (this.entanglements = ph(0)),
      (this.identifierPrefix = g),
      (this.onRecoverableError = S),
      pe && (this.mutableSourceEagerHydrationData = null);
  }
  function jm(o, a, f, g, S, T, B, V, ie) {
    return (
      (o = new ey(o, a, f, V, ie)),
      a === 1 ? ((a = 1), T === !0 && (a |= 8)) : (a = 0),
      (T = ci(3, null, null, a)),
      (o.current = T),
      (T.stateNode = o),
      (T.memoizedState = { element: g, isDehydrated: f, cache: null, transitions: null }),
      Eh(T),
      o
    );
  }
  function Qm(o) {
    if (!o) return yt;
    o = o._reactInternals;
    e: {
      if (C(o) !== o || o.tag !== 1) throw Error(l(170));
      var a = o;
      do {
        switch (a.tag) {
          case 3:
            a = a.stateNode.context;
            break e;
          case 1:
            if (jt(a.type)) {
              a = a.stateNode.__reactInternalMemoizedMergedChildContext;
              break e;
            }
        }
        a = a.return;
      } while (a !== null);
      throw Error(l(171));
    }
    if (o.tag === 1) {
      var f = o.type;
      if (jt(f)) return Ft(o, f, a);
    }
    return a;
  }
  function $m(o) {
    var a = o._reactInternals;
    if (a === void 0)
      throw typeof o.render == "function" ? Error(l(188)) : ((o = Object.keys(o).join(",")), Error(l(268, o)));
    return (o = Y(a)), o === null ? null : o.stateNode;
  }
  function eg(o, a) {
    if (((o = o.memoizedState), o !== null && o.dehydrated !== null)) {
      var f = o.retryLane;
      o.retryLane = f !== 0 && f < a ? f : a;
    }
  }
  function vf(o, a) {
    eg(o, a), (o = o.alternate) && eg(o, a);
  }
  function ty(o) {
    return (o = Y(o)), o === null ? null : o.stateNode;
  }
  function ny() {
    return null;
  }
  return (
    (t.attemptContinuousHydration = function (o) {
      if (o.tag === 13) {
        var a = In();
        li(o, 134217728, a), vf(o, 134217728);
      }
    }),
    (t.attemptHydrationAtCurrentPriority = function (o) {
      if (o.tag === 13) {
        var a = In(),
          f = _r(o);
        li(o, f, a), vf(o, f);
      }
    }),
    (t.attemptSynchronousHydration = function (o) {
      switch (o.tag) {
        case 3:
          var a = o.stateNode;
          if (a.current.memoizedState.isDehydrated) {
            var f = Ro(a.pendingLanes);
            f !== 0 && (mh(a, f | 1), kn(a, fn()), !(St & 6) && (Vs(), Li()));
          }
          break;
        case 13:
          var g = In();
          Hm(function () {
            return li(o, 1, g);
          }),
            vf(o, 1);
      }
    }),
    (t.batchedUpdates = function (o, a) {
      var f = St;
      St |= 1;
      try {
        return o(a);
      } finally {
        (St = f), St === 0 && (Vs(), cl && Li());
      }
    }),
    (t.createComponentSelector = function (o) {
      return { $$typeof: Nl, value: o };
    }),
    (t.createContainer = function (o, a, f, g, S, T, B) {
      return jm(o, a, !1, null, f, g, S, T, B);
    }),
    (t.createHasPseudoClassSelector = function (o) {
      return { $$typeof: Fl, value: o };
    }),
    (t.createHydrationContainer = function (o, a, f, g, S, T, B, V, ie) {
      return (
        (o = jm(f, g, !0, o, S, T, B, V, ie)),
        (o.context = Qm(null)),
        (f = o.current),
        (g = In()),
        (S = _r(f)),
        (T = Xi(g, S)),
        (T.callback = a ?? null),
        mr(f, T),
        (o.current.lanes = S),
        Po(o, S, g),
        kn(o, g),
        o
      );
    }),
    (t.createPortal = function (o, a, f) {
      var g = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
      return { $$typeof: h, key: g == null ? null : "" + g, children: o, containerInfo: a, implementation: f };
    }),
    (t.createRoleSelector = function (o) {
      return { $$typeof: Ol, value: o };
    }),
    (t.createTestNameSelector = function (o) {
      return { $$typeof: Bl, value: o };
    }),
    (t.createTextSelector = function (o) {
      return { $$typeof: zl, value: o };
    }),
    (t.deferredUpdates = function (o) {
      var a = It,
        f = Qt.transition;
      try {
        return (Qt.transition = null), (It = 16), o();
      } finally {
        (It = a), (Qt.transition = f);
      }
    }),
    (t.discreteUpdates = function (o, a, f, g, S) {
      var T = It,
        B = Qt.transition;
      try {
        return (Qt.transition = null), (It = 1), o(a, f, g, S);
      } finally {
        (It = T), (Qt.transition = B), St === 0 && Vs();
      }
    }),
    (t.findAllNodes = nf),
    (t.findBoundingRects = function (o, a) {
      if (!Ie) throw Error(l(363));
      (a = nf(o, a)), (o = []);
      for (var f = 0; f < a.length; f++) o.push(R(a[f]));
      for (a = o.length - 1; 0 < a; a--) {
        f = o[a];
        for (var g = f.x, S = g + f.width, T = f.y, B = T + f.height, V = a - 1; 0 <= V; V--)
          if (a !== V) {
            var ie = o[V],
              ye = ie.x,
              ke = ye + ie.width,
              ht = ie.y,
              $e = ht + ie.height;
            if (g >= ye && T >= ht && S <= ke && B <= $e) {
              o.splice(a, 1);
              break;
            } else if (g !== ye || f.width !== ie.width || $e < T || ht > B) {
              if (!(T !== ht || f.height !== ie.height || ke < g || ye > S)) {
                ye > g && ((ie.width += ye - g), (ie.x = g)), ke < S && (ie.width = S - ye), o.splice(a, 1);
                break;
              }
            } else {
              ht > T && ((ie.height += ht - T), (ie.y = T)), $e < B && (ie.height = B - ht), o.splice(a, 1);
              break;
            }
          }
      }
      return o;
    }),
    (t.findHostInstance = $m),
    (t.findHostInstanceWithNoPortals = function (o) {
      return (o = D(o)), (o = o !== null ? K(o) : null), o === null ? null : o.stateNode;
    }),
    (t.findHostInstanceWithWarning = function (o) {
      return $m(o);
    }),
    (t.flushControlled = function (o) {
      var a = St;
      St |= 1;
      var f = Qt.transition,
        g = It;
      try {
        (Qt.transition = null), (It = 1), o();
      } finally {
        (It = g), (Qt.transition = f), (St = a), St === 0 && (Vs(), Li());
      }
    }),
    (t.flushPassiveEffects = Xr),
    (t.flushSync = Hm),
    (t.focusWithin = function (o, a) {
      if (!Ie) throw Error(l(363));
      for (o = $h(o), a = zm(o, a), a = Array.from(a), o = 0; o < a.length; ) {
        var f = a[o++];
        if (!oe(f)) {
          if (f.tag === 5 && le(f.stateNode)) return !0;
          for (f = f.child; f !== null; ) a.push(f), (f = f.sibling);
        }
      }
      return !1;
    }),
    (t.getCurrentUpdatePriority = function () {
      return It;
    }),
    (t.getFindAllNodesFailureDescription = function (o, a) {
      if (!Ie) throw Error(l(363));
      var f = 0,
        g = [];
      o = [$h(o), 0];
      for (var S = 0; S < o.length; ) {
        var T = o[S++],
          B = o[S++],
          V = a[B];
        if ((T.tag !== 5 || !oe(T)) && (ef(T, V) && (g.push(tf(V)), B++, B > f && (f = B)), B < a.length))
          for (T = T.child; T !== null; ) o.push(T, B), (T = T.sibling);
      }
      if (f < a.length) {
        for (o = []; f < a.length; f++) o.push(tf(a[f]));
        return (
          `findAllNodes was able to match part of the selector:
  ` +
          (g.join(" > ") +
            `

No matching component was found for:
  `) +
          o.join(" > ")
        );
      }
      return null;
    }),
    (t.getPublicRootInstance = function (o) {
      if (((o = o.current), !o.child)) return null;
      switch (o.child.tag) {
        case 5:
          return j(o.child.stateNode);
        default:
          return o.child.stateNode;
      }
    }),
    (t.injectIntoDevTools = function (o) {
      if (
        ((o = {
          bundleType: o.bundleType,
          version: o.version,
          rendererPackageName: o.rendererPackageName,
          rendererConfig: o.rendererConfig,
          overrideHookState: null,
          overrideHookStateDeletePath: null,
          overrideHookStateRenamePath: null,
          overrideProps: null,
          overridePropsDeletePath: null,
          overridePropsRenamePath: null,
          setErrorHandler: null,
          setSuspenseHandler: null,
          scheduleUpdate: null,
          currentDispatcherRef: c.ReactCurrentDispatcher,
          findHostInstanceByFiber: ty,
          findFiberByHostInstance: o.findFiberByHostInstance || ny,
          findHostInstancesForRefresh: null,
          scheduleRefresh: null,
          scheduleRoot: null,
          setRefreshHandler: null,
          getCurrentFiber: null,
          reconcilerVersion: "18.0.0-fc46dba67-20220329",
        }),
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
      )
        o = !1;
      else {
        var a = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (a.isDisabled || !a.supportsFiber) o = !0;
        else {
          try {
            (ll = a.inject(o)), (Pi = a);
          } catch {}
          o = !!a.checkDCE;
        }
      }
      return o;
    }),
    (t.isAlreadyRendering = function () {
      return !1;
    }),
    (t.observeVisibleRects = function (o, a, f, g) {
      if (!Ie) throw Error(l(363));
      o = nf(o, a);
      var S = We(o, f, g).disconnect;
      return {
        disconnect: function () {
          S();
        },
      };
    }),
    (t.registerMutableSourceForHydration = function (o, a) {
      var f = a._getVersion;
      (f = f(a._source)),
        o.mutableSourceEagerHydrationData == null
          ? (o.mutableSourceEagerHydrationData = [a, f])
          : o.mutableSourceEagerHydrationData.push(a, f);
    }),
    (t.runWithPriority = function (o, a) {
      var f = It;
      try {
        return (It = o), a();
      } finally {
        It = f;
      }
    }),
    (t.shouldError = function () {
      return null;
    }),
    (t.shouldSuspend = function () {
      return !1;
    }),
    (t.updateContainer = function (o, a, f, g) {
      var S = a.current,
        T = In(),
        B = _r(S);
      return (
        (f = Qm(f)),
        a.context === null ? (a.context = f) : (a.pendingContext = f),
        (a = Xi(T, B)),
        (a.payload = { element: o }),
        (g = g === void 0 ? null : g),
        g !== null && (a.callback = g),
        mr(S, a),
        (o = li(S, B, T)),
        o !== null && dl(o, S, B),
        B
      );
    }),
    t
  );
};
Q_.exports = Sb;
var Mb = Q_.exports;
const wb = ry(Mb),
  Mp = {},
  Eb = (r) => void Object.assign(Mp, r);
function Tb(r, e) {
  function t(d, { args: p = [], attach: m, ...v }, x) {
    let M = `${d[0].toUpperCase()}${d.slice(1)}`,
      y;
    if (d === "primitive") {
      if (v.object === void 0) throw new Error("R3F: Primitives without 'object' are invalid!");
      const _ = v.object;
      y = lo(_, { type: d, root: x, attach: m, primitive: !0 });
    } else {
      const _ = Mp[M];
      if (!_)
        throw new Error(
          `R3F: ${M} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`
        );
      if (!Array.isArray(p)) throw new Error("R3F: The args prop must be an array!");
      y = lo(new _(...p), { type: d, root: x, attach: m, memoizedProps: { args: p } });
    }
    return (
      y.__r3f.attach === void 0 &&
        (y.isBufferGeometry ? (y.__r3f.attach = "geometry") : y.isMaterial && (y.__r3f.attach = "material")),
      M !== "inject" && ld(y, v),
      y
    );
  }
  function n(d, p) {
    let m = !1;
    if (p) {
      var v, x;
      (v = p.__r3f) != null && v.attach
        ? ad(d, p, p.__r3f.attach)
        : p.isObject3D && d.isObject3D && (d.add(p), (m = !0)),
        m || (x = d.__r3f) == null || x.objects.push(p),
        p.__r3f || lo(p, {}),
        (p.__r3f.parent = d),
        Ld(p),
        co(p);
    }
  }
  function i(d, p, m) {
    let v = !1;
    if (p) {
      var x, M;
      if ((x = p.__r3f) != null && x.attach) ad(d, p, p.__r3f.attach);
      else if (p.isObject3D && d.isObject3D) {
        (p.parent = d), p.dispatchEvent({ type: "added" }), d.dispatchEvent({ type: "childadded", child: p });
        const y = d.children.filter((w) => w !== p),
          _ = y.indexOf(m);
        (d.children = [...y.slice(0, _), p, ...y.slice(_)]), (v = !0);
      }
      v || (M = d.__r3f) == null || M.objects.push(p), p.__r3f || lo(p, {}), (p.__r3f.parent = d), Ld(p), co(p);
    }
  }
  function s(d, p, m = !1) {
    d && [...d].forEach((v) => l(p, v, m));
  }
  function l(d, p, m) {
    if (p) {
      var v, x, M;
      if (
        (p.__r3f && (p.__r3f.parent = null),
        (v = d.__r3f) != null && v.objects && (d.__r3f.objects = d.__r3f.objects.filter((A) => A !== p)),
        (x = p.__r3f) != null && x.attach)
      )
        V0(d, p, p.__r3f.attach);
      else if (p.isObject3D && d.isObject3D) {
        var y;
        d.remove(p), (y = p.__r3f) != null && y.root && Lb(Yc(p), p);
      }
      const w = (M = p.__r3f) == null ? void 0 : M.primitive,
        E = !w && (m === void 0 ? p.dispose !== null : m);
      if (!w) {
        var _;
        s((_ = p.__r3f) == null ? void 0 : _.objects, p, E), s(p.children, p, E);
      }
      if ((delete p.__r3f, E && p.dispose && p.type !== "Scene")) {
        const A = () => {
          try {
            p.dispose();
          } catch {}
        };
        typeof IS_REACT_ACT_ENVIRONMENT > "u" ? Pd.unstable_scheduleCallback(Pd.unstable_IdlePriority, A) : A();
      }
      co(d);
    }
  }
  function c(d, p, m, v) {
    var x;
    const M = (x = d.__r3f) == null ? void 0 : x.parent;
    if (!M) return;
    const y = t(p, m, d.__r3f.root);
    if (d.children) {
      for (const _ of d.children) _.__r3f && n(y, _);
      d.children = d.children.filter((_) => !_.__r3f);
    }
    d.__r3f.objects.forEach((_) => n(y, _)),
      (d.__r3f.objects = []),
      d.__r3f.autoRemovedBeforeAppend || l(M, d),
      y.parent && (y.__r3f.autoRemovedBeforeAppend = !0),
      n(M, y),
      y.raycast && y.__r3f.eventCount && Yc(y).getState().internal.interaction.push(y),
      [v, v.alternate].forEach((_) => {
        _ !== null && ((_.stateNode = y), _.ref && (typeof _.ref == "function" ? _.ref(y) : (_.ref.current = y)));
      });
  }
  const u = () => {};
  return {
    reconciler: wb({
      createInstance: t,
      removeChild: l,
      appendChild: n,
      appendInitialChild: n,
      insertBefore: i,
      supportsMutation: !0,
      isPrimaryRenderer: !1,
      supportsPersistence: !1,
      supportsHydration: !1,
      noTimeout: -1,
      appendChildToContainer: (d, p) => {
        if (!p) return;
        const m = d.getState().scene;
        m.__r3f && ((m.__r3f.root = d), n(m, p));
      },
      removeChildFromContainer: (d, p) => {
        p && l(d.getState().scene, p);
      },
      insertInContainerBefore: (d, p, m) => {
        if (!p || !m) return;
        const v = d.getState().scene;
        v.__r3f && i(v, p, m);
      },
      getRootHostContext: () => null,
      getChildHostContext: (d) => d,
      finalizeInitialChildren(d) {
        var p;
        return !!((p = d == null ? void 0 : d.__r3f) != null ? p : {}).handlers;
      },
      prepareUpdate(d, p, m, v) {
        var x;
        if (((x = d == null ? void 0 : d.__r3f) != null ? x : {}).primitive && v.object && v.object !== d) return [!0];
        {
          const { args: y = [], children: _, ...w } = v,
            { args: E = [], children: A, ...O } = m;
          if (!Array.isArray(y)) throw new Error("R3F: the args prop must be an array!");
          if (y.some((L, F) => L !== E[F])) return [!0];
          const P = ax(d, w, O, !0);
          return P.changes.length ? [!1, P] : null;
        }
      },
      commitUpdate(d, [p, m], v, x, M, y) {
        p ? c(d, v, M, y) : ld(d, m);
      },
      commitMount(d, p, m, v) {
        var x;
        const M = (x = d.__r3f) != null ? x : {};
        d.raycast && M.handlers && M.eventCount && Yc(d).getState().internal.interaction.push(d);
      },
      getPublicInstance: (d) => d,
      prepareForCommit: () => null,
      preparePortalMount: (d) => lo(d.getState().scene),
      resetAfterCommit: () => {},
      shouldSetTextContent: () => !1,
      clearContainer: () => !1,
      hideInstance(d) {
        var p;
        const { attach: m, parent: v } = (p = d.__r3f) != null ? p : {};
        m && v && V0(v, d, m), d.isObject3D && (d.visible = !1), co(d);
      },
      unhideInstance(d, p) {
        var m;
        const { attach: v, parent: x } = (m = d.__r3f) != null ? m : {};
        v && x && ad(x, d, v), ((d.isObject3D && p.visible == null) || p.visible) && (d.visible = !0), co(d);
      },
      createTextInstance: u,
      hideTextInstance: u,
      unhideTextInstance: u,
      getCurrentEventPriority: () => (e ? e() : go.DefaultEventPriority),
      beforeActiveInstanceBlur: () => {},
      afterActiveInstanceBlur: () => {},
      detachDeletedInstance: () => {},
      now:
        typeof performance < "u" && zt.fun(performance.now) ? performance.now : zt.fun(Date.now) ? Date.now : () => 0,
      scheduleTimeout: zt.fun(setTimeout) ? setTimeout : void 0,
      cancelTimeout: zt.fun(clearTimeout) ? clearTimeout : void 0,
    }),
    applyProps: ld,
  };
}
var O0, B0;
const od = (r) => "colorSpace" in r || "outputColorSpace" in r,
  tx = () => {
    var r;
    return (r = Mp.ColorManagement) != null ? r : null;
  },
  nx = (r) => r && r.isOrthographicCamera,
  Ab = (r) => r && r.hasOwnProperty("current"),
  Ka =
    typeof window < "u" &&
    (((O0 = window.document) != null && O0.createElement) ||
      ((B0 = window.navigator) == null ? void 0 : B0.product) === "ReactNative")
      ? Ke.useLayoutEffect
      : Ke.useEffect;
function ix(r) {
  const e = Ke.useRef(r);
  return Ka(() => void (e.current = r), [r]), e;
}
function bb({ set: r }) {
  return Ka(() => (r(new Promise(() => null)), () => r(!1)), [r]), null;
}
class rx extends Ke.Component {
  constructor(...e) {
    super(...e), (this.state = { error: !1 });
  }
  componentDidCatch(e) {
    this.props.set(e);
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}
rx.getDerivedStateFromError = () => ({ error: !0 });
const sx = "__default",
  z0 = new Map(),
  Cb = (r) => r && !!r.memoized && !!r.changes;
function ox(r) {
  var e;
  const t = typeof window < "u" ? ((e = window.devicePixelRatio) != null ? e : 2) : 1;
  return Array.isArray(r) ? Math.min(Math.max(r[0], t), r[1]) : r;
}
const oa = (r) => {
  var e;
  return (e = r.__r3f) == null ? void 0 : e.root.getState();
};
function Yc(r) {
  let e = r.__r3f.root;
  for (; e.getState().previousRoot; ) e = e.getState().previousRoot;
  return e;
}
const zt = {
  obj: (r) => r === Object(r) && !zt.arr(r) && typeof r != "function",
  fun: (r) => typeof r == "function",
  str: (r) => typeof r == "string",
  num: (r) => typeof r == "number",
  boo: (r) => typeof r == "boolean",
  und: (r) => r === void 0,
  arr: (r) => Array.isArray(r),
  equ(r, e, { arrays: t = "shallow", objects: n = "reference", strict: i = !0 } = {}) {
    if (typeof r != typeof e || !!r != !!e) return !1;
    if (zt.str(r) || zt.num(r) || zt.boo(r)) return r === e;
    const s = zt.obj(r);
    if (s && n === "reference") return r === e;
    const l = zt.arr(r);
    if (l && t === "reference") return r === e;
    if ((l || s) && r === e) return !0;
    let c;
    for (c in r) if (!(c in e)) return !1;
    if (s && t === "shallow" && n === "shallow") {
      for (c in i ? e : r) if (!zt.equ(r[c], e[c], { strict: i, objects: "reference" })) return !1;
    } else for (c in i ? e : r) if (r[c] !== e[c]) return !1;
    if (zt.und(c)) {
      if ((l && r.length === 0 && e.length === 0) || (s && Object.keys(r).length === 0 && Object.keys(e).length === 0))
        return !0;
      if (r !== e) return !1;
    }
    return !0;
  },
};
function Rb(r) {
  r.dispose && r.type !== "Scene" && r.dispose();
  for (const e in r) e.dispose == null || e.dispose(), delete r[e];
}
function lo(r, e) {
  const t = r;
  return (
    (t.__r3f = {
      type: "",
      root: null,
      previousAttach: null,
      memoizedProps: {},
      eventCount: 0,
      handlers: {},
      objects: [],
      parent: null,
      ...e,
    }),
    r
  );
}
function Id(r, e) {
  let t = r;
  if (e.includes("-")) {
    const n = e.split("-"),
      i = n.pop();
    return (t = n.reduce((s, l) => s[l], r)), { target: t, key: i };
  } else return { target: t, key: e };
}
const k0 = /-\d+$/;
function ad(r, e, t) {
  if (zt.str(t)) {
    if (k0.test(t)) {
      const s = t.replace(k0, ""),
        { target: l, key: c } = Id(r, s);
      Array.isArray(l[c]) || (l[c] = []);
    }
    const { target: n, key: i } = Id(r, t);
    (e.__r3f.previousAttach = n[i]), (n[i] = e);
  } else e.__r3f.previousAttach = t(r, e);
}
function V0(r, e, t) {
  var n, i;
  if (zt.str(t)) {
    const { target: s, key: l } = Id(r, t),
      c = e.__r3f.previousAttach;
    c === void 0 ? delete s[l] : (s[l] = c);
  } else (n = e.__r3f) == null || n.previousAttach == null || n.previousAttach(r, e);
  (i = e.__r3f) == null || delete i.previousAttach;
}
function ax(r, { children: e, key: t, ref: n, ...i }, { children: s, key: l, ref: c, ...u } = {}, h = !1) {
  const d = r.__r3f,
    p = Object.entries(i),
    m = [];
  if (h) {
    const x = Object.keys(u);
    for (let M = 0; M < x.length; M++) i.hasOwnProperty(x[M]) || p.unshift([x[M], sx + "remove"]);
  }
  p.forEach(([x, M]) => {
    var y;
    if (((y = r.__r3f) != null && y.primitive && x === "object") || zt.equ(M, u[x])) return;
    if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(x)) return m.push([x, M, !0, []]);
    let _ = [];
    x.includes("-") && (_ = x.split("-")), m.push([x, M, !1, _]);
    for (const w in i) {
      const E = i[w];
      w.startsWith(`${x}-`) && m.push([w, E, !1, w.split("-")]);
    }
  });
  const v = { ...i };
  return (
    d != null && d.memoizedProps && d != null && d.memoizedProps.args && (v.args = d.memoizedProps.args),
    d != null && d.memoizedProps && d != null && d.memoizedProps.attach && (v.attach = d.memoizedProps.attach),
    { memoized: v, changes: m }
  );
}
function ld(r, e) {
  var t;
  const n = r.__r3f,
    i = n == null ? void 0 : n.root,
    s = i == null || i.getState == null ? void 0 : i.getState(),
    { memoized: l, changes: c } = Cb(e) ? e : ax(r, e),
    u = n == null ? void 0 : n.eventCount;
  r.__r3f && (r.__r3f.memoizedProps = l);
  for (let m = 0; m < c.length; m++) {
    let [v, x, M, y] = c[m];
    if (od(r)) {
      const A = "srgb",
        O = "srgb-linear";
      v === "encoding"
        ? ((v = "colorSpace"), (x = x === 3001 ? A : O))
        : v === "outputEncoding" && ((v = "outputColorSpace"), (x = x === 3001 ? A : O));
    }
    let _ = r,
      w = _[v];
    if (y.length && ((w = y.reduce((E, A) => E[A], r)), !(w && w.set))) {
      const [E, ...A] = y.reverse();
      (_ = A.reverse().reduce((O, P) => O[P], r)), (v = E);
    }
    if (x === sx + "remove")
      if (_.constructor) {
        let E = z0.get(_.constructor);
        E || ((E = new _.constructor()), z0.set(_.constructor, E)), (x = E[v]);
      } else x = 0;
    if (M && n) x ? (n.handlers[v] = x) : delete n.handlers[v], (n.eventCount = Object.keys(n.handlers).length);
    else if (w && w.set && (w.copy || w instanceof gs)) {
      if (Array.isArray(x)) w.fromArray ? w.fromArray(x) : w.set(...x);
      else if (w.copy && x && x.constructor && w.constructor === x.constructor) w.copy(x);
      else if (x !== void 0) {
        var h;
        const E = (h = w) == null ? void 0 : h.isColor;
        !E && w.setScalar ? w.setScalar(x) : w instanceof gs && x instanceof gs ? (w.mask = x.mask) : w.set(x),
          !tx() && s && !s.linear && E && w.convertSRGBToLinear();
      }
    } else {
      var d;
      if (((_[v] = x), (d = _[v]) != null && d.isTexture && _[v].format === An && _[v].type === Mi && s)) {
        const E = _[v];
        od(E) && od(s.gl) ? (E.colorSpace = s.gl.outputColorSpace) : (E.encoding = s.gl.outputEncoding);
      }
    }
    co(r);
  }
  if (n && n.parent && r.raycast && u !== n.eventCount) {
    const m = Yc(r).getState().internal,
      v = m.interaction.indexOf(r);
    v > -1 && m.interaction.splice(v, 1), n.eventCount && m.interaction.push(r);
  }
  return !(c.length === 1 && c[0][0] === "onUpdate") && c.length && (t = r.__r3f) != null && t.parent && Ld(r), r;
}
function co(r) {
  var e, t;
  const n = (e = r.__r3f) == null || (t = e.root) == null || t.getState == null ? void 0 : t.getState();
  n && n.internal.frames === 0 && n.invalidate();
}
function Ld(r) {
  r.onUpdate == null || r.onUpdate(r);
}
function Pb(r, e) {
  r.manual ||
    (nx(r)
      ? ((r.left = e.width / -2), (r.right = e.width / 2), (r.top = e.height / 2), (r.bottom = e.height / -2))
      : (r.aspect = e.width / e.height),
    r.updateProjectionMatrix(),
    r.updateMatrixWorld());
}
function Hc(r) {
  return (r.eventObject || r.object).uuid + "/" + r.index + r.instanceId;
}
function Ib() {
  var r;
  const e = (typeof self < "u" && self) || (typeof window < "u" && window);
  if (!e) return go.DefaultEventPriority;
  switch ((r = e.event) == null ? void 0 : r.type) {
    case "click":
    case "contextmenu":
    case "dblclick":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
      return go.DiscreteEventPriority;
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "pointerenter":
    case "pointerleave":
    case "wheel":
      return go.ContinuousEventPriority;
    default:
      return go.DefaultEventPriority;
  }
}
function lx(r, e, t, n) {
  const i = t.get(e);
  i && (t.delete(e), t.size === 0 && (r.delete(n), i.target.releasePointerCapture(n)));
}
function Lb(r, e) {
  const { internal: t } = r.getState();
  (t.interaction = t.interaction.filter((n) => n !== e)),
    (t.initialHits = t.initialHits.filter((n) => n !== e)),
    t.hovered.forEach((n, i) => {
      (n.eventObject === e || n.object === e) && t.hovered.delete(i);
    }),
    t.capturedMap.forEach((n, i) => {
      lx(t.capturedMap, e, n, i);
    });
}
function Db(r) {
  function e(u) {
    const { internal: h } = r.getState(),
      d = u.offsetX - h.initialClick[0],
      p = u.offsetY - h.initialClick[1];
    return Math.round(Math.sqrt(d * d + p * p));
  }
  function t(u) {
    return u.filter((h) =>
      ["Move", "Over", "Enter", "Out", "Leave"].some((d) => {
        var p;
        return (p = h.__r3f) == null ? void 0 : p.handlers["onPointer" + d];
      })
    );
  }
  function n(u, h) {
    const d = r.getState(),
      p = new Set(),
      m = [],
      v = h ? h(d.internal.interaction) : d.internal.interaction;
    for (let _ = 0; _ < v.length; _++) {
      const w = oa(v[_]);
      w && (w.raycaster.camera = void 0);
    }
    d.previousRoot || d.events.compute == null || d.events.compute(u, d);
    function x(_) {
      const w = oa(_);
      if (!w || !w.events.enabled || w.raycaster.camera === null) return [];
      if (w.raycaster.camera === void 0) {
        var E;
        w.events.compute == null || w.events.compute(u, w, (E = w.previousRoot) == null ? void 0 : E.getState()),
          w.raycaster.camera === void 0 && (w.raycaster.camera = null);
      }
      return w.raycaster.camera ? w.raycaster.intersectObject(_, !0) : [];
    }
    let M = v
      .flatMap(x)
      .sort((_, w) => {
        const E = oa(_.object),
          A = oa(w.object);
        return !E || !A ? _.distance - w.distance : A.events.priority - E.events.priority || _.distance - w.distance;
      })
      .filter((_) => {
        const w = Hc(_);
        return p.has(w) ? !1 : (p.add(w), !0);
      });
    d.events.filter && (M = d.events.filter(M, d));
    for (const _ of M) {
      let w = _.object;
      for (; w; ) {
        var y;
        (y = w.__r3f) != null && y.eventCount && m.push({ ..._, eventObject: w }), (w = w.parent);
      }
    }
    if ("pointerId" in u && d.internal.capturedMap.has(u.pointerId))
      for (let _ of d.internal.capturedMap.get(u.pointerId).values())
        p.has(Hc(_.intersection)) || m.push(_.intersection);
    return m;
  }
  function i(u, h, d, p) {
    const m = r.getState();
    if (u.length) {
      const v = { stopped: !1 };
      for (const x of u) {
        const M = oa(x.object) || m,
          { raycaster: y, pointer: _, camera: w, internal: E } = M,
          A = new N(_.x, _.y, 0).unproject(w),
          O = (b) => {
            var D, Y;
            return (D = (Y = E.capturedMap.get(b)) == null ? void 0 : Y.has(x.eventObject)) != null ? D : !1;
          },
          P = (b) => {
            const D = { intersection: x, target: h.target };
            E.capturedMap.has(b)
              ? E.capturedMap.get(b).set(x.eventObject, D)
              : E.capturedMap.set(b, new Map([[x.eventObject, D]])),
              h.target.setPointerCapture(b);
          },
          L = (b) => {
            const D = E.capturedMap.get(b);
            D && lx(E.capturedMap, x.eventObject, D, b);
          };
        let F = {};
        for (let b in h) {
          let D = h[b];
          typeof D != "function" && (F[b] = D);
        }
        let C = {
          ...x,
          ...F,
          pointer: _,
          intersections: u,
          stopped: v.stopped,
          delta: d,
          unprojectedPoint: A,
          ray: y.ray,
          camera: w,
          stopPropagation() {
            const b = "pointerId" in h && E.capturedMap.get(h.pointerId);
            if (
              (!b || b.has(x.eventObject)) &&
              ((C.stopped = v.stopped = !0),
              E.hovered.size && Array.from(E.hovered.values()).find((D) => D.eventObject === x.eventObject))
            ) {
              const D = u.slice(0, u.indexOf(x));
              s([...D, x]);
            }
          },
          target: { hasPointerCapture: O, setPointerCapture: P, releasePointerCapture: L },
          currentTarget: { hasPointerCapture: O, setPointerCapture: P, releasePointerCapture: L },
          nativeEvent: h,
        };
        if ((p(C), v.stopped === !0)) break;
      }
    }
    return u;
  }
  function s(u) {
    const { internal: h } = r.getState();
    for (const d of h.hovered.values())
      if (!u.length || !u.find((p) => p.object === d.object && p.index === d.index && p.instanceId === d.instanceId)) {
        const m = d.eventObject.__r3f,
          v = m == null ? void 0 : m.handlers;
        if ((h.hovered.delete(Hc(d)), m != null && m.eventCount)) {
          const x = { ...d, intersections: u };
          v.onPointerOut == null || v.onPointerOut(x), v.onPointerLeave == null || v.onPointerLeave(x);
        }
      }
  }
  function l(u, h) {
    for (let d = 0; d < h.length; d++) {
      const p = h[d].__r3f;
      p == null || p.handlers.onPointerMissed == null || p.handlers.onPointerMissed(u);
    }
  }
  function c(u) {
    switch (u) {
      case "onPointerLeave":
      case "onPointerCancel":
        return () => s([]);
      case "onLostPointerCapture":
        return (h) => {
          const { internal: d } = r.getState();
          "pointerId" in h &&
            d.capturedMap.has(h.pointerId) &&
            requestAnimationFrame(() => {
              d.capturedMap.has(h.pointerId) && (d.capturedMap.delete(h.pointerId), s([]));
            });
        };
    }
    return function (d) {
      const { onPointerMissed: p, internal: m } = r.getState();
      m.lastEvent.current = d;
      const v = u === "onPointerMove",
        x = u === "onClick" || u === "onContextMenu" || u === "onDoubleClick",
        y = n(d, v ? t : void 0),
        _ = x ? e(d) : 0;
      u === "onPointerDown" &&
        ((m.initialClick = [d.offsetX, d.offsetY]), (m.initialHits = y.map((E) => E.eventObject))),
        x && !y.length && _ <= 2 && (l(d, m.interaction), p && p(d)),
        v && s(y);
      function w(E) {
        const A = E.eventObject,
          O = A.__r3f,
          P = O == null ? void 0 : O.handlers;
        if (O != null && O.eventCount)
          if (v) {
            if (P.onPointerOver || P.onPointerEnter || P.onPointerOut || P.onPointerLeave) {
              const L = Hc(E),
                F = m.hovered.get(L);
              F
                ? F.stopped && E.stopPropagation()
                : (m.hovered.set(L, E),
                  P.onPointerOver == null || P.onPointerOver(E),
                  P.onPointerEnter == null || P.onPointerEnter(E));
            }
            P.onPointerMove == null || P.onPointerMove(E);
          } else {
            const L = P[u];
            L
              ? (!x || m.initialHits.includes(A)) &&
                (l(
                  d,
                  m.interaction.filter((F) => !m.initialHits.includes(F))
                ),
                L(E))
              : x &&
                m.initialHits.includes(A) &&
                l(
                  d,
                  m.interaction.filter((F) => !m.initialHits.includes(F))
                );
          }
      }
      i(y, d, _, w);
    };
  }
  return { handlePointer: c };
}
const cx = (r) => !!(r != null && r.render),
  ux = Ke.createContext(null),
  Ub = (r, e) => {
    const t = yb((c, u) => {
        const h = new N(),
          d = new N(),
          p = new N();
        function m(_ = u().camera, w = d, E = u().size) {
          const { width: A, height: O, top: P, left: L } = E,
            F = A / O;
          w.isVector3 ? p.copy(w) : p.set(...w);
          const C = _.getWorldPosition(h).distanceTo(p);
          if (nx(_))
            return { width: A / _.zoom, height: O / _.zoom, top: P, left: L, factor: 1, distance: C, aspect: F };
          {
            const b = (_.fov * Math.PI) / 180,
              D = 2 * Math.tan(b / 2) * C,
              Y = D * (A / O);
            return { width: Y, height: D, top: P, left: L, factor: A / Y, distance: C, aspect: F };
          }
        }
        let v;
        const x = (_) => c((w) => ({ performance: { ...w.performance, current: _ } })),
          M = new fe();
        return {
          set: c,
          get: u,
          gl: null,
          camera: null,
          raycaster: null,
          events: { priority: 1, enabled: !0, connected: !1 },
          xr: null,
          scene: null,
          invalidate: (_ = 1) => r(u(), _),
          advance: (_, w) => e(_, w, u()),
          legacy: !1,
          linear: !1,
          flat: !1,
          controls: null,
          clock: new vp(),
          pointer: M,
          mouse: M,
          frameloop: "always",
          onPointerMissed: void 0,
          performance: {
            current: 1,
            min: 0.5,
            max: 1,
            debounce: 200,
            regress: () => {
              const _ = u();
              v && clearTimeout(v),
                _.performance.current !== _.performance.min && x(_.performance.min),
                (v = setTimeout(() => x(u().performance.max), _.performance.debounce));
            },
          },
          size: { width: 0, height: 0, top: 0, left: 0, updateStyle: !1 },
          viewport: {
            initialDpr: 0,
            dpr: 0,
            width: 0,
            height: 0,
            top: 0,
            left: 0,
            aspect: 0,
            distance: 0,
            factor: 0,
            getCurrentViewport: m,
          },
          setEvents: (_) => c((w) => ({ ...w, events: { ...w.events, ..._ } })),
          setSize: (_, w, E, A, O) => {
            const P = u().camera,
              L = { width: _, height: w, top: A || 0, left: O || 0, updateStyle: E };
            c((F) => ({ size: L, viewport: { ...F.viewport, ...m(P, d, L) } }));
          },
          setDpr: (_) =>
            c((w) => {
              const E = ox(_);
              return { viewport: { ...w.viewport, dpr: E, initialDpr: w.viewport.initialDpr || E } };
            }),
          setFrameloop: (_ = "always") => {
            const w = u().clock;
            w.stop(),
              (w.elapsedTime = 0),
              _ !== "never" && (w.start(), (w.elapsedTime = 0)),
              c(() => ({ frameloop: _ }));
          },
          previousRoot: void 0,
          internal: {
            active: !1,
            priority: 0,
            frames: 0,
            lastEvent: Ke.createRef(),
            interaction: [],
            hovered: new Map(),
            subscribers: [],
            initialClick: [0, 0],
            initialHits: [],
            capturedMap: new Map(),
            subscribe: (_, w, E) => {
              const A = u().internal;
              return (
                (A.priority = A.priority + (w > 0 ? 1 : 0)),
                A.subscribers.push({ ref: _, priority: w, store: E }),
                (A.subscribers = A.subscribers.sort((O, P) => O.priority - P.priority)),
                () => {
                  const O = u().internal;
                  O != null &&
                    O.subscribers &&
                    ((O.priority = O.priority - (w > 0 ? 1 : 0)),
                    (O.subscribers = O.subscribers.filter((P) => P.ref !== _)));
                }
              );
            },
          },
        };
      }),
      n = t.getState();
    let i = n.size,
      s = n.viewport.dpr,
      l = n.camera;
    return (
      t.subscribe(() => {
        const { camera: c, size: u, viewport: h, gl: d, set: p } = t.getState();
        if (u.width !== i.width || u.height !== i.height || h.dpr !== s) {
          var m;
          (i = u), (s = h.dpr), Pb(c, u), d.setPixelRatio(h.dpr);
          const v =
            (m = u.updateStyle) != null
              ? m
              : typeof HTMLCanvasElement < "u" && d.domElement instanceof HTMLCanvasElement;
          d.setSize(u.width, u.height, v);
        }
        c !== l && ((l = c), p((v) => ({ viewport: { ...v.viewport, ...v.viewport.getCurrentViewport(c) } })));
      }),
      t.subscribe((c) => r(c)),
      t
    );
  };
let Gc,
  Nb = new Set(),
  Fb = new Set(),
  Ob = new Set();
function cd(r, e) {
  if (r.size) for (const { callback: t } of r.values()) t(e);
}
function aa(r, e) {
  switch (r) {
    case "before":
      return cd(Nb, e);
    case "after":
      return cd(Fb, e);
    case "tail":
      return cd(Ob, e);
  }
}
let ud, hd;
function fd(r, e, t) {
  let n = e.clock.getDelta();
  for (
    e.frameloop === "never" &&
      typeof r == "number" &&
      ((n = r - e.clock.elapsedTime), (e.clock.oldTime = e.clock.elapsedTime), (e.clock.elapsedTime = r)),
      ud = e.internal.subscribers,
      Gc = 0;
    Gc < ud.length;
    Gc++
  )
    (hd = ud[Gc]), hd.ref.current(hd.store.getState(), n, t);
  return (
    !e.internal.priority && e.gl.render && e.gl.render(e.scene, e.camera),
    (e.internal.frames = Math.max(0, e.internal.frames - 1)),
    e.frameloop === "always" ? 1 : e.internal.frames
  );
}
function Bb(r) {
  let e = !1,
    t = !1,
    n,
    i,
    s;
  function l(h) {
    (i = requestAnimationFrame(l)), (e = !0), (n = 0), aa("before", h), (t = !0);
    for (const p of r.values()) {
      var d;
      (s = p.store.getState()),
        s.internal.active &&
          (s.frameloop === "always" || s.internal.frames > 0) &&
          !((d = s.gl.xr) != null && d.isPresenting) &&
          (n += fd(h, s));
    }
    if (((t = !1), aa("after", h), n === 0)) return aa("tail", h), (e = !1), cancelAnimationFrame(i);
  }
  function c(h, d = 1) {
    var p;
    if (!h) return r.forEach((m) => c(m.store.getState(), d));
    ((p = h.gl.xr) != null && p.isPresenting) ||
      !h.internal.active ||
      h.frameloop === "never" ||
      (d > 1
        ? (h.internal.frames = Math.min(60, h.internal.frames + d))
        : t
          ? (h.internal.frames = 2)
          : (h.internal.frames = 1),
      e || ((e = !0), requestAnimationFrame(l)));
  }
  function u(h, d = !0, p, m) {
    if ((d && aa("before", h), p)) fd(h, p, m);
    else for (const v of r.values()) fd(h, v.store.getState());
    d && aa("after", h);
  }
  return { loop: l, invalidate: c, advance: u };
}
function zb() {
  const r = Ke.useContext(ux);
  if (!r) throw new Error("R3F: Hooks can only be used within the Canvas component!");
  return r;
}
function kb(r, e = 0) {
  const t = zb(),
    n = t.getState().internal.subscribe,
    i = ix(r);
  return Ka(() => n(i, e, t), [e, n, t]), null;
}
const Mo = new Map(),
  { invalidate: H0, advance: G0 } = Bb(Mo),
  { reconciler: Lu, applyProps: oo } = Tb(Mo, Ib),
  ao = { objects: "shallow", strict: !1 },
  Vb = (r, e) => {
    const t = typeof r == "function" ? r(e) : r;
    return cx(t) ? t : new n_({ powerPreference: "high-performance", canvas: e, antialias: !0, alpha: !0, ...r });
  };
function Hb(r, e) {
  const t = typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement;
  if (e) {
    const { width: n, height: i, top: s, left: l, updateStyle: c = t } = e;
    return { width: n, height: i, top: s, left: l, updateStyle: c };
  } else if (typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement && r.parentElement) {
    const { width: n, height: i, top: s, left: l } = r.parentElement.getBoundingClientRect();
    return { width: n, height: i, top: s, left: l, updateStyle: t };
  } else if (typeof OffscreenCanvas < "u" && r instanceof OffscreenCanvas)
    return { width: r.width, height: r.height, top: 0, left: 0, updateStyle: t };
  return { width: 0, height: 0, top: 0, left: 0 };
}
function Gb(r) {
  const e = Mo.get(r),
    t = e == null ? void 0 : e.fiber,
    n = e == null ? void 0 : e.store;
  e && console.warn("R3F.createRoot should only be called once!");
  const i = typeof reportError == "function" ? reportError : console.error,
    s = n || Ub(H0, G0),
    l = t || Lu.createContainer(s, go.ConcurrentRoot, null, !1, null, "", i, null);
  e || Mo.set(r, { fiber: l, store: s });
  let c,
    u = !1,
    h;
  return {
    configure(d = {}) {
      let {
          gl: p,
          size: m,
          scene: v,
          events: x,
          onCreated: M,
          shadows: y = !1,
          linear: _ = !1,
          flat: w = !1,
          legacy: E = !1,
          orthographic: A = !1,
          frameloop: O = "always",
          dpr: P = [1, 2],
          performance: L,
          raycaster: F,
          camera: C,
          onPointerMissed: b,
        } = d,
        D = s.getState(),
        Y = D.gl;
      D.gl || D.set({ gl: (Y = Vb(p, r)) });
      let q = D.raycaster;
      q || D.set({ raycaster: (q = new J_()) });
      const { params: K, ...ae } = F || {};
      if (
        (zt.equ(ae, q, ao) || oo(q, { ...ae }),
        zt.equ(K, q.params, ao) || oo(q, { params: { ...q.params, ...K } }),
        !D.camera || (D.camera === h && !zt.equ(h, C, ao)))
      ) {
        h = C;
        const te = C instanceof Va,
          ce = te ? C : A ? new Wa(0, 0, 0, 0, 0.1, 1e3) : new gn(75, 0, 0.1, 1e3);
        te ||
          ((ce.position.z = 5),
          C &&
            (oo(ce, C),
            ("aspect" in C || "left" in C || "right" in C || "bottom" in C || "top" in C) &&
              ((ce.manual = !0), ce.updateProjectionMatrix())),
          !D.camera && !(C != null && C.rotation) && ce.lookAt(0, 0, 0)),
          D.set({ camera: ce }),
          (q.camera = ce);
      }
      if (!D.scene) {
        let te;
        v != null && v.isScene ? (te = v) : ((te = new ep()), v && oo(te, v)), D.set({ scene: lo(te) });
      }
      if (!D.xr) {
        var j;
        const te = (Ye, re) => {
            const ge = s.getState();
            ge.frameloop !== "never" && G0(Ye, !0, ge, re);
          },
          ce = () => {
            const Ye = s.getState();
            (Ye.gl.xr.enabled = Ye.gl.xr.isPresenting),
              Ye.gl.xr.setAnimationLoop(Ye.gl.xr.isPresenting ? te : null),
              Ye.gl.xr.isPresenting || H0(Ye);
          },
          Ce = {
            connect() {
              const Ye = s.getState().gl;
              Ye.xr.addEventListener("sessionstart", ce), Ye.xr.addEventListener("sessionend", ce);
            },
            disconnect() {
              const Ye = s.getState().gl;
              Ye.xr.removeEventListener("sessionstart", ce), Ye.xr.removeEventListener("sessionend", ce);
            },
          };
        typeof ((j = Y.xr) == null ? void 0 : j.addEventListener) == "function" && Ce.connect(), D.set({ xr: Ce });
      }
      if (Y.shadowMap) {
        const te = Y.shadowMap.enabled,
          ce = Y.shadowMap.type;
        if (((Y.shadowMap.enabled = !!y), zt.boo(y))) Y.shadowMap.type = ha;
        else if (zt.str(y)) {
          var me;
          const Ce = { basic: $0, percentage: Uu, soft: ha, variance: xi };
          Y.shadowMap.type = (me = Ce[y]) != null ? me : ha;
        } else zt.obj(y) && Object.assign(Y.shadowMap, y);
        (te !== Y.shadowMap.enabled || ce !== Y.shadowMap.type) && (Y.shadowMap.needsUpdate = !0);
      }
      const k = tx();
      k && ("enabled" in k ? (k.enabled = !E) : "legacyMode" in k && (k.legacyMode = E)),
        u || oo(Y, { outputEncoding: _ ? 3e3 : 3001, toneMapping: w ? zi : Dd }),
        D.legacy !== E && D.set(() => ({ legacy: E })),
        D.linear !== _ && D.set(() => ({ linear: _ })),
        D.flat !== w && D.set(() => ({ flat: w })),
        p && !zt.fun(p) && !cx(p) && !zt.equ(p, Y, ao) && oo(Y, p),
        x && !D.events.handlers && D.set({ events: x(s) });
      const ne = Hb(r, m);
      return (
        zt.equ(ne, D.size, ao) || D.setSize(ne.width, ne.height, ne.updateStyle, ne.top, ne.left),
        P && D.viewport.dpr !== ox(P) && D.setDpr(P),
        D.frameloop !== O && D.setFrameloop(O),
        D.onPointerMissed || D.set({ onPointerMissed: b }),
        L && !zt.equ(L, D.performance, ao) && D.set((te) => ({ performance: { ...te.performance, ...L } })),
        (c = M),
        (u = !0),
        this
      );
    },
    render(d) {
      return (
        u || this.configure(),
        Lu.updateContainer(Xt.jsx(Wb, { store: s, children: d, onCreated: c, rootElement: r }), l, null, () => {}),
        s
      );
    },
    unmount() {
      hx(r);
    },
  };
}
function Wb({ store: r, children: e, onCreated: t, rootElement: n }) {
  return (
    Ka(() => {
      const i = r.getState();
      i.set((s) => ({ internal: { ...s.internal, active: !0 } })),
        t && t(i),
        r.getState().events.connected || i.events.connect == null || i.events.connect(n);
    }, []),
    Xt.jsx(ux.Provider, { value: r, children: e })
  );
}
function hx(r, e) {
  const t = Mo.get(r),
    n = t == null ? void 0 : t.fiber;
  if (n) {
    const i = t == null ? void 0 : t.store.getState();
    i && (i.internal.active = !1),
      Lu.updateContainer(null, n, null, () => {
        i &&
          setTimeout(() => {
            try {
              var s, l, c, u;
              i.events.disconnect == null || i.events.disconnect(),
                (s = i.gl) == null || (l = s.renderLists) == null || l.dispose == null || l.dispose(),
                (c = i.gl) == null || c.forceContextLoss == null || c.forceContextLoss(),
                (u = i.gl) != null && u.xr && i.xr.disconnect(),
                Rb(i),
                Mo.delete(r);
            } catch {}
          }, 500);
      });
  }
}
Lu.injectIntoDevTools({ bundleType: 0, rendererPackageName: "@react-three/fiber", version: Ke.version });
const dd = {
  onClick: ["click", !1],
  onContextMenu: ["contextmenu", !1],
  onDoubleClick: ["dblclick", !1],
  onWheel: ["wheel", !0],
  onPointerDown: ["pointerdown", !0],
  onPointerUp: ["pointerup", !0],
  onPointerLeave: ["pointerleave", !0],
  onPointerMove: ["pointermove", !0],
  onPointerCancel: ["pointercancel", !0],
  onLostPointerCapture: ["lostpointercapture", !0],
};
function Xb(r) {
  const { handlePointer: e } = Db(r);
  return {
    priority: 1,
    enabled: !0,
    compute(t, n, i) {
      n.pointer.set((t.offsetX / n.size.width) * 2 - 1, -(t.offsetY / n.size.height) * 2 + 1),
        n.raycaster.setFromCamera(n.pointer, n.camera);
    },
    connected: void 0,
    handlers: Object.keys(dd).reduce((t, n) => ({ ...t, [n]: e(n) }), {}),
    update: () => {
      var t;
      const { events: n, internal: i } = r.getState();
      (t = i.lastEvent) != null && t.current && n.handlers && n.handlers.onPointerMove(i.lastEvent.current);
    },
    connect: (t) => {
      var n;
      const { set: i, events: s } = r.getState();
      s.disconnect == null || s.disconnect(),
        i((l) => ({ events: { ...l.events, connected: t } })),
        Object.entries((n = s.handlers) != null ? n : []).forEach(([l, c]) => {
          const [u, h] = dd[l];
          t.addEventListener(u, c, { passive: h });
        });
    },
    disconnect: () => {
      const { set: t, events: n } = r.getState();
      if (n.connected) {
        var i;
        Object.entries((i = n.handlers) != null ? i : []).forEach(([s, l]) => {
          if (n && n.connected instanceof HTMLElement) {
            const [c] = dd[s];
            n.connected.removeEventListener(c, l);
          }
        }),
          t((s) => ({ events: { ...s.events, connected: void 0 } }));
      }
    },
  };
}
function W0(r, e) {
  let t;
  return (...n) => {
    window.clearTimeout(t), (t = window.setTimeout(() => r(...n), e));
  };
}
function Yb({ debounce: r, scroll: e, polyfill: t, offsetSize: n } = { debounce: 0, scroll: !1, offsetSize: !1 }) {
  const i = t || (typeof window > "u" ? class {} : window.ResizeObserver);
  if (!i)
    throw new Error(
      "This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills"
    );
  const [s, l] = Ke.useState({ left: 0, top: 0, width: 0, height: 0, bottom: 0, right: 0, x: 0, y: 0 }),
    c = Ke.useRef({
      element: null,
      scrollContainers: null,
      resizeObserver: null,
      lastBounds: s,
      orientationHandler: null,
    }),
    u = r ? (typeof r == "number" ? r : r.scroll) : null,
    h = r ? (typeof r == "number" ? r : r.resize) : null,
    d = Ke.useRef(!1);
  Ke.useEffect(() => ((d.current = !0), () => void (d.current = !1)));
  const [p, m, v] = Ke.useMemo(() => {
    const _ = () => {
      if (!c.current.element) return;
      const {
          left: w,
          top: E,
          width: A,
          height: O,
          bottom: P,
          right: L,
          x: F,
          y: C,
        } = c.current.element.getBoundingClientRect(),
        b = { left: w, top: E, width: A, height: O, bottom: P, right: L, x: F, y: C };
      c.current.element instanceof HTMLElement &&
        n &&
        ((b.height = c.current.element.offsetHeight), (b.width = c.current.element.offsetWidth)),
        Object.freeze(b),
        d.current && !Kb(c.current.lastBounds, b) && l((c.current.lastBounds = b));
    };
    return [_, h ? W0(_, h) : _, u ? W0(_, u) : _];
  }, [l, n, u, h]);
  function x() {
    c.current.scrollContainers &&
      (c.current.scrollContainers.forEach((_) => _.removeEventListener("scroll", v, !0)),
      (c.current.scrollContainers = null)),
      c.current.resizeObserver && (c.current.resizeObserver.disconnect(), (c.current.resizeObserver = null)),
      c.current.orientationHandler &&
        ("orientation" in screen && "removeEventListener" in screen.orientation
          ? screen.orientation.removeEventListener("change", c.current.orientationHandler)
          : "onorientationchange" in window &&
            window.removeEventListener("orientationchange", c.current.orientationHandler));
  }
  function M() {
    c.current.element &&
      ((c.current.resizeObserver = new i(v)),
      c.current.resizeObserver.observe(c.current.element),
      e &&
        c.current.scrollContainers &&
        c.current.scrollContainers.forEach((_) => _.addEventListener("scroll", v, { capture: !0, passive: !0 })),
      (c.current.orientationHandler = () => {
        v();
      }),
      "orientation" in screen && "addEventListener" in screen.orientation
        ? screen.orientation.addEventListener("change", c.current.orientationHandler)
        : "onorientationchange" in window &&
          window.addEventListener("orientationchange", c.current.orientationHandler));
  }
  const y = (_) => {
    !_ || _ === c.current.element || (x(), (c.current.element = _), (c.current.scrollContainers = fx(_)), M());
  };
  return (
    Zb(v, !!e),
    qb(m),
    Ke.useEffect(() => {
      x(), M();
    }, [e, v, m]),
    Ke.useEffect(() => x, []),
    [y, s, p]
  );
}
function qb(r) {
  Ke.useEffect(() => {
    const e = r;
    return window.addEventListener("resize", e), () => void window.removeEventListener("resize", e);
  }, [r]);
}
function Zb(r, e) {
  Ke.useEffect(() => {
    if (e) {
      const t = r;
      return (
        window.addEventListener("scroll", t, { capture: !0, passive: !0 }),
        () => void window.removeEventListener("scroll", t, !0)
      );
    }
  }, [r, e]);
}
function fx(r) {
  const e = [];
  if (!r || r === document.body) return e;
  const { overflow: t, overflowX: n, overflowY: i } = window.getComputedStyle(r);
  return [t, n, i].some((s) => s === "auto" || s === "scroll") && e.push(r), [...e, ...fx(r.parentElement)];
}
const Jb = ["x", "y", "top", "bottom", "left", "right", "width", "height"],
  Kb = (r, e) => Jb.every((t) => r[t] === e[t]);
var jb = Object.defineProperty,
  Qb = Object.defineProperties,
  $b = Object.getOwnPropertyDescriptors,
  X0 = Object.getOwnPropertySymbols,
  eC = Object.prototype.hasOwnProperty,
  tC = Object.prototype.propertyIsEnumerable,
  Y0 = (r, e, t) => (e in r ? jb(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : (r[e] = t)),
  q0 = (r, e) => {
    for (var t in e || (e = {})) eC.call(e, t) && Y0(r, t, e[t]);
    if (X0) for (var t of X0(e)) tC.call(e, t) && Y0(r, t, e[t]);
    return r;
  },
  nC = (r, e) => Qb(r, $b(e)),
  Z0,
  J0;
typeof window < "u" &&
(((Z0 = window.document) != null && Z0.createElement) ||
  ((J0 = window.navigator) == null ? void 0 : J0.product) === "ReactNative")
  ? Ke.useLayoutEffect
  : Ke.useEffect;
function dx(r, e, t) {
  if (!r) return;
  if (t(r) === !0) return r;
  let n = r.child;
  for (; n; ) {
    const i = dx(n, e, t);
    if (i) return i;
    n = n.sibling;
  }
}
function px(r) {
  try {
    return Object.defineProperties(r, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {},
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {},
      },
    });
  } catch {
    return r;
  }
}
const K0 = console.error;
console.error = function () {
  const r = [...arguments].join("");
  if (r != null && r.startsWith("Warning:") && r.includes("useContext")) {
    console.error = K0;
    return;
  }
  return K0.apply(this, arguments);
};
const wp = px(Ke.createContext(null));
class mx extends Ke.Component {
  render() {
    return Ke.createElement(wp.Provider, { value: this._reactInternals }, this.props.children);
  }
}
function iC() {
  const r = Ke.useContext(wp);
  if (r === null) throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const e = Ke.useId();
  return Ke.useMemo(() => {
    for (const n of [r, r == null ? void 0 : r.alternate]) {
      if (!n) continue;
      const i = dx(n, !1, (s) => {
        let l = s.memoizedState;
        for (; l; ) {
          if (l.memoizedState === e) return !0;
          l = l.next;
        }
      });
      if (i) return i;
    }
  }, [r, e]);
}
function rC() {
  const r = iC(),
    [e] = Ke.useState(() => new Map());
  e.clear();
  let t = r;
  for (; t; ) {
    if (t.type && typeof t.type == "object") {
      const i = t.type._context === void 0 && t.type.Provider === t.type ? t.type : t.type._context;
      i && i !== wp && !e.has(i) && e.set(i, Ke.useContext(px(i)));
    }
    t = t.return;
  }
  return e;
}
function sC() {
  const r = rC();
  return Ke.useMemo(
    () =>
      Array.from(r.keys()).reduce(
        (e, t) => (n) => Ke.createElement(e, null, Ke.createElement(t.Provider, nC(q0({}, n), { value: r.get(t) }))),
        (e) => Ke.createElement(mx, q0({}, e))
      ),
    [r]
  );
}
const oC = Ke.forwardRef(function (
    {
      children: e,
      fallback: t,
      resize: n,
      style: i,
      gl: s,
      events: l = Xb,
      eventSource: c,
      eventPrefix: u,
      shadows: h,
      linear: d,
      flat: p,
      legacy: m,
      orthographic: v,
      frameloop: x,
      dpr: M,
      performance: y,
      raycaster: _,
      camera: w,
      scene: E,
      onPointerMissed: A,
      onCreated: O,
      ...P
    },
    L
  ) {
    Ke.useMemo(() => Eb(vb), []);
    const F = sC(),
      [C, b] = Yb({ scroll: !0, debounce: { scroll: 50, resize: 0 }, ...n }),
      D = Ke.useRef(null),
      Y = Ke.useRef(null);
    Ke.useImperativeHandle(L, () => D.current);
    const q = ix(A),
      [K, ae] = Ke.useState(!1),
      [j, me] = Ke.useState(!1);
    if (K) throw K;
    if (j) throw j;
    const k = Ke.useRef(null);
    Ka(() => {
      const te = D.current;
      b.width > 0 &&
        b.height > 0 &&
        te &&
        (k.current || (k.current = Gb(te)),
        k.current.configure({
          gl: s,
          events: l,
          shadows: h,
          linear: d,
          flat: p,
          legacy: m,
          orthographic: v,
          frameloop: x,
          dpr: M,
          performance: y,
          raycaster: _,
          camera: w,
          scene: E,
          size: b,
          onPointerMissed: (...ce) => (q.current == null ? void 0 : q.current(...ce)),
          onCreated: (ce) => {
            ce.events.connect == null || ce.events.connect(c ? (Ab(c) ? c.current : c) : Y.current),
              u &&
                ce.setEvents({
                  compute: (Ce, Ye) => {
                    const re = Ce[u + "X"],
                      ge = Ce[u + "Y"];
                    Ye.pointer.set((re / Ye.size.width) * 2 - 1, -(ge / Ye.size.height) * 2 + 1),
                      Ye.raycaster.setFromCamera(Ye.pointer, Ye.camera);
                  },
                }),
              O == null || O(ce);
          },
        }),
        k.current.render(
          Xt.jsx(F, {
            children: Xt.jsx(rx, {
              set: me,
              children: Xt.jsx(Ke.Suspense, { fallback: Xt.jsx(bb, { set: ae }), children: e ?? null }),
            }),
          })
        ));
    }),
      Ke.useEffect(() => {
        const te = D.current;
        if (te) return () => hx(te);
      }, []);
    const ne = c ? "none" : "auto";
    return Xt.jsx("div", {
      ref: Y,
      style: { position: "relative", width: "100%", height: "100%", overflow: "hidden", pointerEvents: ne, ...i },
      ...P,
      children: Xt.jsx("div", {
        ref: C,
        style: { width: "100%", height: "100%" },
        children: Xt.jsx("canvas", { ref: D, style: { display: "block" }, children: t }),
      }),
    });
  }),
  aC = Ke.forwardRef(function (e, t) {
    return Xt.jsx(mx, { children: Xt.jsx(oC, { ...e, ref: t }) });
  });
var lC = `uniform float uTime;
uniform vec3 uColor[5]; 

varying vec2 vUv;
varying vec3 vColor;

vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

  float n_ = 1.0/7.0; 
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

void main()
{
    vec2 noiseCoord = uv * vec2(3., 4.);

    float noise = snoise(
      vec3(
        noiseCoord.x + uTime * 3.0, 
        noiseCoord.y, 
        uTime * 10.
      )
    );

    float tilt = -0.8 * uv.y;
    float incline = uv.x * 0.1;
    float offset = incline * mix(-.25, .25, uv.y);

    noise = max(0., noise);

    vec3 pos = vec3(position.x, position.y, position.z + 0.1 + noise * 0.3 + tilt + incline + offset);

    vColor = uColor[4];

    for (int i = 0; i < 4; i++) {
      float noiseFlow = 5. + float(i) * .3;
      float noiseSpeed = 10. + float(i) * .3;
      float noiseSeed = 1. + float(i) * 10.;

      vec2 noiseFreq = vec2(.3, .4);

      float noiseFloor = .1;
      float noiseCeil = .6 + float(i) * 0.07;
      
      float noise = smoothstep(noiseFloor, noiseCeil, snoise(
        vec3(
          noiseCoord.x * noiseFreq.x + uTime * noiseFlow, 
          noiseCoord.y * noiseFreq.y, 
          uTime * noiseSpeed + noiseSeed
        )
      )) ;

      vColor = mix(vColor, uColor[i], noise);
    }

    vUv = uv;
    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
}`,
  cC = `varying vec2 vUv;
varying vec3 vColor;

void main()
{
    gl_FragColor = vec4(vUv, 0.0, 1.0);
    gl_FragColor = vec4(vColor, 1.0);
}`;
const uC = ["#d1313d", "#e5625c", "#f9bf76", "#8eb2c5", "#615375"].map((r) => new Ne(r));
function hC() {
  const r = Ke.useRef(null),
    e = Ke.useRef(null);
  return (
    kb((t) => {
      e.current && (e.current.uniforms.uTime.value = t.clock.elapsedTime * 0.01);
    }),
    Xt.jsxs("mesh", {
      ref: r,
      children: [
        Xt.jsx("planeGeometry", { args: [2, 2, 200, 200] }),
        Xt.jsx("shaderMaterial", {
          ref: e,
          vertexShader: lC,
          fragmentShader: cC,
          side: Si,
          uniforms: { uTime: { value: 0 }, uColor: { value: uC } },
        }),
      ],
    })
  );
}
const fC = () =>
    Xt.jsx(aC, {
      style: { width: "100dvw", height: "100dvh" },
      camera: { fov: 75, near: 0.1, far: 100, position: [-0.01, 0, 0.2] },
      children: Xt.jsx(hC, {}),
    }),
  dC = () =>
    Xt.jsxs("section", {
      className: "relative",
      children: [
        Xt.jsx(fC, {}),
        Xt.jsxs("div", {
          className:
            "absolute flex flex-col items-center gap-y-14 left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 z-10",
          children: [
            Xt.jsx(tg.h1, {
              className: "text-7xl pointer-events-none",
              initial: { opacity: 0, y: -50 },
              animate: { opacity: 1, y: 0 },
              transition: { delay: 0.5, duration: 1, type: "spring", stiffness: 75, damping: 10 },
              children: "練習アプリ",
            }),
            Xt.jsx(tg.div, {
              initial: { opacity: 0, y: 50 },
              animate: { opacity: 1, y: 0 },
              transition: { delay: 1.5, duration: 1, type: "spring", stiffness: 75, damping: 10 },
              children: Xt.jsx(ay, {
                asChild: !0,
                className: "text-xl",
                size: "lg",
                children: Xt.jsx(sy, { to: "/vocabulary", children: "単語学習を始める" }),
              }),
            }),
          ],
        }),
      ],
    }),
  gC = oy("/")({ component: dC });
export { gC as Route };
