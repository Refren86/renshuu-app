/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const VocabularyLazyImport = createFileRoute('/vocabulary')()
const ReviewedWordsLazyImport = createFileRoute('/reviewed-words')()
const FlashcardsLazyImport = createFileRoute('/flashcards')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const VocabularyLazyRoute = VocabularyLazyImport.update({
  path: '/vocabulary',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/vocabulary.lazy').then((d) => d.Route))

const ReviewedWordsLazyRoute = ReviewedWordsLazyImport.update({
  path: '/reviewed-words',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/reviewed-words.lazy').then((d) => d.Route),
)

const FlashcardsLazyRoute = FlashcardsLazyImport.update({
  path: '/flashcards',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/flashcards.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/flashcards': {
      id: '/flashcards'
      path: '/flashcards'
      fullPath: '/flashcards'
      preLoaderRoute: typeof FlashcardsLazyImport
      parentRoute: typeof rootRoute
    }
    '/reviewed-words': {
      id: '/reviewed-words'
      path: '/reviewed-words'
      fullPath: '/reviewed-words'
      preLoaderRoute: typeof ReviewedWordsLazyImport
      parentRoute: typeof rootRoute
    }
    '/vocabulary': {
      id: '/vocabulary'
      path: '/vocabulary'
      fullPath: '/vocabulary'
      preLoaderRoute: typeof VocabularyLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/flashcards': typeof FlashcardsLazyRoute
  '/reviewed-words': typeof ReviewedWordsLazyRoute
  '/vocabulary': typeof VocabularyLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/flashcards': typeof FlashcardsLazyRoute
  '/reviewed-words': typeof ReviewedWordsLazyRoute
  '/vocabulary': typeof VocabularyLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/flashcards': typeof FlashcardsLazyRoute
  '/reviewed-words': typeof ReviewedWordsLazyRoute
  '/vocabulary': typeof VocabularyLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/flashcards' | '/reviewed-words' | '/vocabulary'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/flashcards' | '/reviewed-words' | '/vocabulary'
  id: '__root__' | '/' | '/flashcards' | '/reviewed-words' | '/vocabulary'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  FlashcardsLazyRoute: typeof FlashcardsLazyRoute
  ReviewedWordsLazyRoute: typeof ReviewedWordsLazyRoute
  VocabularyLazyRoute: typeof VocabularyLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  FlashcardsLazyRoute: FlashcardsLazyRoute,
  ReviewedWordsLazyRoute: ReviewedWordsLazyRoute,
  VocabularyLazyRoute: VocabularyLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/flashcards",
        "/reviewed-words",
        "/vocabulary"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/flashcards": {
      "filePath": "flashcards.lazy.tsx"
    },
    "/reviewed-words": {
      "filePath": "reviewed-words.lazy.tsx"
    },
    "/vocabulary": {
      "filePath": "vocabulary.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
